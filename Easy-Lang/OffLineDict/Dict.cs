using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.IO.Compression;

namespace f
{
    public class D
    {
        #region GetFileStreamByName

        static Hashtable m_FileStreams = new Hashtable(8);
        public static StreamReader GetDictStreamByName(char fileNameTermination)
        {
            string fileName = @"dict\WordNet\data" + fileNameTermination + ".tz";
            string keyName = fileName; // т.к. dictName может поменятся
            if (m_FileStreams[keyName] == null)
            {
                if (!File.Exists(fileName))
                    fileName = AppDomain.CurrentDomain.BaseDirectory + fileName;
                if (File.Exists(fileName))
                {
                    FileStream infile = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read);
                    infile.Position = 1913;

                    C zipStream = new C(infile, CompressionMode.Decompress, true);
                    byte[] linebuffer = new byte[15000000]; //14453446 дано про запас
                    zipStream.Read(linebuffer, 0, 15000000);
                    MemoryStream ms = new MemoryStream(linebuffer);

                    StreamReader sr = new StreamReader(ms);
                    m_FileStreams.Add(keyName, sr);
                }
                else return null;
            }
            return (StreamReader)m_FileStreams[keyName];
        }
        #endregion

        static I _fifo = new I();

        #region GetCard
        public static string[] GetCards(ref string rawWord)
        {
#if DEBUG
            //DateTime timeMarker = DateTime.Now;
            //Console.WriteLine("--------------   " + rawWord + "  ----------------");
#endif
            string word = rawWord;
            // word = D.GetWord(word);
            if (string.IsNullOrEmpty(word) || word.Length == 1)
                return new string[0];
            // кэш карточек
            //if (_fifo[word] != null)
            //{
            //    rawWord = word;
            //    return (string[])_fifo[word];
            //}
            string[] ret = GetCardLines(word, false);
            #region Exclude
            if (ret.Length == 0)
            {
                if (Exclude[word] != null)
                {
                    word = (string)Exclude[word];
                    ret = GetCardLines(word, false);
                }
            }
            #endregion
            #region Morpheme
            if (ret.Length == 0)
            {
                string wordMorpheme = D.GetMorpheme(word);
                if (string.IsNullOrEmpty(wordMorpheme) || wordMorpheme.Length == 1)
                    return ret;
                ret = GetCardLines(wordMorpheme, true);
                if (ret.Length == 0)
                {
                    if (wordMorpheme != word)
                    {
                        ret = GetCardLines(wordMorpheme + 'e', true);
                    }
                    else
                    {
                        if (wordMorpheme.EndsWith("oes")) // hero 	heroes; potato 	potatoes; volcano 	volcanoes or volcanos
                        {
                            wordMorpheme = word.Substring(0, wordMorpheme.Length - 2);
                            ret = GetCardLines(wordMorpheme, true);
                        }
                        else if (wordMorpheme.EndsWith("ies")) // cherry 	cherries; lady 	ladies
                        {
                            wordMorpheme = word.Substring(0, wordMorpheme.Length - 3) + 'y';
                            ret = GetCardLines(wordMorpheme, true);
                        }
                        else if (wordMorpheme.EndsWith("s"))
                        {
                            wordMorpheme = word.Substring(0, wordMorpheme.Length - 1);
                            ret = GetCardLines(wordMorpheme, true);
                        }
                    }
                }
                if (ret.Length > 0)
                    rawWord = wordMorpheme;
            }
            #endregion
            if (ret.Length == 0 && word.IndexOf('-') > 0)
            {
                ret = GetCardLines(word.Replace('-', ' '), true);
            }
            _fifo.Add(word, ret);
#if DEBUG
            //Console.WriteLine("{0} Get card with count {1}", DateTime.Now - timeMarker, ret.Length);
#endif
            return ret;
        }
        #endregion

        #region GetWordMeanings
        internal static string[] GetCardLines(string word, bool getAlternative)
        {
            if (D.Index.ContainsKey(word))
            {
                IndexItem item = D.Index[word];
                List<string> list = item.GetIDs();
                string[] ret = new string[list.Count];
                int i = 0;
                foreach (string id in list)
                {
                    ret[i++] = id.Split(';')[0] + ';' + GetCardWordByID(id.Split(';')[1]);
                }
                return ret;
            }
            else
                return new string[] { };
        }


        //        internal static string[] GetWordMeanings1(string word, bool getAlternative)
        //        {
        //#region DEBUG
        //    #if DEBUG
        //            DateTime timeMarker = DateTime.Now;
        //    #endif   
        //#endregion                 
        //            StreamReader streamIndex = D.GetDictStreamByName('i');
        //            streamIndex.BaseStream.Seek(0, SeekOrigin.Begin);
        //            streamIndex.DiscardBufferedData();
        //            string indexKey = word.Length < 5 ? word : word.Substring(0, 5);
        //            if (indxSense[indexKey] != null)
        //                streamIndex.BaseStream.Position = (long)indxSense[indexKey];
        //            else
        //                return new string[] { };
        //            string[] ids = GetIDs(word, streamIndex, getAlternative);
        //#region DEBUG
        //        #if DEBUG   
        //            Console.WriteLine("{0} Index", DateTime.Now - timeMarker);
        //            timeMarker = DateTime.Now;
        //#endif 
        //    #endregion
        //            ArrayList al = new ArrayList();
        //            foreach (string id in ids)
        //            {
        //                al.Add(id.Split(';')[0] + ";" + GetCardWordByID(id.Split(';')[1])); // id[0] + GetCardWordByID(id)
        //            }
        //#region DEBUG
        //        #if DEBUG
        //            if (al.Count>0)
        //                Console.WriteLine("{0} Getted Meanings Count {1}", DateTime.Now - timeMarker, al.Count);
        //#endif 
        //    #endregion
        //            return (string[])al.ToArray(typeof(string));
        //        }

        public static string GetCardWordByID(string id)
        {
            string pos = id.Substring(1);
            int ind = 0;
            if (!string.IsNullOrEmpty(id) && int.TryParse(pos, out ind))
            {
                StreamReader sr = GetDictStreamByName(id[0]);
                if (sr == null) throw new ApplicationException("Dictionary '" + id[0] + "' not found.");
                sr.BaseStream.Seek(0, SeekOrigin.Begin);
                sr.DiscardBufferedData();
                sr.BaseStream.Position = ind;
                string line = sr.ReadLine();
                if (String.IsNullOrEmpty(line) || line.Length < 8 || !line.Substring(0, 8).EndsWith(pos.ToString())) // т.к. 00033654 сравниваем 33654
                {
                    throw new ApplicationException("Incorrect line");
                }
                return line;
            }
            return "";
        }
        #endregion

        #region GetIDs
        static string[] GetIDs(string word, StreamReader sr, bool getAlternative)
        {
            Hashtable ht = new Hashtable();
            long initPosition = sr.BaseStream.Position;
            string line = "";
            bool breakReading = false;
            while ((line = sr.ReadLine()) != null && !breakReading)
            {
                if (line.StartsWith(" ")) continue;
                // если только line.StartsWith(word) без проверки на пробел то можно найти и образованное слово или словосочетание
                if (line.StartsWith(word + '%')) // || line[word.Length+1] == '_'))
                {
                    char dictInd = GetDictId(line);
                    string[] vals = line.Split(' ');
                    ht.Add(dictInd + vals[1], int.Parse(vals[vals.Length - 1]));
                    //                    al.Add(dictInd + line.Substring(line.IndexOf(":: ") + 3, 8));
                }
                else if (ht.Count > 0) // т.е. уже несовпадает а совпадения уже были
                    breakReading = true;
                if (!string.IsNullOrEmpty(line) && line[0] != word[0]) // т.е. буква уже не та и бесполезно искать
                    breakReading = true;
            }
            // search Alternative
            if (ht.Count == 0 && getAlternative)
            {
                // теперь предполагаем что слово составное и ищем Comp от Computer
                breakReading = false;
                sr.BaseStream.Seek(0, SeekOrigin.Begin);
                sr.DiscardBufferedData();
                sr.BaseStream.Position = initPosition;
                while ((line = sr.ReadLine()) != null && !breakReading)
                {
                    if (line.StartsWith(" ")) continue;
                    char dictInd = GetDictId(line); // эта строка здесь !! т.к. внутри проверка на %
                    string wrd = line.Substring(0, line.IndexOf('%'));
                    if (word.StartsWith(wrd) && word.Length / 2 < wrd.Length) // || line[word.Length+1] == '_'))
                    {
                        //                        al.Add(dictInd + line.Substring(line.IndexOf(":: ") + 3, 8));
                        string[] vals = line.Split(' ');
                        ht.Add(dictInd + vals[1], int.Parse(vals[vals.Length - 1]));
                    }
                    else if (ht.Count > 0)
                        breakReading = true;
                    if (line[0] != word[0]) // т.е. буква уже не та и бесполезно искать
                        breakReading = true;
                }
            }
            if (ht.Count == 0) return new string[0];
            string[] ret = new string[ht.Count];
            string[] keys = new string[ht.Count];
            int i = 0;
            foreach (DictionaryEntry dc in ht)
            {
                keys[i] = ((string)dc.Key)[0].ToString() + ";" + dc.Value.ToString(); // для сортировки
                ret[i] = dc.Value.ToString() + ";" + (string)dc.Key; // for return
                ++i;
            }
            // теперь отсортируем по части речи и по количеству использований
            Array.Sort(keys, ret, new CountUsingAndPartParticipate());
            Array.Reverse(ret);
            return ret;
        }

        /// <summary>Отсортировать по типу части речи и количеству использований.</summary>
        class CountUsingAndPartParticipate : IComparer
        {
            // Value Condition Less than zero x is less than y. Zero x equals y. Greater
            public int Compare(object x, object y)
            {
                string[] countAndPart1 = ((string)x).Split(';');
                string[] countAndPart2 = ((string)y).Split(';');
                #region noun должен быть первым
                if (countAndPart1[0] == "n")
                    countAndPart1[0] = ((char)500).ToString();
                if (countAndPart2[0] == "n")
                    countAndPart2[0] = ((char)500).ToString();
                #endregion
                if (countAndPart1[0] == countAndPart2[0]) // сравним по количеству употреблений
                    return int.Parse(countAndPart1[1]) - int.Parse(countAndPart2[1]);
                else // сравним символы словарей 
                    return countAndPart1[0][0] - countAndPart2[0][0];

            }
        }
        #endregion

        #region oldest oldest oldest BuilIndexes && BuilPhonetics
        static char GetDictId(string line)
        {
            if (line.IndexOf('%') == -1) throw new ApplicationException("Wrong reading line.");
            char c = line[line.IndexOf('%') + 1];
            switch (c)
            {
                case '1': return 'n';
                case '2': return 'v';
                case '3': return 'a'; // a
                case '4': return 'r';
                case '5': return 'a'; // s
                default:
                    throw new ApplicationException("Unknown identifier for getting suffix dictionary.");
            }
        }

        //public static Hashtable Phonetic = new Hashtable();
        //static Hashtable indxSense = new Hashtable();


        //        static string TranslateUnicode(string val)
        //        {
        //            int[] colons = new int[] { 15, 17, 18, 23, 27 };
        //            char[] u = new char[] { (char)885, (char)39, (char)40, (char)41, (char)44, (char)45, (char)46, (char)58, (char)59, (char)652, (char)679, (char)240, (char)604, (char)603, (char)676, (char)117, (char)305, (char)105, (char)596, (char)951, (char)596, (char)594, (char)593, (char)593, (char)643, (char)952, (char)651, (char)601, (char)658, (char)91, (char)93, (char)96, (char)97, (char)98, (char)100, (char)101, (char)102, (char)103, (char)104, (char)105, (char)106, (char)107, (char)108, (char)109, (char)110, (char)111, (char)112, (char)601, (char)114, (char)115, (char)116, (char)117, (char)118, (char)119, (char)230, (char)122, (char)32, (char)32, (char)32 };
        //            char[] p = new char[] { (char)34, (char)39, (char)40, (char)41, (char)44, (char)45, (char)46, (char)58, (char)59, (char)65, (char)67, (char)68, (char)69, (char)70, (char)71, (char)72, (char)73, (char)74, (char)76, (char)78, (char)79, (char)80, (char)81, (char)82, (char)83, (char)84, (char)86, (char)87, (char)90, (char)91, (char)93, (char)96, (char)97, (char)98, (char)100, (char)101, (char)102, (char)103, (char)104, (char)105, (char)106, (char)107, (char)108, (char)109, (char)110, (char)111, (char)112, (char)113, (char)114, (char)115, (char)116, (char)117, (char)118, (char)119, (char)120, (char)122, (char)160, (char)32, (char)124 };
        //            string ret = "";
        //            foreach (char c in val)
        //            {
        //                int i = Array.IndexOf(p, c);
        ////                if (c == 124) break;
        //                if (i == -1)
        //                {
        //                    Console.WriteLine(c);
        //                    break;
        //                }
        //                ret += u[i];
        //                if (Array.IndexOf(colons, i) != -1)
        //                    ret += ':';
        //            }
        //            return ret;
        //        }


        //public static void BuilIndexes()
        //{
        //    StreamReader sr = GetDictStreamByName('f');
        //    sr.BaseStream.Seek(0, SeekOrigin.Begin);
        //    sr.DiscardBufferedData();
        //    string line = "";
        //    while ((line = sr.ReadLine()) != null)
        //    {
        //        int i = line.IndexOf(' ');
        //        if (i == -1) continue; // TODO: последняя строка так себя ведет                                
        //        string val = TranslateUnicode(line.Substring(i + 1));
        //        Phonetic.Add(line.Substring(0, i), val);
        //    }


        //    sr = GetFileStreamByName(@"\dict\data.ind");
        //    sr.BaseStream.Seek(0, SeekOrigin.Begin);
        //    sr.DiscardBufferedData();
        //    FieldInfo fi = sr.GetType().GetField("charPos", BindingFlags.Instance | BindingFlags.NonPublic);
        //    int cursor = 0; 
        //    //int max = 1;
        //    while ((line = sr.ReadLine()) != null)
        //    {
        //        if (line.StartsWith(" ")) continue;
        //        int ind = line.IndexOf('%');
        //        //if (Math.Max(max, line.Split('_').Length) > max)
        //        //{
        //        //    max = line.Split('_').Length;
        //        //    Console.WriteLine(max);
        //        //}
        //        string word = line.Substring(0, ind > 5 ? 5 : ind);
        //        if (indxSense[word] == null)
        //        {
        //            cursor = (int)fi.GetValue(sr);
        //            long val = sr.BaseStream.Position - 1024 + (cursor - line.Length-1);
        //            //if (line.StartsWith("hole%"))
        //            //    Test(val);
        //            indxSense.Add(word, val);
        //        }
        //    }
        //    object foo = Exclude["test"];
        //}

        //static void Test(long position)
        //{
        //    StreamReader streamIndex = GetFileStreamByName(@"\dict\data.ind");
        //    streamIndex.BaseStream.Seek(0, SeekOrigin.Begin);
        //    streamIndex.DiscardBufferedData();
        //    streamIndex.BaseStream.Position = position;
        //    Console.WriteLine(streamIndex.ReadLine());
        //    System.Diagnostics.Debugger.Break();
        //}
        #endregion

        #region Exclude
        static Hashtable m_Exclude = null;
        static Hashtable Exclude
        {
            get
            {
                if (m_Exclude == null)
                {
                    //StreamReader sr = GetFileStreamByName(@"\dict\noun.exc");
                    //sr.BaseStream.Seek(0, SeekOrigin.Begin);
                    //sr.DiscardBufferedData();
                    //string line = "";
                    //FieldInfo fi = sr.GetType().GetField("charPos", BindingFlags.Instance | BindingFlags.NonPublic);
                    //while ((line = sr.ReadLine()) != null)
                    //{
                    //    string[] ss = line.Split(' ');
                    //    if (ss[0] == ss[1]) continue;
                    //    Console.WriteLine(string.Format(@"m_Exclude.Add(""{0}"", ""{1}"");", ss[0], ss[1]));
                    //}

                    m_Exclude = new Hashtable();
                    // ADV
                    //  m_Exclude.Add("best", "well"); ==               ADJ      "best", "good"
                    // m_Exclude.Add("better", "well"); == "better", "good"
                    m_Exclude.Add("deeper", "deeply");
                    m_Exclude.Add("farther", "far");
                    m_Exclude.Add("further", "far");
                    m_Exclude.Add("harder", "hard");
                    m_Exclude.Add("hardest", "hard");

                    #region ADJ
                    m_Exclude.Add("airier", "airy");
                    m_Exclude.Add("airiest", "airy");
                    m_Exclude.Add("angrier", "angry");
                    m_Exclude.Add("angriest", "angry");
                    m_Exclude.Add("artier", "arty");
                    m_Exclude.Add("artiest", "arty");
                    m_Exclude.Add("ashier", "ashy");
                    m_Exclude.Add("ashiest", "ashy");
                    m_Exclude.Add("baggier", "baggy");
                    m_Exclude.Add("baggiest", "baggy");
                    m_Exclude.Add("balkier", "balky");
                    m_Exclude.Add("balkiest", "balky");
                    m_Exclude.Add("balmier", "balmy");
                    m_Exclude.Add("balmiest", "balmy");
                    m_Exclude.Add("bandier", "bandy");
                    m_Exclude.Add("bandiest", "bandy");
                    m_Exclude.Add("barmier", "barmy");
                    m_Exclude.Add("barmiest", "barmy");
                    m_Exclude.Add("battier", "batty");
                    m_Exclude.Add("battiest", "batty");
                    m_Exclude.Add("baulkier", "baulky");
                    m_Exclude.Add("baulkiest", "baulky");
                    m_Exclude.Add("bawdier", "bawdy");
                    m_Exclude.Add("bawdiest", "bawdy");
                    m_Exclude.Add("beadier", "beady");
                    m_Exclude.Add("beadiest", "beady");
                    m_Exclude.Add("beastlier", "beastly");
                    m_Exclude.Add("beastliest", "beastly");
                    m_Exclude.Add("beefier", "beefy");
                    m_Exclude.Add("beefiest", "beefy");
                    m_Exclude.Add("beerier", "beery");
                    m_Exclude.Add("beeriest", "beery");
                    m_Exclude.Add("bendier", "bendy");
                    m_Exclude.Add("bendiest", "bendy");
                    m_Exclude.Add("best", "good");
                    m_Exclude.Add("better", "good");
                    m_Exclude.Add("bigger", "big");
                    m_Exclude.Add("biggest", "big");
                    m_Exclude.Add("bitchier", "bitchy");
                    m_Exclude.Add("bitchiest", "bitchy");
                    m_Exclude.Add("bittier", "bitty");
                    m_Exclude.Add("bittiest", "bitty");
                    m_Exclude.Add("blearier", "bleary");
                    m_Exclude.Add("bleariest", "bleary");
                    m_Exclude.Add("bloodier", "bloody");
                    m_Exclude.Add("bloodiest", "bloody");
                    m_Exclude.Add("bloodthirstier", "bloodthirsty");
                    m_Exclude.Add("bloodthirstiest", "bloodthirsty");
                    m_Exclude.Add("blowier", "blowy");
                    m_Exclude.Add("blowiest", "blowy");
                    m_Exclude.Add("blowsier", "blowsy");
                    m_Exclude.Add("blowsiest", "blowsy");
                    m_Exclude.Add("blowzier", "blowzy");
                    m_Exclude.Add("blowziest", "blowzy");
                    m_Exclude.Add("bluer", "blue");
                    m_Exclude.Add("bluest", "blue");
                    m_Exclude.Add("bonier", "bony");
                    m_Exclude.Add("boniest", "bony");
                    m_Exclude.Add("bonnier", "bonny");
                    m_Exclude.Add("bonniest", "bonny");
                    m_Exclude.Add("boozier", "boozy");
                    m_Exclude.Add("booziest", "boozy");
                    m_Exclude.Add("boskier", "bosky");
                    m_Exclude.Add("boskiest", "bosky");
                    m_Exclude.Add("bossier", "bossy");
                    m_Exclude.Add("bossiest", "bossy");
                    m_Exclude.Add("botchier", "botchy");
                    m_Exclude.Add("botchiest", "botchy");
                    m_Exclude.Add("bouncier", "bouncy");
                    m_Exclude.Add("bounciest", "bouncy");
                    m_Exclude.Add("brainier", "brainy");
                    m_Exclude.Add("brainiest", "brainy");
                    m_Exclude.Add("brashier", "brashy");
                    m_Exclude.Add("brashiest", "brashy");
                    m_Exclude.Add("brassier", "brassy");
                    m_Exclude.Add("brassiest", "brassy");
                    m_Exclude.Add("brawnier", "brawny");
                    m_Exclude.Add("brawniest", "brawny");
                    m_Exclude.Add("breathier", "breathy");
                    m_Exclude.Add("breathiest", "breathy");
                    m_Exclude.Add("breezier", "breezy");
                    m_Exclude.Add("breeziest", "breezy");
                    m_Exclude.Add("brinier", "briny");
                    m_Exclude.Add("briniest", "briny");
                    m_Exclude.Add("broodier", "broody");
                    m_Exclude.Add("broodiest", "broody");
                    m_Exclude.Add("bubblier", "bubbly");
                    m_Exclude.Add("bubbliest", "bubbly");
                    m_Exclude.Add("buggier", "buggy");
                    m_Exclude.Add("buggiest", "buggy");
                    m_Exclude.Add("bulkier", "bulky");
                    m_Exclude.Add("bulkiest", "bulky");
                    m_Exclude.Add("bumpier", "bumpy");
                    m_Exclude.Add("bumpiest", "bumpy");
                    m_Exclude.Add("bunchier", "bunchy");
                    m_Exclude.Add("bunchiest", "bunchy");
                    m_Exclude.Add("burlier", "burly");
                    m_Exclude.Add("burliest", "burly");
                    m_Exclude.Add("burrier", "burry");
                    m_Exclude.Add("burriest", "burry");
                    m_Exclude.Add("bushier", "bushy");
                    m_Exclude.Add("bushiest", "bushy");
                    m_Exclude.Add("busier", "busy");
                    m_Exclude.Add("busiest", "busy");
                    m_Exclude.Add("bustier", "busty");
                    m_Exclude.Add("bustiest", "busty");
                    m_Exclude.Add("cagier", "cagey");
                    m_Exclude.Add("cagiest", "cagey");
                    m_Exclude.Add("cannier", "canny");
                    m_Exclude.Add("canniest", "canny");
                    m_Exclude.Add("cantier", "canty");
                    m_Exclude.Add("cantiest", "canty");
                    m_Exclude.Add("catchier", "catchy");
                    m_Exclude.Add("catchiest", "catchy");
                    m_Exclude.Add("cattier", "catty");
                    m_Exclude.Add("cattiest", "catty");
                    m_Exclude.Add("chancier", "chancy");
                    m_Exclude.Add("chanciest", "chancy");
                    m_Exclude.Add("charier", "chary");
                    m_Exclude.Add("chariest", "chary");
                    m_Exclude.Add("chattier", "chatty");
                    m_Exclude.Add("chattiest", "chatty");
                    m_Exclude.Add("cheekier", "cheeky");
                    m_Exclude.Add("cheekiest", "cheeky");
                    m_Exclude.Add("cheerier", "cheery");
                    m_Exclude.Add("cheeriest", "cheery");
                    m_Exclude.Add("cheesier", "cheesy");
                    m_Exclude.Add("cheesiest", "cheesy");
                    m_Exclude.Add("chestier", "chesty");
                    m_Exclude.Add("chestiest", "chesty");
                    m_Exclude.Add("chewier", "chewy");
                    m_Exclude.Add("chewiest", "chewy");
                    m_Exclude.Add("chillier", "chilly");
                    m_Exclude.Add("chilliest", "chilly");
                    m_Exclude.Add("chintzier", "chintzy");
                    m_Exclude.Add("chintziest", "chintzy");
                    m_Exclude.Add("chippier", "chippy");
                    m_Exclude.Add("chippiest", "chippy");
                    m_Exclude.Add("choosier", "choosy");
                    m_Exclude.Add("choosiest", "choosy");
                    m_Exclude.Add("choppier", "choppy");
                    m_Exclude.Add("choppiest", "choppy");
                    m_Exclude.Add("chubbier", "chubby");
                    m_Exclude.Add("chubbiest", "chubby");
                    m_Exclude.Add("chuffier", "chuffy");
                    m_Exclude.Add("chuffiest", "chuffy");
                    m_Exclude.Add("chummier", "chummy");
                    m_Exclude.Add("chummiest", "chummy");
                    m_Exclude.Add("chunkier", "chunky");
                    m_Exclude.Add("chunkiest", "chunky");
                    m_Exclude.Add("churchier", "churchy");
                    m_Exclude.Add("churchiest", "churchy");
                    m_Exclude.Add("clammier", "clammy");
                    m_Exclude.Add("clammiest", "clammy");
                    m_Exclude.Add("classier", "classy");
                    m_Exclude.Add("classiest", "classy");
                    m_Exclude.Add("cleanlier", "cleanly");
                    m_Exclude.Add("cleanliest", "cleanly");
                    m_Exclude.Add("clerklier", "clerkly");
                    m_Exclude.Add("clerkliest", "clerkly");
                    m_Exclude.Add("cloudier", "cloudy");
                    m_Exclude.Add("cloudiest", "cloudy");
                    m_Exclude.Add("clubbier", "clubby");
                    m_Exclude.Add("clubbiest", "clubby");
                    m_Exclude.Add("clumsier", "clumsy");
                    m_Exclude.Add("clumsiest", "clumsy");
                    m_Exclude.Add("cockier", "cocky");
                    m_Exclude.Add("cockiest", "cocky");
                    m_Exclude.Add("collier", "colly");
                    m_Exclude.Add("colliest", "colly");
                    m_Exclude.Add("comelier", "comely");
                    m_Exclude.Add("comeliest", "comely");
                    m_Exclude.Add("comfier", "comfy");
                    m_Exclude.Add("comfiest", "comfy");
                    m_Exclude.Add("cornier", "corny");
                    m_Exclude.Add("corniest", "corny");
                    m_Exclude.Add("cosier", "cosy");
                    m_Exclude.Add("cosiest", "cosy");
                    m_Exclude.Add("costlier", "costly");
                    m_Exclude.Add("costliest", "costly");
                    m_Exclude.Add("courtlier", "courtly");
                    m_Exclude.Add("courtliest", "courtly");
                    m_Exclude.Add("cozier", "cozy");
                    m_Exclude.Add("coziest", "cozy");
                    m_Exclude.Add("crabbier", "crabby");
                    m_Exclude.Add("crabbiest", "crabby");
                    m_Exclude.Add("craftier", "crafty");
                    m_Exclude.Add("craftiest", "crafty");
                    m_Exclude.Add("craggier", "craggy");
                    m_Exclude.Add("craggiest", "craggy");
                    m_Exclude.Add("crankier", "cranky");
                    m_Exclude.Add("crankiest", "cranky");
                    m_Exclude.Add("crawlier", "crawly");
                    m_Exclude.Add("crawliest", "crawly");
                    m_Exclude.Add("crazier", "crazy");
                    m_Exclude.Add("craziest", "crazy");
                    m_Exclude.Add("creamier", "creamy");
                    m_Exclude.Add("creamiest", "creamy");
                    m_Exclude.Add("creepier", "creepy");
                    m_Exclude.Add("creepiest", "creepy");
                    m_Exclude.Add("crispier", "crispy");
                    m_Exclude.Add("crispiest", "crispy");
                    m_Exclude.Add("crumbier", "crumby");
                    m_Exclude.Add("crumbiest", "crumby");
                    m_Exclude.Add("crumblier", "crumbly");
                    m_Exclude.Add("crumbliest", "crumbly");
                    m_Exclude.Add("crummier", "crummy");
                    m_Exclude.Add("crummiest", "crummy");
                    m_Exclude.Add("crustier", "crusty");
                    m_Exclude.Add("crustiest", "crusty");
                    m_Exclude.Add("curlier", "curly");
                    m_Exclude.Add("curliest", "curly");
                    m_Exclude.Add("cuter", "cute");
                    m_Exclude.Add("daffier", "daffy");
                    m_Exclude.Add("daffiest", "daffy");
                    m_Exclude.Add("daintier", "dainty");
                    m_Exclude.Add("daintiest", "dainty");
                    m_Exclude.Add("dandier", "dandy");
                    m_Exclude.Add("dandiest", "dandy");
                    m_Exclude.Add("deadlier", "deadly");
                    m_Exclude.Add("deadliest", "deadly");
                    m_Exclude.Add("dewier", "dewy");
                    m_Exclude.Add("dewiest", "dewy");
                    m_Exclude.Add("dicier", "dicey");
                    m_Exclude.Add("diciest", "dicey");
                    m_Exclude.Add("dimmer", "dim");
                    m_Exclude.Add("dimmest", "dim");
                    m_Exclude.Add("dingier", "dingy");
                    m_Exclude.Add("dingiest", "dingy");
                    m_Exclude.Add("dinkier", "dinky");
                    m_Exclude.Add("dinkiest", "dinky");
                    m_Exclude.Add("dippier", "dippy");
                    m_Exclude.Add("dippiest", "dippy");
                    m_Exclude.Add("dirtier", "dirty");
                    m_Exclude.Add("dirtiest", "dirty");
                    m_Exclude.Add("dishier", "dishy");
                    m_Exclude.Add("dishiest", "dishy");
                    m_Exclude.Add("dizzier", "dizzy");
                    m_Exclude.Add("dizziest", "dizzy");
                    m_Exclude.Add("dodgier", "dodgy");
                    m_Exclude.Add("dodgiest", "dodgy");
                    m_Exclude.Add("dopier", "dopey");
                    m_Exclude.Add("dopiest", "dopey");
                    m_Exclude.Add("dottier", "dotty");
                    m_Exclude.Add("dottiest", "dotty");
                    m_Exclude.Add("doughier", "doughy");
                    m_Exclude.Add("doughiest", "doughy");
                    m_Exclude.Add("doughtier", "doughty");
                    m_Exclude.Add("doughtiest", "doughty");
                    m_Exclude.Add("dowdier", "dowdy");
                    m_Exclude.Add("dowdiest", "dowdy");
                    m_Exclude.Add("dowier", "dowie");
                    m_Exclude.Add("dowiest", "dowie");
                    m_Exclude.Add("downier", "downy");
                    m_Exclude.Add("downiest", "downy");
                    m_Exclude.Add("dozier", "dozy");
                    m_Exclude.Add("doziest", "dozy");
                    m_Exclude.Add("drabber", "drab");
                    m_Exclude.Add("drabbest", "drab");
                    m_Exclude.Add("draftier", "drafty");
                    m_Exclude.Add("draftiest", "drafty");
                    m_Exclude.Add("draggier", "draggy");
                    m_Exclude.Add("draggiest", "draggy");
                    m_Exclude.Add("draughtier", "draughty");
                    m_Exclude.Add("draughtiest", "draughty");
                    m_Exclude.Add("dreamier", "dreamy");
                    m_Exclude.Add("dreamiest", "dreamy");
                    m_Exclude.Add("drearier", "dreary");
                    m_Exclude.Add("dreariest", "dreary");
                    m_Exclude.Add("dreggier", "dreggy");
                    m_Exclude.Add("dreggiest", "dreggy");
                    m_Exclude.Add("dressier", "dressy");
                    m_Exclude.Add("dressiest", "dressy");
                    m_Exclude.Add("drier", "dry");
                    m_Exclude.Add("driest", "dry");
                    m_Exclude.Add("drippier", "drippy");
                    m_Exclude.Add("drippiest", "drippy");
                    m_Exclude.Add("drowsier", "drowsy");
                    m_Exclude.Add("drowsiest", "drowsy");
                    m_Exclude.Add("dryer", "dry");
                    m_Exclude.Add("dryest", "dry");
                    m_Exclude.Add("dumpier", "dumpy");
                    m_Exclude.Add("dumpiest", "dumpy");
                    m_Exclude.Add("dunner", "dun");
                    m_Exclude.Add("dunnest", "dun");
                    m_Exclude.Add("duskier", "dusky");
                    m_Exclude.Add("duskiest", "dusky");
                    m_Exclude.Add("dustier", "dusty");
                    m_Exclude.Add("dustiest", "dusty");
                    m_Exclude.Add("earlier", "early");
                    m_Exclude.Add("earliest", "early");
                    m_Exclude.Add("earthier", "earthy");
                    m_Exclude.Add("earthiest", "earthy");
                    m_Exclude.Add("earthlier", "earthly");
                    m_Exclude.Add("earthliest", "earthly");
                    m_Exclude.Add("easier", "easy");
                    m_Exclude.Add("easiest", "easy");
                    m_Exclude.Add("edgier", "edgy");
                    m_Exclude.Add("edgiest", "edgy");
                    m_Exclude.Add("eerier", "eerie");
                    m_Exclude.Add("eeriest", "eerie");
                    m_Exclude.Add("emptier", "empty");
                    m_Exclude.Add("emptiest", "empty");
                    m_Exclude.Add("fancier", "fancy");
                    m_Exclude.Add("fanciest", "fancy");
                    m_Exclude.Add("fatter", "fat");
                    m_Exclude.Add("fattest", "fat");
                    m_Exclude.Add("fattier", "fatty");
                    m_Exclude.Add("fattiest", "fatty");
                    m_Exclude.Add("faultier", "faulty");
                    m_Exclude.Add("faultiest", "faulty");
                    m_Exclude.Add("feistier", "feisty");
                    m_Exclude.Add("feistiest", "feisty");
                    m_Exclude.Add("fiddlier", "fiddly");
                    m_Exclude.Add("fiddliest", "fiddly");
                    m_Exclude.Add("filmier", "filmy");
                    m_Exclude.Add("filmiest", "filmy");
                    m_Exclude.Add("filthier", "filthy");
                    m_Exclude.Add("filthiest", "filthy");
                    m_Exclude.Add("finnier", "finny");
                    m_Exclude.Add("finniest", "finny");
                    m_Exclude.Add("fishier", "fishy");
                    m_Exclude.Add("fishiest", "fishy");
                    m_Exclude.Add("fitter", "fit");
                    m_Exclude.Add("fittest", "fit");
                    m_Exclude.Add("flabbier", "flabby");
                    m_Exclude.Add("flabbiest", "flabby");
                    m_Exclude.Add("flaggier", "flaggy");
                    m_Exclude.Add("flaggiest", "flaggy");
                    m_Exclude.Add("flakier", "flaky");
                    m_Exclude.Add("flakiest", "flaky");
                    m_Exclude.Add("flashier", "flashy");
                    m_Exclude.Add("flashiest", "flashy");
                    m_Exclude.Add("flatter", "flat");
                    m_Exclude.Add("flattest", "flat");
                    m_Exclude.Add("flauntier", "flaunty");
                    m_Exclude.Add("flauntiest", "flaunty");
                    m_Exclude.Add("fledgier", "fledgy");
                    m_Exclude.Add("fledgiest", "fledgy");
                    m_Exclude.Add("fleecier", "fleecy");
                    m_Exclude.Add("fleeciest", "fleecy");
                    m_Exclude.Add("fleshier", "fleshy");
                    m_Exclude.Add("fleshiest", "fleshy");
                    m_Exclude.Add("fleshlier", "fleshly");
                    m_Exclude.Add("fleshliest", "fleshly");
                    m_Exclude.Add("flightier", "flighty");
                    m_Exclude.Add("flightiest", "flighty");
                    m_Exclude.Add("flimsier", "flimsy");
                    m_Exclude.Add("flimsiest", "flimsy");
                    m_Exclude.Add("flintier", "flinty");
                    m_Exclude.Add("flintiest", "flinty");
                    m_Exclude.Add("floatier", "floaty");
                    m_Exclude.Add("floatiest", "floaty");
                    m_Exclude.Add("floppier", "floppy");
                    m_Exclude.Add("floppiest", "floppy");
                    m_Exclude.Add("flossier", "flossy");
                    m_Exclude.Add("flossiest", "flossy");
                    m_Exclude.Add("fluffier", "fluffy");
                    m_Exclude.Add("fluffiest", "fluffy");
                    m_Exclude.Add("flukier", "fluky");
                    m_Exclude.Add("flukiest", "fluky");
                    m_Exclude.Add("foamier", "foamy");
                    m_Exclude.Add("foamiest", "foamy");
                    m_Exclude.Add("foggier", "foggy");
                    m_Exclude.Add("foggiest", "foggy");
                    m_Exclude.Add("folksier", "folksy");
                    m_Exclude.Add("folksiest", "folksy");
                    m_Exclude.Add("foolhardier", "foolhardy");
                    m_Exclude.Add("foolhardiest", "foolhardy");
                    m_Exclude.Add("foxier", "foxy");
                    m_Exclude.Add("foxiest", "foxy");
                    m_Exclude.Add("fratchier", "fratchy");
                    m_Exclude.Add("fratchiest", "fratchy");
                    m_Exclude.Add("freakier", "freaky");
                    m_Exclude.Add("freakiest", "freaky");
                    m_Exclude.Add("freer", "free");
                    m_Exclude.Add("freest", "free");
                    m_Exclude.Add("frenchier", "frenchy");
                    m_Exclude.Add("frenchiest", "frenchy");
                    m_Exclude.Add("friendlier", "friendly");
                    m_Exclude.Add("friendliest", "friendly");
                    m_Exclude.Add("friskier", "frisky");
                    m_Exclude.Add("friskiest", "frisky");
                    m_Exclude.Add("frizzier", "frizzy");
                    m_Exclude.Add("frizziest", "frizzy");
                    m_Exclude.Add("frizzlier", "frizzly");
                    m_Exclude.Add("frizzliest", "frizzly");
                    m_Exclude.Add("frostier", "frosty");
                    m_Exclude.Add("frostiest", "frosty");
                    m_Exclude.Add("frouzier", "frouzy");
                    m_Exclude.Add("frouziest", "frouzy");
                    m_Exclude.Add("frowsier", "frowsy");
                    m_Exclude.Add("frowsiest", "frowsy");
                    m_Exclude.Add("frowzier", "frowzy");
                    m_Exclude.Add("frowziest", "frowzy");
                    m_Exclude.Add("fruitier", "fruity");
                    m_Exclude.Add("fruitiest", "fruity");
                    m_Exclude.Add("funkier", "funky");
                    m_Exclude.Add("funkiest", "funky");
                    m_Exclude.Add("funnier", "funny");
                    m_Exclude.Add("funniest", "funny");
                    m_Exclude.Add("furrier", "furry");
                    m_Exclude.Add("furriest", "furry");
                    m_Exclude.Add("fussier", "fussy");
                    m_Exclude.Add("fussiest", "fussy");
                    m_Exclude.Add("fustier", "fusty");
                    m_Exclude.Add("fustiest", "fusty");
                    m_Exclude.Add("fuzzier", "fuzzy");
                    m_Exclude.Add("fuzziest", "fuzzy");
                    m_Exclude.Add("gabbier", "gabby");
                    m_Exclude.Add("gabbiest", "gabby");
                    m_Exclude.Add("gamier", "gamy");
                    m_Exclude.Add("gamiest", "gamy");
                    m_Exclude.Add("gammier", "gammy");
                    m_Exclude.Add("gammiest", "gammy");
                    m_Exclude.Add("gassier", "gassy");
                    m_Exclude.Add("gassiest", "gassy");
                    m_Exclude.Add("gaudier", "gaudy");
                    m_Exclude.Add("gaudiest", "gaudy");
                    m_Exclude.Add("gauzier", "gauzy");
                    m_Exclude.Add("gauziest", "gauzy");
                    m_Exclude.Add("gawkier", "gawky");
                    m_Exclude.Add("gawkiest", "gawky");
                    m_Exclude.Add("ghastlier", "ghastly");
                    m_Exclude.Add("ghastliest", "ghastly");
                    m_Exclude.Add("ghostlier", "ghostly");
                    m_Exclude.Add("ghostliest", "ghostly");
                    m_Exclude.Add("giddier", "giddy");
                    m_Exclude.Add("giddiest", "giddy");
                    m_Exclude.Add("gladder", "glad");
                    m_Exclude.Add("gladdest", "glad");
                    m_Exclude.Add("glassier", "glassy");
                    m_Exclude.Add("glassiest", "glassy");
                    m_Exclude.Add("glibber", "glib");
                    m_Exclude.Add("glibbest", "glib");
                    m_Exclude.Add("gloomier", "gloomy");
                    m_Exclude.Add("gloomiest", "gloomy");
                    m_Exclude.Add("glossier", "glossy");
                    m_Exclude.Add("glossiest", "glossy");
                    m_Exclude.Add("glummer", "glum");
                    m_Exclude.Add("glummest", "glum");
                    m_Exclude.Add("godlier", "godly");
                    m_Exclude.Add("godliest", "godly");
                    m_Exclude.Add("goodlier", "goodly");
                    m_Exclude.Add("goodliest", "goodly");
                    m_Exclude.Add("goofier", "goofy");
                    m_Exclude.Add("goofiest", "goofy");
                    m_Exclude.Add("gooier", "gooey");
                    m_Exclude.Add("gooiest", "gooey");
                    m_Exclude.Add("goosier", "goosy");
                    m_Exclude.Add("goosiest", "goosy");
                    m_Exclude.Add("gorier", "gory");
                    m_Exclude.Add("goriest", "gory");
                    m_Exclude.Add("gradelier", "gradely");
                    m_Exclude.Add("gradeliest", "gradely");
                    m_Exclude.Add("grainier", "grainy");
                    m_Exclude.Add("grainiest", "grainy");
                    m_Exclude.Add("grassier", "grassy");
                    m_Exclude.Add("grassiest", "grassy");
                    m_Exclude.Add("greasier", "greasy");
                    m_Exclude.Add("greasiest", "greasy");
                    m_Exclude.Add("greedier", "greedy");
                    m_Exclude.Add("greediest", "greedy");
                    m_Exclude.Add("grimmer", "grim");
                    m_Exclude.Add("grimmest", "grim");
                    m_Exclude.Add("grislier", "grisly");
                    m_Exclude.Add("grisliest", "grisly");
                    m_Exclude.Add("grittier", "gritty");
                    m_Exclude.Add("grittiest", "gritty");
                    m_Exclude.Add("grizzlier", "grizzly");
                    m_Exclude.Add("grizzliest", "grizzly");
                    m_Exclude.Add("groggier", "groggy");
                    m_Exclude.Add("groggiest", "groggy");
                    m_Exclude.Add("groovier", "groovy");
                    m_Exclude.Add("grooviest", "groovy");
                    m_Exclude.Add("grottier", "grotty");
                    m_Exclude.Add("grottiest", "grotty");
                    m_Exclude.Add("groutier", "grouty");
                    m_Exclude.Add("groutiest", "grouty");
                    m_Exclude.Add("grubbier", "grubby");
                    m_Exclude.Add("grubbiest", "grubby");
                    m_Exclude.Add("grumpier", "grumpy");
                    m_Exclude.Add("grumpiest", "grumpy");
                    m_Exclude.Add("guiltier", "guilty");
                    m_Exclude.Add("guiltiest", "guilty");
                    m_Exclude.Add("gummier", "gummy");
                    m_Exclude.Add("gummiest", "gummy");
                    m_Exclude.Add("gushier", "gushy");
                    m_Exclude.Add("gushiest", "gushy");
                    m_Exclude.Add("gustier", "gusty");
                    m_Exclude.Add("gustiest", "gusty");
                    m_Exclude.Add("gutsier", "gutsy");
                    m_Exclude.Add("gutsiest", "gutsy");
                    m_Exclude.Add("hairier", "hairy");
                    m_Exclude.Add("hairiest", "hairy");
                    m_Exclude.Add("halfways", "halfway");
                    m_Exclude.Add("hammier", "hammy");
                    m_Exclude.Add("hammiest", "hammy");
                    m_Exclude.Add("handier", "handy");
                    m_Exclude.Add("handiest", "handy");
                    m_Exclude.Add("happier", "happy");
                    m_Exclude.Add("happiest", "happy");
                    m_Exclude.Add("hardier", "hardy");
                    m_Exclude.Add("hardiest", "hardy");
                    m_Exclude.Add("hastier", "hasty");
                    m_Exclude.Add("hastiest", "hasty");
                    m_Exclude.Add("haughtier", "haughty");
                    m_Exclude.Add("haughtiest", "haughty");
                    m_Exclude.Add("hazier", "hazy");
                    m_Exclude.Add("haziest", "hazy");
                    m_Exclude.Add("headier", "heady");
                    m_Exclude.Add("headiest", "heady");
                    m_Exclude.Add("healthier", "healthy");
                    m_Exclude.Add("healthiest", "healthy");
                    m_Exclude.Add("heartier", "hearty");
                    m_Exclude.Add("heartiest", "hearty");
                    m_Exclude.Add("heavier", "heavy");
                    m_Exclude.Add("heaviest", "heavy");
                    m_Exclude.Add("heftier", "hefty");
                    m_Exclude.Add("heftiest", "hefty");
                    m_Exclude.Add("hepper", "hep");
                    m_Exclude.Add("heppest", "hep");
                    m_Exclude.Add("herbier", "herby");
                    m_Exclude.Add("herbiest", "herby");
                    m_Exclude.Add("hinder", "hind");
                    m_Exclude.Add("hipper", "hip");
                    m_Exclude.Add("hippest", "hip");
                    m_Exclude.Add("hippier", "hippy");
                    m_Exclude.Add("hippiest", "hippy");
                    m_Exclude.Add("hoarier", "hoary");
                    m_Exclude.Add("hoariest", "hoary");
                    m_Exclude.Add("holier", "holy");
                    m_Exclude.Add("holiest", "holy");
                    m_Exclude.Add("homelier", "homely");
                    m_Exclude.Add("homeliest", "homely");
                    m_Exclude.Add("homier", "homey");
                    m_Exclude.Add("homiest", "homey");
                    m_Exclude.Add("hornier", "horny");
                    m_Exclude.Add("horniest", "horny");
                    m_Exclude.Add("horsier", "horsy");
                    m_Exclude.Add("horsiest", "horsy");
                    m_Exclude.Add("hotter", "hot");
                    m_Exclude.Add("hottest", "hot");
                    m_Exclude.Add("humpier", "humpy");
                    m_Exclude.Add("humpiest", "humpy");
                    m_Exclude.Add("hungrier", "hungry");
                    m_Exclude.Add("hungriest", "hungry");
                    m_Exclude.Add("huskier", "husky");
                    m_Exclude.Add("huskiest", "husky");
                    m_Exclude.Add("icier", "icy");
                    m_Exclude.Add("iciest", "icy");
                    m_Exclude.Add("inkier", "inky");
                    m_Exclude.Add("inkiest", "inky");
                    m_Exclude.Add("jaggier", "jaggy");
                    m_Exclude.Add("jaggiest", "jaggy");
                    m_Exclude.Add("jammier", "jammy");
                    m_Exclude.Add("jammiest", "jammy");
                    m_Exclude.Add("jauntier", "jaunty");
                    m_Exclude.Add("jauntiest", "jaunty");
                    m_Exclude.Add("jazzier", "jazzy");
                    m_Exclude.Add("jazziest", "jazzy");
                    m_Exclude.Add("jerkier", "jerky");
                    m_Exclude.Add("jerkiest", "jerky");
                    m_Exclude.Add("jollier", "jolly");
                    m_Exclude.Add("jolliest", "jolly");
                    m_Exclude.Add("juicier", "juicy");
                    m_Exclude.Add("juiciest", "juicy");
                    m_Exclude.Add("jumpier", "jumpy");
                    m_Exclude.Add("jumpiest", "jumpy");
                    m_Exclude.Add("kindlier", "kindly");
                    m_Exclude.Add("kindliest", "kindly");
                    m_Exclude.Add("kinkier", "kinky");
                    m_Exclude.Add("kinkiest", "kinky");
                    m_Exclude.Add("knottier", "knotty");
                    m_Exclude.Add("knottiest", "knotty");
                    m_Exclude.Add("knurlier", "knurly");
                    m_Exclude.Add("knurliest", "knurly");
                    m_Exclude.Add("kookier", "kooky");
                    m_Exclude.Add("kookiest", "kooky");
                    m_Exclude.Add("lacier", "lacy");
                    m_Exclude.Add("laciest", "lacy");
                    m_Exclude.Add("lairier", "lairy");
                    m_Exclude.Add("lairiest", "lairy");
                    m_Exclude.Add("lakier", "laky");
                    m_Exclude.Add("lakiest", "laky");
                    m_Exclude.Add("lankier", "lanky");
                    m_Exclude.Add("lankiest", "lanky");
                    m_Exclude.Add("lathier", "lathy");
                    m_Exclude.Add("lathiest", "lathy");
                    m_Exclude.Add("lazier", "lazy");
                    m_Exclude.Add("laziest", "lazy");
                    m_Exclude.Add("leafier", "leafy");
                    m_Exclude.Add("leafiest", "leafy");
                    m_Exclude.Add("leakier", "leaky");
                    m_Exclude.Add("leakiest", "leaky");
                    m_Exclude.Add("learier", "leary");
                    m_Exclude.Add("leariest", "leary");
                    m_Exclude.Add("leerier", "leery");
                    m_Exclude.Add("leeriest", "leery");
                    m_Exclude.Add("leggier", "leggy");
                    m_Exclude.Add("leggiest", "leggy");
                    m_Exclude.Add("lengthier", "lengthy");
                    m_Exclude.Add("lengthiest", "lengthy");
                    m_Exclude.Add("limier", "limy");
                    m_Exclude.Add("limiest", "limy");
                    m_Exclude.Add("lippier", "lippy");
                    m_Exclude.Add("lippiest", "lippy");
                    m_Exclude.Add("livelier", "lively");
                    m_Exclude.Add("liveliest", "lively");
                    m_Exclude.Add("loftier", "lofty");
                    m_Exclude.Add("loftiest", "lofty");
                    m_Exclude.Add("logier", "logy");
                    m_Exclude.Add("logiest", "logy");
                    m_Exclude.Add("lonelier", "lonely");
                    m_Exclude.Add("loneliest", "lonely");
                    m_Exclude.Add("loonier", "loony");
                    m_Exclude.Add("looniest", "loony");
                    m_Exclude.Add("loopier", "loopy");
                    m_Exclude.Add("loopiest", "loopy");
                    m_Exclude.Add("lordlier", "lordly");
                    m_Exclude.Add("lordliest", "lordly");
                    m_Exclude.Add("lousier", "lousy");
                    m_Exclude.Add("lousiest", "lousy");
                    m_Exclude.Add("lovelier", "lovely");
                    m_Exclude.Add("loveliest", "lovely");
                    m_Exclude.Add("lowlier", "lowly");
                    m_Exclude.Add("lowliest", "lowly");
                    m_Exclude.Add("luckier", "lucky");
                    m_Exclude.Add("luckiest", "lucky");
                    m_Exclude.Add("lumpier", "lumpy");
                    m_Exclude.Add("lumpiest", "lumpy");
                    m_Exclude.Add("lunier", "luny");
                    m_Exclude.Add("luniest", "luny");
                    m_Exclude.Add("lustier", "lusty");
                    m_Exclude.Add("lustiest", "lusty");
                    m_Exclude.Add("madder", "mad");
                    m_Exclude.Add("maddest", "mad");
                    m_Exclude.Add("maltier", "malty");
                    m_Exclude.Add("maltiest", "malty");
                    m_Exclude.Add("mangier", "mangy");
                    m_Exclude.Add("mangiest", "mangy");
                    m_Exclude.Add("mankier", "manky");
                    m_Exclude.Add("mankiest", "manky");
                    m_Exclude.Add("manlier", "manly");
                    m_Exclude.Add("manliest", "manly");
                    m_Exclude.Add("marshier", "marshy");
                    m_Exclude.Add("marshiest", "marshy");
                    m_Exclude.Add("massier", "massy");
                    m_Exclude.Add("massiest", "massy");
                    m_Exclude.Add("maungier", "maungy");
                    m_Exclude.Add("maungiest", "maungy");
                    m_Exclude.Add("mazier", "mazy");
                    m_Exclude.Add("maziest", "mazy");
                    m_Exclude.Add("mealier", "mealy");
                    m_Exclude.Add("mealiest", "mealy");
                    m_Exclude.Add("measlier", "measly");
                    m_Exclude.Add("measliest", "measly");
                    m_Exclude.Add("meatier", "meaty");
                    m_Exclude.Add("meatiest", "meaty");
                    m_Exclude.Add("merrier", "merry");
                    m_Exclude.Add("merriest", "merry");
                    m_Exclude.Add("messier", "messy");
                    m_Exclude.Add("messiest", "messy");
                    m_Exclude.Add("miffier", "miffy");
                    m_Exclude.Add("miffiest", "miffy");
                    m_Exclude.Add("mightier", "mighty");
                    m_Exclude.Add("mightiest", "mighty");
                    m_Exclude.Add("milkier", "milky");
                    m_Exclude.Add("milkiest", "milky");
                    m_Exclude.Add("mingier", "mingy");
                    m_Exclude.Add("mingiest", "mingy");
                    m_Exclude.Add("mirkier", "mirky");
                    m_Exclude.Add("mirkiest", "mirky");
                    m_Exclude.Add("mistier", "misty");
                    m_Exclude.Add("mistiest", "misty");
                    m_Exclude.Add("moldier", "moldy");
                    m_Exclude.Add("moldiest", "moldy");
                    m_Exclude.Add("moodier", "moody");
                    m_Exclude.Add("moodiest", "moody");
                    m_Exclude.Add("moonier", "moony");
                    m_Exclude.Add("mooniest", "moony");
                    m_Exclude.Add("mothier", "mothy");
                    m_Exclude.Add("mothiest", "mothy");
                    m_Exclude.Add("mouldier", "mouldy");
                    m_Exclude.Add("mouldiest", "mouldy");
                    m_Exclude.Add("mousier", "mousy");
                    m_Exclude.Add("mousiest", "mousy");
                    m_Exclude.Add("mouthier", "mouthy");
                    m_Exclude.Add("mouthiest", "mouthy");
                    m_Exclude.Add("muckier", "mucky");
                    m_Exclude.Add("muckiest", "mucky");
                    m_Exclude.Add("muddier", "muddy");
                    m_Exclude.Add("muddiest", "muddy");
                    m_Exclude.Add("muggier", "muggy");
                    m_Exclude.Add("muggiest", "muggy");
                    m_Exclude.Add("murkier", "murky");
                    m_Exclude.Add("murkiest", "murky");
                    m_Exclude.Add("mushier", "mushy");
                    m_Exclude.Add("mushiest", "mushy");
                    m_Exclude.Add("muskier", "musky");
                    m_Exclude.Add("muskiest", "musky");
                    m_Exclude.Add("mustier", "musty");
                    m_Exclude.Add("mustiest", "musty");
                    m_Exclude.Add("muzzier", "muzzy");
                    m_Exclude.Add("muzziest", "muzzy");
                    m_Exclude.Add("nappier", "nappy");
                    m_Exclude.Add("nappiest", "nappy");
                    m_Exclude.Add("nastier", "nasty");
                    m_Exclude.Add("nastiest", "nasty");
                    m_Exclude.Add("nattier", "natty");
                    m_Exclude.Add("nattiest", "natty");
                    m_Exclude.Add("naughtier", "naughty");
                    m_Exclude.Add("naughtiest", "naughty");
                    m_Exclude.Add("needier", "needy");
                    m_Exclude.Add("neediest", "needy");
                    m_Exclude.Add("nervier", "nervy");
                    m_Exclude.Add("nerviest", "nervy");
                    m_Exclude.Add("newsier", "newsy");
                    m_Exclude.Add("newsiest", "newsy");
                    m_Exclude.Add("niftier", "nifty");
                    m_Exclude.Add("niftiest", "nifty");
                    m_Exclude.Add("nippier", "nippy");
                    m_Exclude.Add("nippiest", "nippy");
                    m_Exclude.Add("nittier", "nitty");
                    m_Exclude.Add("nittiest", "nitty");
                    m_Exclude.Add("noisier", "noisy");
                    m_Exclude.Add("noisiest", "noisy");
                    m_Exclude.Add("nosier", "nosy");
                    m_Exclude.Add("nosiest", "nosy");
                    m_Exclude.Add("nuttier", "nutty");
                    m_Exclude.Add("nuttiest", "nutty");
                    m_Exclude.Add("offer", "off");
                    m_Exclude.Add("oilier", "oily");
                    m_Exclude.Add("oiliest", "oily");
                    m_Exclude.Add("oozier", "oozy");
                    m_Exclude.Add("ooziest", "oozy");
                    m_Exclude.Add("pallier", "pally");
                    m_Exclude.Add("palliest", "pally");
                    m_Exclude.Add("palmier", "palmy");
                    m_Exclude.Add("palmiest", "palmy");
                    m_Exclude.Add("paltrier", "paltry");
                    m_Exclude.Add("paltriest", "paltry");
                    m_Exclude.Add("pappier", "pappy");
                    m_Exclude.Add("pappiest", "pappy");
                    m_Exclude.Add("parkier", "parky");
                    m_Exclude.Add("parkiest", "parky");
                    m_Exclude.Add("pastier", "pasty");
                    m_Exclude.Add("pastiest", "pasty");
                    m_Exclude.Add("patchier", "patchy");
                    m_Exclude.Add("patchiest", "patchy");
                    m_Exclude.Add("pawkier", "pawky");
                    m_Exclude.Add("pawkiest", "pawky");
                    m_Exclude.Add("peachier", "peachy");
                    m_Exclude.Add("peachiest", "peachy");
                    m_Exclude.Add("pearlier", "pearly");
                    m_Exclude.Add("pearliest", "pearly");
                    m_Exclude.Add("peppier", "peppy");
                    m_Exclude.Add("peppiest", "peppy");
                    m_Exclude.Add("perkier", "perky");
                    m_Exclude.Add("perkiest", "perky");
                    m_Exclude.Add("peskier", "pesky");
                    m_Exclude.Add("peskiest", "pesky");
                    m_Exclude.Add("pettier", "petty");
                    m_Exclude.Add("pettiest", "petty");
                    m_Exclude.Add("phonier", "phony");
                    m_Exclude.Add("phoniest", "phony");
                    m_Exclude.Add("pickier", "picky");
                    m_Exclude.Add("pickiest", "picky");
                    m_Exclude.Add("piggier", "piggy");
                    m_Exclude.Add("piggiest", "piggy");
                    m_Exclude.Add("pinier", "piny");
                    m_Exclude.Add("piniest", "piny");
                    m_Exclude.Add("pitchier", "pitchy");
                    m_Exclude.Add("pitchiest", "pitchy");
                    m_Exclude.Add("pithier", "pithy");
                    m_Exclude.Add("pithiest", "pithy");
                    m_Exclude.Add("plashier", "plashy");
                    m_Exclude.Add("plashiest", "plashy");
                    m_Exclude.Add("platier", "platy");
                    m_Exclude.Add("platiest", "platy");
                    m_Exclude.Add("pluckier", "plucky");
                    m_Exclude.Add("pluckiest", "plucky");
                    m_Exclude.Add("plumier", "plumy");
                    m_Exclude.Add("plumiest", "plumy");
                    m_Exclude.Add("plummier", "plummy");
                    m_Exclude.Add("plummiest", "plummy");
                    m_Exclude.Add("podgier", "podgy");
                    m_Exclude.Add("podgiest", "podgy");
                    m_Exclude.Add("pokier", "poky");
                    m_Exclude.Add("pokiest", "poky");
                    m_Exclude.Add("porkier", "porky");
                    m_Exclude.Add("porkiest", "porky");
                    m_Exclude.Add("portlier", "portly");
                    m_Exclude.Add("portliest", "portly");
                    m_Exclude.Add("pottier", "potty");
                    m_Exclude.Add("pottiest", "potty");
                    m_Exclude.Add("preachier", "preachy");
                    m_Exclude.Add("preachiest", "preachy");
                    m_Exclude.Add("prettier", "pretty");
                    m_Exclude.Add("prettiest", "pretty");
                    m_Exclude.Add("pricier", "pricy");
                    m_Exclude.Add("priciest", "pricy");
                    m_Exclude.Add("pricklier", "prickly");
                    m_Exclude.Add("prickliest", "prickly");
                    m_Exclude.Add("priestlier", "priestly");
                    m_Exclude.Add("priestliest", "priestly");
                    m_Exclude.Add("primmer", "prim");
                    m_Exclude.Add("primmest", "prim");
                    m_Exclude.Add("princelier", "princely");
                    m_Exclude.Add("princeliest", "princely");
                    m_Exclude.Add("prissier", "prissy");
                    m_Exclude.Add("prissiest", "prissy");
                    m_Exclude.Add("privier", "privy");
                    m_Exclude.Add("priviest", "privy");
                    m_Exclude.Add("prosier", "prosy");
                    m_Exclude.Add("prosiest", "prosy");
                    m_Exclude.Add("pudgier", "pudgy");
                    m_Exclude.Add("pudgiest", "pudgy");
                    m_Exclude.Add("puffier", "puffy");
                    m_Exclude.Add("puffiest", "puffy");
                    m_Exclude.Add("pulpier", "pulpy");
                    m_Exclude.Add("pulpiest", "pulpy");
                    m_Exclude.Add("punchier", "punchy");
                    m_Exclude.Add("punchiest", "punchy");
                    m_Exclude.Add("punier", "puny");
                    m_Exclude.Add("puniest", "puny");
                    m_Exclude.Add("pushier", "pushy");
                    m_Exclude.Add("pushiest", "pushy");
                    m_Exclude.Add("pussier", "pussy");
                    m_Exclude.Add("pussiest", "pussy");
                    m_Exclude.Add("quaggier", "quaggy");
                    m_Exclude.Add("quaggiest", "quaggy");
                    m_Exclude.Add("quakier", "quaky");
                    m_Exclude.Add("quakiest", "quaky");
                    m_Exclude.Add("queasier", "queasy");
                    m_Exclude.Add("queasiest", "queasy");
                    m_Exclude.Add("queenlier", "queenly");
                    m_Exclude.Add("queenliest", "queenly");
                    m_Exclude.Add("racier", "racy");
                    m_Exclude.Add("raciest", "racy");
                    m_Exclude.Add("rainier", "rainy");
                    m_Exclude.Add("rainiest", "rainy");
                    m_Exclude.Add("randier", "randy");
                    m_Exclude.Add("randiest", "randy");
                    m_Exclude.Add("rangier", "rangy");
                    m_Exclude.Add("rangiest", "rangy");
                    m_Exclude.Add("rattier", "ratty");
                    m_Exclude.Add("rattiest", "ratty");
                    m_Exclude.Add("rattlier", "rattly");
                    m_Exclude.Add("rattliest", "rattly");
                    m_Exclude.Add("raunchier", "raunchy");
                    m_Exclude.Add("raunchiest", "raunchy");
                    m_Exclude.Add("readier", "ready");
                    m_Exclude.Add("readiest", "ready");
                    m_Exclude.Add("redder", "red");
                    m_Exclude.Add("reddest", "red");
                    m_Exclude.Add("reedier", "reedy");
                    m_Exclude.Add("reediest", "reedy");
                    m_Exclude.Add("rimier", "rimy");
                    m_Exclude.Add("rimiest", "rimy");
                    m_Exclude.Add("riskier", "risky");
                    m_Exclude.Add("riskiest", "risky");
                    m_Exclude.Add("ritzier", "ritzy");
                    m_Exclude.Add("ritziest", "ritzy");
                    m_Exclude.Add("rockier", "rocky");
                    m_Exclude.Add("rockiest", "rocky");
                    m_Exclude.Add("roilier", "roily");
                    m_Exclude.Add("roiliest", "roily");
                    m_Exclude.Add("rookier", "rooky");
                    m_Exclude.Add("rookiest", "rooky");
                    m_Exclude.Add("roomier", "roomy");
                    m_Exclude.Add("roomiest", "roomy");
                    m_Exclude.Add("ropier", "ropy");
                    m_Exclude.Add("ropiest", "ropy");
                    m_Exclude.Add("rosier", "rosy");
                    m_Exclude.Add("rosiest", "rosy");
                    m_Exclude.Add("rowdier", "rowdy");
                    m_Exclude.Add("rowdiest", "rowdy");
                    m_Exclude.Add("ruddier", "ruddy");
                    m_Exclude.Add("ruddiest", "ruddy");
                    m_Exclude.Add("runnier", "runny");
                    m_Exclude.Add("runniest", "runny");
                    m_Exclude.Add("rushier", "rushy");
                    m_Exclude.Add("rushiest", "rushy");

                    m_Exclude.Add("rustier", "rusty");
                    m_Exclude.Add("rustiest", "rusty");
                    m_Exclude.Add("ruttier", "rutty");
                    m_Exclude.Add("ruttiest", "rutty");
                    m_Exclude.Add("sadder", "sad");
                    m_Exclude.Add("saddest", "sad");
                    m_Exclude.Add("saltier", "salty");
                    m_Exclude.Add("saltiest", "salty");
                    m_Exclude.Add("sandier", "sandy");
                    m_Exclude.Add("sandiest", "sandy");
                    m_Exclude.Add("sappier", "sappy");
                    m_Exclude.Add("sappiest", "sappy");
                    m_Exclude.Add("sassier", "sassy");
                    m_Exclude.Add("sassiest", "sassy");
                    m_Exclude.Add("saucier", "saucy");
                    m_Exclude.Add("sauciest", "saucy");
                    m_Exclude.Add("savvier", "savvy");
                    m_Exclude.Add("savviest", "savvy");
                    m_Exclude.Add("scabbier", "scabby");
                    m_Exclude.Add("scabbiest", "scabby");
                    m_Exclude.Add("scalier", "scaly");
                    m_Exclude.Add("scaliest", "scaly");
                    m_Exclude.Add("scantier", "scanty");
                    m_Exclude.Add("scantiest", "scanty");
                    m_Exclude.Add("scarier", "scary");
                    m_Exclude.Add("scariest", "scary");
                    m_Exclude.Add("scraggier", "scraggy");
                    m_Exclude.Add("scraggiest", "scraggy");
                    m_Exclude.Add("scragglier", "scraggly");
                    m_Exclude.Add("scraggliest", "scraggly");
                    m_Exclude.Add("scrappier", "scrappy");
                    m_Exclude.Add("scrappiest", "scrappy");
                    m_Exclude.Add("scrawnier", "scrawny");
                    m_Exclude.Add("scrawniest", "scrawny");
                    m_Exclude.Add("screwier", "screwy");
                    m_Exclude.Add("screwiest", "screwy");
                    m_Exclude.Add("scrubbier", "scrubby");
                    m_Exclude.Add("scrubbiest", "scrubby");
                    m_Exclude.Add("scruffier", "scruffy");
                    m_Exclude.Add("scruffiest", "scruffy");
                    m_Exclude.Add("scungier", "scungy");
                    m_Exclude.Add("scungiest", "scungy");
                    m_Exclude.Add("scurvier", "scurvy");
                    m_Exclude.Add("scurviest", "scurvy");
                    m_Exclude.Add("seamier", "seamy");
                    m_Exclude.Add("seamiest", "seamy");
                    m_Exclude.Add("seedier", "seedy");
                    m_Exclude.Add("seediest", "seedy");
                    m_Exclude.Add("seemlier", "seemly");
                    m_Exclude.Add("seemliest", "seemly");
                    m_Exclude.Add("sexier", "sexy");
                    m_Exclude.Add("sexiest", "sexy");
                    m_Exclude.Add("shabbier", "shabby");
                    m_Exclude.Add("shabbiest", "shabby");
                    m_Exclude.Add("shadier", "shady");
                    m_Exclude.Add("shadiest", "shady");
                    m_Exclude.Add("shaggier", "shaggy");
                    m_Exclude.Add("shaggiest", "shaggy");
                    m_Exclude.Add("shakier", "shaky");
                    m_Exclude.Add("shakiest", "shaky");
                    m_Exclude.Add("shapelier", "shapely");
                    m_Exclude.Add("shapeliest", "shapely");
                    m_Exclude.Add("shier", "shy");
                    m_Exclude.Add("shiest", "shy");
                    m_Exclude.Add("shiftier", "shifty");
                    m_Exclude.Add("shiftiest", "shifty");
                    m_Exclude.Add("shinier", "shiny");
                    m_Exclude.Add("shiniest", "shiny");
                    m_Exclude.Add("shirtier", "shirty");
                    m_Exclude.Add("shirtiest", "shirty");
                    m_Exclude.Add("shoddier", "shoddy");
                    m_Exclude.Add("shoddiest", "shoddy");
                    m_Exclude.Add("showier", "showy");
                    m_Exclude.Add("showiest", "showy");
                    m_Exclude.Add("shrubbier", "shrubby");
                    m_Exclude.Add("shrubbiest", "shrubby");
                    m_Exclude.Add("shyer", "shy");
                    m_Exclude.Add("shyest", "shy");
                    m_Exclude.Add("sicklier", "sickly");
                    m_Exclude.Add("sickliest", "sickly");
                    m_Exclude.Add("sightlier", "sightly");
                    m_Exclude.Add("sightliest", "sightly");
                    m_Exclude.Add("silkier", "silky");
                    m_Exclude.Add("silkiest", "silky");
                    m_Exclude.Add("sillier", "silly");
                    m_Exclude.Add("silliest", "silly");
                    m_Exclude.Add("sketchier", "sketchy");
                    m_Exclude.Add("sketchiest", "sketchy");
                    m_Exclude.Add("skimpier", "skimpy");
                    m_Exclude.Add("skimpiest", "skimpy");
                    m_Exclude.Add("skinnier", "skinny");
                    m_Exclude.Add("skinniest", "skinny");
                    m_Exclude.Add("slaphappier", "slaphappy");
                    m_Exclude.Add("slaphappiest", "slaphappy");
                    m_Exclude.Add("slatier", "slaty");
                    m_Exclude.Add("slatiest", "slaty");
                    m_Exclude.Add("sleazier", "sleazy");
                    m_Exclude.Add("sleaziest", "sleazy");
                    m_Exclude.Add("sleepier", "sleepy");
                    m_Exclude.Add("sleepiest", "sleepy");
                    m_Exclude.Add("slier", "sly");
                    m_Exclude.Add("sliest", "sly");
                    m_Exclude.Add("slimier", "slimy");
                    m_Exclude.Add("slimiest", "slimy");
                    m_Exclude.Add("slimmer", "slim");
                    m_Exclude.Add("slimmest", "slim");
                    m_Exclude.Add("slimsier", "slimsy");
                    m_Exclude.Add("slimsiest", "slimsy");
                    m_Exclude.Add("slinkier", "slinky");
                    m_Exclude.Add("slinkiest", "slinky");
                    m_Exclude.Add("slippier", "slippy");
                    m_Exclude.Add("slippiest", "slippy");
                    m_Exclude.Add("sloppier", "sloppy");
                    m_Exclude.Add("sloppiest", "sloppy");
                    m_Exclude.Add("slyer", "sly");
                    m_Exclude.Add("slyest", "sly");
                    m_Exclude.Add("smarmier", "smarmy");
                    m_Exclude.Add("smarmiest", "smarmy");
                    m_Exclude.Add("smellier", "smelly");
                    m_Exclude.Add("smelliest", "smelly");
                    m_Exclude.Add("smokier", "smoky");
                    m_Exclude.Add("smokiest", "smoky");
                    m_Exclude.Add("smugger", "smug");
                    m_Exclude.Add("smuggest", "smug");
                    m_Exclude.Add("snakier", "snaky");
                    m_Exclude.Add("snakiest", "snaky");
                    m_Exclude.Add("snappier", "snappy");
                    m_Exclude.Add("snappiest", "snappy");
                    m_Exclude.Add("snatchier", "snatchy");
                    m_Exclude.Add("snatchiest", "snatchy");
                    m_Exclude.Add("snazzier", "snazzy");
                    m_Exclude.Add("snazziest", "snazzy");
                    m_Exclude.Add("sniffier", "sniffy");
                    m_Exclude.Add("sniffiest", "sniffy");
                    m_Exclude.Add("snootier", "snooty");
                    m_Exclude.Add("snootiest", "snooty");
                    m_Exclude.Add("snottier", "snotty");
                    m_Exclude.Add("snottiest", "snotty");
                    m_Exclude.Add("snowier", "snowy");
                    m_Exclude.Add("snowiest", "snowy");
                    m_Exclude.Add("snuffier", "snuffy");
                    m_Exclude.Add("snuffiest", "snuffy");
                    m_Exclude.Add("snugger", "snug");
                    m_Exclude.Add("snuggest", "snug");
                    m_Exclude.Add("soapier", "soapy");
                    m_Exclude.Add("soapiest", "soapy");
                    m_Exclude.Add("soggier", "soggy");
                    m_Exclude.Add("soggiest", "soggy");
                    m_Exclude.Add("sonsier", "sonsy");
                    m_Exclude.Add("sonsiest", "sonsy");
                    m_Exclude.Add("sootier", "sooty");
                    m_Exclude.Add("sootiest", "sooty");
                    m_Exclude.Add("soppier", "soppy");
                    m_Exclude.Add("soppiest", "soppy");
                    m_Exclude.Add("sorrier", "sorry");
                    m_Exclude.Add("sorriest", "sorry");
                    m_Exclude.Add("soupier", "soupy");
                    m_Exclude.Add("soupiest", "soupy");
                    m_Exclude.Add("speedier", "speedy");
                    m_Exclude.Add("speediest", "speedy");
                    m_Exclude.Add("spicier", "spicy");
                    m_Exclude.Add("spiciest", "spicy");
                    m_Exclude.Add("spiffier", "spiffy");
                    m_Exclude.Add("spiffiest", "spiffy");
                    m_Exclude.Add("spikier", "spiky");
                    m_Exclude.Add("spikiest", "spiky");
                    m_Exclude.Add("spindlier", "spindly");
                    m_Exclude.Add("spindliest", "spindly");
                    m_Exclude.Add("spinier", "spiny");
                    m_Exclude.Add("spiniest", "spiny");
                    m_Exclude.Add("splashier", "splashy");
                    m_Exclude.Add("splashiest", "splashy");
                    m_Exclude.Add("spongier", "spongy");
                    m_Exclude.Add("spongiest", "spongy");
                    m_Exclude.Add("spookier", "spooky");
                    m_Exclude.Add("spookiest", "spooky");
                    m_Exclude.Add("spoonier", "spoony");
                    m_Exclude.Add("spooniest", "spoony");
                    m_Exclude.Add("sportier", "sporty");
                    m_Exclude.Add("sportiest", "sporty");
                    m_Exclude.Add("spottier", "spotty");
                    m_Exclude.Add("spottiest", "spotty");
                    m_Exclude.Add("sprier", "spry");
                    m_Exclude.Add("spriest", "spry");
                    m_Exclude.Add("sprightlier", "sprightly");
                    m_Exclude.Add("sprightliest", "sprightly");
                    m_Exclude.Add("springier", "springy");
                    m_Exclude.Add("springiest", "springy");
                    m_Exclude.Add("squashier", "squashy");
                    m_Exclude.Add("squashiest", "squashy");
                    m_Exclude.Add("squatter", "squat");
                    m_Exclude.Add("squattest", "squat");
                    m_Exclude.Add("squattier", "squatty");
                    m_Exclude.Add("squattiest", "squatty");
                    m_Exclude.Add("squiffier", "squiffy");
                    m_Exclude.Add("squiffiest", "squiffy");
                    m_Exclude.Add("stagier", "stagy");
                    m_Exclude.Add("stagiest", "stagy");
                    m_Exclude.Add("stalkier", "stalky");
                    m_Exclude.Add("stalkiest", "stalky");
                    m_Exclude.Add("starchier", "starchy");
                    m_Exclude.Add("starchiest", "starchy");
                    m_Exclude.Add("starrier", "starry");
                    m_Exclude.Add("starriest", "starry");
                    m_Exclude.Add("statelier", "stately");
                    m_Exclude.Add("stateliest", "stately");
                    m_Exclude.Add("steadier", "steady");
                    m_Exclude.Add("steadiest", "steady");
                    m_Exclude.Add("stealthier", "stealthy");
                    m_Exclude.Add("stealthiest", "stealthy");
                    m_Exclude.Add("steamier", "steamy");
                    m_Exclude.Add("steamiest", "steamy");
                    m_Exclude.Add("stingier", "stingy");
                    m_Exclude.Add("stingiest", "stingy");
                    m_Exclude.Add("stiper", "striper");
                    m_Exclude.Add("stockier", "stocky");
                    m_Exclude.Add("stockiest", "stocky");
                    m_Exclude.Add("stodgier", "stodgy");
                    m_Exclude.Add("stodgiest", "stodgy");
                    m_Exclude.Add("stonier", "stony");
                    m_Exclude.Add("stoniest", "stony");
                    m_Exclude.Add("stormier", "stormy");
                    m_Exclude.Add("stormiest", "stormy");
                    m_Exclude.Add("streakier", "streaky");
                    m_Exclude.Add("streakiest", "streaky");
                    m_Exclude.Add("streamier", "streamy");
                    m_Exclude.Add("streamiest", "streamy");
                    m_Exclude.Add("stretchier", "stretchy");
                    m_Exclude.Add("stretchiest", "stretchy");
                    m_Exclude.Add("stringier", "stringy");
                    m_Exclude.Add("stringiest", "stringy");
                    m_Exclude.Add("stripier", "stripy");
                    m_Exclude.Add("stripiest", "stripy");
                    m_Exclude.Add("stronger", "strong");
                    m_Exclude.Add("strongest", "strong");
                    m_Exclude.Add("stroppier", "stroppy");
                    m_Exclude.Add("stroppiest", "stroppy");
                    m_Exclude.Add("stuffier", "stuffy");
                    m_Exclude.Add("stuffiest", "stuffy");
                    m_Exclude.Add("stumpier", "stumpy");
                    m_Exclude.Add("stumpiest", "stumpy");
                    m_Exclude.Add("sturdier", "sturdy");
                    m_Exclude.Add("sturdiest", "sturdy");
                    m_Exclude.Add("sulkier", "sulky");
                    m_Exclude.Add("sulkiest", "sulky");
                    m_Exclude.Add("sultrier", "sultry");
                    m_Exclude.Add("sultriest", "sultry");
                    m_Exclude.Add("sunnier", "sunny");
                    m_Exclude.Add("sunniest", "sunny");
                    m_Exclude.Add("surlier", "surly");
                    m_Exclude.Add("surliest", "surly");
                    m_Exclude.Add("swankier", "swanky");
                    m_Exclude.Add("swankiest", "swanky");
                    m_Exclude.Add("swarthier", "swarthy");
                    m_Exclude.Add("swarthiest", "swarthy");
                    m_Exclude.Add("sweatier", "sweaty");
                    m_Exclude.Add("sweatiest", "sweaty");
                    m_Exclude.Add("tackier", "tacky");
                    m_Exclude.Add("tackiest", "tacky");
                    m_Exclude.Add("talkier", "talky");
                    m_Exclude.Add("talkiest", "talky");
                    m_Exclude.Add("tangier", "tangy");
                    m_Exclude.Add("tangiest", "tangy");
                    m_Exclude.Add("tanner", "tan");
                    m_Exclude.Add("tannest", "tan");
                    m_Exclude.Add("tardier", "tardy");
                    m_Exclude.Add("tardiest", "tardy");
                    m_Exclude.Add("tastier", "tasty");
                    m_Exclude.Add("tastiest", "tasty");
                    m_Exclude.Add("tattier", "tatty");
                    m_Exclude.Add("tattiest", "tatty");
                    m_Exclude.Add("tawdrier", "tawdry");
                    m_Exclude.Add("tawdriest", "tawdry");
                    m_Exclude.Add("techier", "techy");
                    m_Exclude.Add("techiest", "techy");
                    m_Exclude.Add("teenier", "teeny");
                    m_Exclude.Add("teeniest", "teeny");
                    m_Exclude.Add("testier", "testy");
                    m_Exclude.Add("testiest", "testy");
                    m_Exclude.Add("tetchier", "tetchy");
                    m_Exclude.Add("tetchiest", "tetchy");
                    m_Exclude.Add("thinner", "thin");
                    m_Exclude.Add("thinnest", "thin");
                    m_Exclude.Add("thirstier", "thirsty");
                    m_Exclude.Add("thirstiest", "thirsty");
                    m_Exclude.Add("thornier", "thorny");
                    m_Exclude.Add("thorniest", "thorny");
                    m_Exclude.Add("threadier", "thready");
                    m_Exclude.Add("threadiest", "thready");
                    m_Exclude.Add("thriftier", "thrifty");
                    m_Exclude.Add("thriftiest", "thrifty");
                    m_Exclude.Add("throatier", "throaty");
                    m_Exclude.Add("throatiest", "throaty");
                    m_Exclude.Add("tidier", "tidy");
                    m_Exclude.Add("tidiest", "tidy");
                    m_Exclude.Add("timelier", "timely");
                    m_Exclude.Add("timeliest", "timely");
                    m_Exclude.Add("tinier", "tiny");
                    m_Exclude.Add("tiniest", "tiny");
                    m_Exclude.Add("tinnier", "tinny");
                    m_Exclude.Add("tinniest", "tinny");
                    m_Exclude.Add("tipsier", "tipsy");
                    m_Exclude.Add("tipsiest", "tipsy");
                    m_Exclude.Add("tonier", "tony");
                    m_Exclude.Add("toniest", "tony");
                    m_Exclude.Add("toothier", "toothy");
                    m_Exclude.Add("toothiest", "toothy");
                    m_Exclude.Add("touchier", "touchy");
                    m_Exclude.Add("touchiest", "touchy");
                    m_Exclude.Add("trashier", "trashy");
                    m_Exclude.Add("trashiest", "trashy");
                    m_Exclude.Add("trendier", "trendy");
                    m_Exclude.Add("trendiest", "trendy");
                    m_Exclude.Add("trickier", "tricky");
                    m_Exclude.Add("trickiest", "tricky");
                    m_Exclude.Add("tricksier", "tricksy");
                    m_Exclude.Add("tricksiest", "tricksy");
                    m_Exclude.Add("trimmer", "trim");
                    m_Exclude.Add("trimmest", "trim");
                    m_Exclude.Add("truer", "true");
                    m_Exclude.Add("truest", "true");
                    m_Exclude.Add("trustier", "trusty");
                    m_Exclude.Add("trustiest", "trusty");
                    m_Exclude.Add("tubbier", "tubby");
                    m_Exclude.Add("tubbiest", "tubby");
                    m_Exclude.Add("turfier", "turfy");
                    m_Exclude.Add("turfiest", "turfy");
                    m_Exclude.Add("tweedier", "tweedy");
                    m_Exclude.Add("tweediest", "tweedy");
                    m_Exclude.Add("twiggier", "twiggy");
                    m_Exclude.Add("twiggiest", "twiggy");
                    m_Exclude.Add("uglier", "ugly");
                    m_Exclude.Add("ugliest", "ugly");
                    m_Exclude.Add("unfriendlier", "unfriendly");
                    m_Exclude.Add("unfriendliest", "unfriendly");
                    m_Exclude.Add("ungainlier", "ungainly");
                    m_Exclude.Add("ungainliest", "ungainly");
                    m_Exclude.Add("ungodlier", "ungodly");
                    m_Exclude.Add("ungodliest", "ungodly");
                    m_Exclude.Add("unhappier", "unhappy");
                    m_Exclude.Add("unhappiest", "unhappy");
                    m_Exclude.Add("unhealthier", "unhealthy");
                    m_Exclude.Add("unhealthiest", "unhealthy");
                    m_Exclude.Add("unholier", "unholy");
                    m_Exclude.Add("unholiest", "unholy");
                    m_Exclude.Add("unrulier", "unruly");
                    m_Exclude.Add("unruliest", "unruly");
                    m_Exclude.Add("untidier", "untidy");
                    m_Exclude.Add("untidiest", "untidy");
                    m_Exclude.Add("vastier", "vasty");
                    m_Exclude.Add("vastiest", "vasty");
                    m_Exclude.Add("viewier", "viewy");
                    m_Exclude.Add("viewiest", "viewy");
                    m_Exclude.Add("wackier", "wacky");
                    m_Exclude.Add("wackiest", "wacky");
                    m_Exclude.Add("wanner", "wan");
                    m_Exclude.Add("wannest", "wan");
                    m_Exclude.Add("warier", "wary");
                    m_Exclude.Add("wariest", "wary");
                    m_Exclude.Add("washier", "washy");
                    m_Exclude.Add("washiest", "washy");
                    m_Exclude.Add("wavier", "wavy");
                    m_Exclude.Add("waviest", "wavy");
                    m_Exclude.Add("waxier", "waxy");
                    m_Exclude.Add("waxiest", "waxy");
                    m_Exclude.Add("weaklier", "weakly");
                    m_Exclude.Add("weakliest", "weakly");
                    m_Exclude.Add("wealthier", "wealthy");
                    m_Exclude.Add("wealthiest", "wealthy");
                    m_Exclude.Add("wearier", "weary");
                    m_Exclude.Add("weariest", "weary");
                    m_Exclude.Add("webbier", "webby");
                    m_Exclude.Add("webbiest", "webby");
                    m_Exclude.Add("weedier", "weedy");
                    m_Exclude.Add("weediest", "weedy");
                    m_Exclude.Add("weenier", "weeny");
                    m_Exclude.Add("weeniest", "weeny");
                    m_Exclude.Add("weensier", "weensy");
                    m_Exclude.Add("weensiest", "weensy");
                    m_Exclude.Add("weepier", "weepy");
                    m_Exclude.Add("weepiest", "weepy");
                    m_Exclude.Add("weightier", "weighty");
                    m_Exclude.Add("weightiest", "weighty");
                    m_Exclude.Add("wetter", "wet");
                    m_Exclude.Add("wettest", "wet");
                    m_Exclude.Add("whackier", "whacky");
                    m_Exclude.Add("whackiest", "whacky");
                    m_Exclude.Add("whimsier", "whimsy");
                    m_Exclude.Add("whimsiest", "whimsy");
                    m_Exclude.Add("wieldier", "wieldy");
                    m_Exclude.Add("wieldiest", "wieldy");
                    m_Exclude.Add("wilier", "wily");
                    m_Exclude.Add("wiliest", "wily");
                    m_Exclude.Add("windier", "windy");
                    m_Exclude.Add("windiest", "windy");
                    m_Exclude.Add("winier", "winy");
                    m_Exclude.Add("winiest", "winy");
                    m_Exclude.Add("winterier", "wintery");
                    m_Exclude.Add("winteriest", "wintery");
                    m_Exclude.Add("wintrier", "wintry");
                    m_Exclude.Add("wintriest", "wintry");
                    m_Exclude.Add("wirier", "wiry");
                    m_Exclude.Add("wiriest", "wiry");
                    m_Exclude.Add("wispier", "wispy");
                    m_Exclude.Add("wispiest", "wispy");
                    m_Exclude.Add("wittier", "witty");
                    m_Exclude.Add("wittiest", "witty");
                    m_Exclude.Add("wonkier", "wonky");
                    m_Exclude.Add("wonkiest", "wonky");
                    m_Exclude.Add("woodier", "woody");
                    m_Exclude.Add("woodiest", "woody");
                    m_Exclude.Add("woodsier", "woodsy");
                    m_Exclude.Add("woodsiest", "woodsy");
                    m_Exclude.Add("woollier", "woolly");
                    m_Exclude.Add("woolliest", "woolly");
                    m_Exclude.Add("woozier", "woozy");
                    m_Exclude.Add("wooziest", "woozy");
                    m_Exclude.Add("wordier", "wordy");
                    m_Exclude.Add("wordiest", "wordy");
                    m_Exclude.Add("worldlier", "worldly");
                    m_Exclude.Add("worldliest", "worldly");
                    m_Exclude.Add("wormier", "wormy");
                    m_Exclude.Add("wormiest", "wormy");
                    m_Exclude.Add("worse", "bad");
                    m_Exclude.Add("worst", "bad");
                    m_Exclude.Add("worthier", "worthy");
                    m_Exclude.Add("worthiest", "worthy");
                    m_Exclude.Add("wrier", "wry");
                    m_Exclude.Add("wriest", "wry");
                    m_Exclude.Add("wryer", "wry");
                    m_Exclude.Add("wryest", "wry");
                    m_Exclude.Add("yarer", "yare");
                    m_Exclude.Add("yarest", "yare");
                    m_Exclude.Add("yeastier", "yeasty");
                    m_Exclude.Add("yeastiest", "yeasty");
                    m_Exclude.Add("younger", "young");
                    m_Exclude.Add("youngest", "young");
                    m_Exclude.Add("yummier", "yummy");
                    m_Exclude.Add("yummiest", "yummy");
                    m_Exclude.Add("zanier", "zany");
                    m_Exclude.Add("zaniest", "zany");
                    m_Exclude.Add("zippier", "zippy");
                    m_Exclude.Add("zippiest", "zippy");
                    #endregion

                    #region verb
                    m_Exclude.Add("abetted", "abet");
                    m_Exclude.Add("abetting", "abet");
                    m_Exclude.Add("abhorred", "abhor");
                    m_Exclude.Add("abhorring", "abhor");
                    m_Exclude.Add("abode", "abide");
                    m_Exclude.Add("abought", "aby");
                    m_Exclude.Add("about-shipped", "about-ship");
                    m_Exclude.Add("about-shipping", "about-ship");
                    m_Exclude.Add("abutted", "abut");
                    m_Exclude.Add("abutting", "abut");
                    m_Exclude.Add("abye", "aby");
                    m_Exclude.Add("accompanied", "accompany");
                    m_Exclude.Add("acetified", "acetify");
                    m_Exclude.Add("acidified", "acidify");
                    m_Exclude.Add("acquitted", "acquit");
                    m_Exclude.Add("acquitting", "acquit");
                    m_Exclude.Add("ad-libbed", "ad-lib");
                    m_Exclude.Add("ad-libbing", "ad-lib");
                    m_Exclude.Add("addrest", "address");
                    m_Exclude.Add("admitted", "admit");
                    m_Exclude.Add("admitting", "admit");
                    m_Exclude.Add("aerified", "aerify");
                    m_Exclude.Add("air-dried", "air-dry");
                    m_Exclude.Add("airdropped", "airdrop");
                    m_Exclude.Add("airdropping", "airdrop");
                    m_Exclude.Add("alkalified", "alkalify");
                    m_Exclude.Add("allied", "ally");
                    m_Exclude.Add("allotted", "allot");
                    m_Exclude.Add("allotting", "allot");
                    m_Exclude.Add("allowed_for", "allow_for");
                    m_Exclude.Add("allowing_for", "allow_for");
                    m_Exclude.Add("allows_for", "allow_for");
                    m_Exclude.Add("am", "be");
                    m_Exclude.Add("ammonified", "ammonify");
                    m_Exclude.Add("amnestied", "amnesty");
                    m_Exclude.Add("amplified", "amplify");
                    m_Exclude.Add("anglified", "anglify");
                    m_Exclude.Add("annulled", "annul");
                    m_Exclude.Add("annulling", "annul");
                    m_Exclude.Add("appalled", "appal");
                    m_Exclude.Add("appalling", "appal");
                    m_Exclude.Add("applied", "apply");
                    m_Exclude.Add("arcked", "arc");
                    m_Exclude.Add("arcking", "arc");
                    m_Exclude.Add("are", "be");
                    m_Exclude.Add("argufied", "argufy");
                    m_Exclude.Add("arisen", "arise");
                    m_Exclude.Add("arose", "arise");
                    m_Exclude.Add("ate", "eat");
                    m_Exclude.Add("atrophied", "atrophy");
                    m_Exclude.Add("averred", "aver");
                    m_Exclude.Add("averring", "aver");
                    m_Exclude.Add("awoke", "awake");
                    m_Exclude.Add("awoken", "awake");
                    m_Exclude.Add("babied", "baby");
                    m_Exclude.Add("baby-sat", "baby-sit");
                    m_Exclude.Add("baby-sitting", "baby-sit");
                    m_Exclude.Add("back-pedalled", "back-pedal");
                    m_Exclude.Add("back-pedalling", "back-pedal");
                    m_Exclude.Add("backbit", "backbite");
                    m_Exclude.Add("backbitten", "backbite");
                    m_Exclude.Add("backslid", "backslide");
                    m_Exclude.Add("backslidden", "backslide");
                    m_Exclude.Add("bade", "bid");
                    m_Exclude.Add("bagged", "bag");
                    m_Exclude.Add("bagging", "bag");
                    m_Exclude.Add("ballyragged", "ballyrag");
                    m_Exclude.Add("ballyragging", "ballyrag");
                    m_Exclude.Add("bandied", "bandy");
                    m_Exclude.Add("banned", "ban");
                    m_Exclude.Add("banning", "ban");
                    m_Exclude.Add("barred", "bar");
                    m_Exclude.Add("barrelled", "barrel");
                    m_Exclude.Add("barrelling", "barrel");
                    m_Exclude.Add("barring", "bar");
                    m_Exclude.Add("basified", "basify");
                    m_Exclude.Add("batted", "bat");
                    m_Exclude.Add("batting", "bat");
                    m_Exclude.Add("bayonetted", "bayonet");
                    m_Exclude.Add("bayonetting", "bayonet");
                    m_Exclude.Add("beaten", "beat");
                    m_Exclude.Add("beatified", "beatify");
                    m_Exclude.Add("beautified", "beautify");
                    m_Exclude.Add("became", "become");
                    m_Exclude.Add("became_known", "become_known");
                    m_Exclude.Add("becomes_known", "become_known");
                    m_Exclude.Add("bedded", "bed");
                    m_Exclude.Add("bedding", "bed");
                    m_Exclude.Add("bedevilled", "bedevil");
                    m_Exclude.Add("bedevilling", "bedevil");
                    m_Exclude.Add("bedimmed", "bedim");
                    m_Exclude.Add("bedimming", "bedim");
                    m_Exclude.Add("been", "be");
                    m_Exclude.Add("befallen", "befall");
                    m_Exclude.Add("befell", "befall");
                    m_Exclude.Add("befitted", "befit");
                    m_Exclude.Add("befitting", "befit");
                    m_Exclude.Add("befogged", "befog");
                    m_Exclude.Add("befogging", "befog");
                    m_Exclude.Add("began", "begin");
                    m_Exclude.Add("begat", "beget");
                    m_Exclude.Add("begetting", "beget");
                    m_Exclude.Add("begged", "beg");
                    m_Exclude.Add("begging", "beg");
                    m_Exclude.Add("beginning", "begin");
                    m_Exclude.Add("begirt", "begird");
                    m_Exclude.Add("begot", "beget");
                    m_Exclude.Add("begotten", "beget");
                    m_Exclude.Add("begun", "begin");
                    m_Exclude.Add("beheld", "behold");
                    m_Exclude.Add("beholden", "behold");
                    m_Exclude.Add("bejewelled", "bejewel");
                    m_Exclude.Add("bejewelling", "bejewel");
                    m_Exclude.Add("bellied", "belly");
                    m_Exclude.Add("belly-flopped", "belly-flop");
                    m_Exclude.Add("belly-flopping", "belly-flop");
                    m_Exclude.Add("belying", "belie");
                    m_Exclude.Add("benefitted", "benefit");
                    m_Exclude.Add("benefitting", "benefit");
                    m_Exclude.Add("benempt", "bename");
                    m_Exclude.Add("bent", "bend");
                    m_Exclude.Add("berried", "berry");
                    m_Exclude.Add("besetting", "beset");
                    m_Exclude.Add("besought", "beseech");
                    m_Exclude.Add("bespoke", "bespeak");
                    m_Exclude.Add("bespoken", "bespeak");
                    m_Exclude.Add("bestirred", "bestir");
                    m_Exclude.Add("bestirring", "bestir");
                    m_Exclude.Add("bestrewn", "bestrew");
                    m_Exclude.Add("bestrid", "bestride");
                    m_Exclude.Add("bestridden", "bestride");
                    m_Exclude.Add("bestrode", "bestride");
                    m_Exclude.Add("betaken", "betake");
                    m_Exclude.Add("bethought", "bethink");
                    m_Exclude.Add("betook", "betake");
                    m_Exclude.Add("betted", "bet");
                    m_Exclude.Add("betting", "bet");
                    m_Exclude.Add("bevelled", "bevel");
                    m_Exclude.Add("bevelling", "bevel");
                    m_Exclude.Add("biassed", "bias");
                    m_Exclude.Add("biassing", "bias");
                    m_Exclude.Add("bidden", "bid");
                    m_Exclude.Add("bidding", "bid");
                    m_Exclude.Add("binned", "bin");
                    m_Exclude.Add("binning", "bin");
                    m_Exclude.Add("bird-dogged", "bird-dog");
                    m_Exclude.Add("bird-dogging", "bird-dog");
                    m_Exclude.Add("bit", "bite");
                    m_Exclude.Add("bitted", "bit");
                    m_Exclude.Add("bitten", "bite");
                    m_Exclude.Add("bitting", "bit");
                    m_Exclude.Add("bivouacked", "bivouac");
                    m_Exclude.Add("bivouacking", "bivouac");
                    m_Exclude.Add("blabbed", "blab");
                    m_Exclude.Add("blabbing", "blab");
                    m_Exclude.Add("blackberried", "blackberry");
                    m_Exclude.Add("blacklegged", "blackleg");
                    m_Exclude.Add("blacklegging", "blackleg");
                    m_Exclude.Add("blatted", "blat");
                    m_Exclude.Add("blatting", "blat");
                    m_Exclude.Add("bled", "bleed");
                    m_Exclude.Add("blest", "bless");
                    m_Exclude.Add("blew", "blow");
                    m_Exclude.Add("blew_one's_nose", "blow_one's_nose");
                    m_Exclude.Add("blipped", "blip");
                    m_Exclude.Add("blipping", "blip");
                    m_Exclude.Add("blobbed", "blob");
                    m_Exclude.Add("blobbing", "blob");
                    m_Exclude.Add("bloodied", "bloody");
                    m_Exclude.Add("blotted", "blot");
                    m_Exclude.Add("blotting", "blot");
                    m_Exclude.Add("blowing_one's_nose", "blow_one's_nose");
                    m_Exclude.Add("blown", "blow");
                    m_Exclude.Add("blows_one's_nose", "blow_one's_nose");
                    m_Exclude.Add("blubbed", "blub");
                    m_Exclude.Add("blubbing", "blub");
                    m_Exclude.Add("blue-pencilled", "blue-pencil");
                    m_Exclude.Add("blue-pencilling", "blue-pencil");
                    m_Exclude.Add("blurred", "blur");
                    m_Exclude.Add("blurring", "blur");
                    m_Exclude.Add("bobbed", "bob");
                    m_Exclude.Add("bobbing", "bob");
                    m_Exclude.Add("bodied", "body");
                    m_Exclude.Add("bogged-down", "bog-down");
                    m_Exclude.Add("bogged_down", "bog_down");
                    m_Exclude.Add("bogging-down", "bog-down");
                    m_Exclude.Add("bogging_down", "bog_down");
                    m_Exclude.Add("bogs-down", "bog-down");
                    m_Exclude.Add("bogs_down", "bog_down");
                    m_Exclude.Add("booby-trapped", "booby-trap");
                    m_Exclude.Add("booby-trapping", "booby-trap");
                    m_Exclude.Add("bootlegged", "bootleg");
                    m_Exclude.Add("bootlegging", "bootleg");
                    m_Exclude.Add("bopped", "bop");
                    m_Exclude.Add("bopping", "bop");
                    m_Exclude.Add("bore", "bear");
                    m_Exclude.Add("born", "bear");
                    m_Exclude.Add("borne", "bear");
                    m_Exclude.Add("bottle-fed", "bottle-feed");
                    m_Exclude.Add("bought", "buy");
                    m_Exclude.Add("bound", "bind");
                    m_Exclude.Add("bragged", "brag");
                    m_Exclude.Add("bragging", "brag");
                    m_Exclude.Add("breast-fed", "breast-feed");
                    m_Exclude.Add("bred", "breed");
                    m_Exclude.Add("brevetted", "brevet");
                    m_Exclude.Add("brevetting", "brevet");
                    m_Exclude.Add("brimmed", "brim");
                    m_Exclude.Add("brimming", "brim");
                    m_Exclude.Add("broke", "break");
                    m_Exclude.Add("broken", "break");
                    m_Exclude.Add("brought", "bring");
                    m_Exclude.Add("browbeaten", "browbeat");
                    m_Exclude.Add("brutified", "brutify");
                    m_Exclude.Add("budded", "bud");
                    m_Exclude.Add("budding", "bud");
                    m_Exclude.Add("bugged", "bug");
                    m_Exclude.Add("bugging", "bug");
                    m_Exclude.Add("built", "build");
                    m_Exclude.Add("bulldogging", "bulldog");
                    m_Exclude.Add("bullied", "bully");
                    m_Exclude.Add("bullshitted", "bullshit");
                    m_Exclude.Add("bullshitting", "bullshit");
                    m_Exclude.Add("bullwhipped", "bullwhip");
                    m_Exclude.Add("bullwhipping", "bullwhip");
                    m_Exclude.Add("bullyragged", "bullyrag");
                    m_Exclude.Add("bullyragging", "bullyrag");
                    m_Exclude.Add("bummed", "bum");
                    m_Exclude.Add("bumming", "bum");
                    m_Exclude.Add("buried", "bury");
                    m_Exclude.Add("burnt", "burn");
                    m_Exclude.Add("burred", "bur");
                    m_Exclude.Add("burring", "bur");
                    m_Exclude.Add("bushelled", "bushel");
                    m_Exclude.Add("bushelling", "bushel");
                    m_Exclude.Add("busied", "busy");
                    m_Exclude.Add("bypast", "bypass");
                    m_Exclude.Add("caballed", "cabal");
                    m_Exclude.Add("caballing", "cabal");
                    m_Exclude.Add("caddied", "caddie");
                    m_Exclude.Add("caddies", "caddie");
                    m_Exclude.Add("caddying", "caddie");
                    m_Exclude.Add("calcified", "calcify");
                    m_Exclude.Add("came", "come");
                    m_Exclude.Add("canalled", "canal");
                    m_Exclude.Add("canalling", "canal");
                    m_Exclude.Add("cancelled", "cancel");
                    m_Exclude.Add("cancelling", "cancel");
                    m_Exclude.Add("candied", "candy");
                    m_Exclude.Add("canned", "can");
                    m_Exclude.Add("canning", "can");
                    m_Exclude.Add("canopied", "canopy");
                    m_Exclude.Add("capped", "cap");
                    m_Exclude.Add("capping", "cap");
                    m_Exclude.Add("carburetted", "carburet");
                    m_Exclude.Add("carburetting", "carburet");
                    m_Exclude.Add("carillonned", "carillon");
                    m_Exclude.Add("carillonning", "carillon");
                    m_Exclude.Add("carnied", "carny");
                    m_Exclude.Add("carnified", "carnify");
                    m_Exclude.Add("carolled", "carol");
                    m_Exclude.Add("carolling", "carol");
                    m_Exclude.Add("carried", "carry");
                    m_Exclude.Add("casefied", "casefy");
                    m_Exclude.Add("catnapped", "catnap");
                    m_Exclude.Add("catnapping", "catnap");
                    m_Exclude.Add("catted", "cat");
                    m_Exclude.Add("catting", "cat");
                    m_Exclude.Add("caught", "catch");
                    m_Exclude.Add("cavilled", "cavil");
                    m_Exclude.Add("cavilling", "cavil");
                    m_Exclude.Add("certified", "certify");
                    m_Exclude.Add("channelled", "channel");
                    m_Exclude.Add("channelling", "channel");
                    m_Exclude.Add("chapped", "chap");
                    m_Exclude.Add("chapping", "chap");
                    m_Exclude.Add("charred", "char");
                    m_Exclude.Add("charring", "char");
                    m_Exclude.Add("chatted", "chat");
                    m_Exclude.Add("chatting", "chat");
                    m_Exclude.Add("chevied", "chivy");
                    m_Exclude.Add("chevies", "chivy");
                    m_Exclude.Add("chevying", "chivy");
                    m_Exclude.Add("chid", "chide");
                    m_Exclude.Add("chidden", "chide");
                    m_Exclude.Add("chinned", "chin");
                    m_Exclude.Add("chinning", "chin");
                    m_Exclude.Add("chipped", "chip");
                    m_Exclude.Add("chipping", "chip");
                    m_Exclude.Add("chiselled", "chisel");
                    m_Exclude.Add("chiselling", "chisel");
                    m_Exclude.Add("chitchatted", "chitchat");
                    m_Exclude.Add("chitchatting", "chitchat");
                    m_Exclude.Add("chivied", "chivy");
                    m_Exclude.Add("chivved", "chiv");
                    m_Exclude.Add("chivvied", "chivy");
                    m_Exclude.Add("chivvies", "chivy");
                    m_Exclude.Add("chivving", "chiv");
                    m_Exclude.Add("chivvying", "chivy");
                    m_Exclude.Add("chondrified", "chondrify");
                    m_Exclude.Add("chopped", "chop");
                    m_Exclude.Add("chopping", "chop");
                    m_Exclude.Add("chose", "choose");
                    m_Exclude.Add("chosen", "choose");
                    m_Exclude.Add("chugged", "chug");
                    m_Exclude.Add("chugging", "chug");
                    m_Exclude.Add("chummed", "chum");
                    m_Exclude.Add("chumming", "chum");
                    m_Exclude.Add("citified", "citify");
                    m_Exclude.Add("clad", "clothe");
                    m_Exclude.Add("cladding", "clad");
                    m_Exclude.Add("clammed", "clam");
                    m_Exclude.Add("clamming", "clam");
                    m_Exclude.Add("clapped", "clap");
                    m_Exclude.Add("clapping", "clap");
                    m_Exclude.Add("clarified", "clarify");
                    m_Exclude.Add("classified", "classify");
                    m_Exclude.Add("cleft", "cleave");
                    m_Exclude.Add("clemmed", "clem");
                    m_Exclude.Add("clemming", "clem");
                    m_Exclude.Add("clept", "clepe");
                    m_Exclude.Add("clipped", "clip");
                    m_Exclude.Add("clipping", "clip");
                    m_Exclude.Add("clogged", "clog");
                    m_Exclude.Add("clogging", "clog");
                    m_Exclude.Add("clopped", "clop");
                    m_Exclude.Add("clopping", "clop");
                    m_Exclude.Add("clotted", "clot");
                    m_Exclude.Add("clotting", "clot");
                    m_Exclude.Add("clove", "cleave");
                    m_Exclude.Add("cloven", "cleave");
                    m_Exclude.Add("clubbed", "club");
                    m_Exclude.Add("clubbing", "club");
                    m_Exclude.Add("clung", "cling");
                    m_Exclude.Add("co-opted", "coopt");
                    m_Exclude.Add("co-opting", "coopt");
                    m_Exclude.Add("co-opts", "coopts");
                    m_Exclude.Add("co-ordinate", "coordinate");
                    m_Exclude.Add("co-ordinated", "coordinate");
                    m_Exclude.Add("co-ordinates", "coordinate");
                    m_Exclude.Add("co-ordinating", "coordinate");
                    m_Exclude.Add("co-starred", "co-star");
                    m_Exclude.Add("co-starring", "co-star");
                    m_Exclude.Add("cockneyfied", "cockneyfy");
                    m_Exclude.Add("codded", "cod");
                    m_Exclude.Add("codding", "cod");
                    m_Exclude.Add("codified", "codify");
                    m_Exclude.Add("cogged", "cog");
                    m_Exclude.Add("cogging", "cog");
                    m_Exclude.Add("coiffed", "coif");
                    m_Exclude.Add("coiffing", "coif");
                    m_Exclude.Add("collied", "colly");
                    m_Exclude.Add("combatted", "combat");
                    m_Exclude.Add("combatting", "combat");
                    m_Exclude.Add("committed", "commit");
                    m_Exclude.Add("committing", "commit");
                    m_Exclude.Add("compelled", "compel");
                    m_Exclude.Add("compelling", "compel");
                    m_Exclude.Add("complied", "comply");
                    m_Exclude.Add("complotted", "complot");
                    m_Exclude.Add("complotting", "complot");
                    m_Exclude.Add("concurred", "concur");
                    m_Exclude.Add("concurring", "concur");
                    m_Exclude.Add("confabbed", "confab");
                    m_Exclude.Add("confabbing", "confab");
                    m_Exclude.Add("conferred", "confer");
                    m_Exclude.Add("conferring", "confer");
                    m_Exclude.Add("conned", "con");
                    m_Exclude.Add("conning", "con");
                    m_Exclude.Add("controlled", "control");
                    m_Exclude.Add("controlling", "control");
                    m_Exclude.Add("copied", "copy");
                    m_Exclude.Add("copped", "cop");
                    m_Exclude.Add("copping", "cop");
                    m_Exclude.Add("coquetted", "coquet");
                    m_Exclude.Add("coquetting", "coquet");
                    m_Exclude.Add("corralled", "corral");
                    m_Exclude.Add("corralling", "corral");
                    m_Exclude.Add("counselled", "counsel");
                    m_Exclude.Add("counselling", "counsel");
                    m_Exclude.Add("counterplotted", "counterplot");
                    m_Exclude.Add("counterplotting", "counterplot");
                    m_Exclude.Add("countersank", "countersink");
                    m_Exclude.Add("countersunk", "countersink");
                    m_Exclude.Add("court-martialled", "court-martial");
                    m_Exclude.Add("court-martialling", "court-martial");
                    m_Exclude.Add("crabbed", "crab");
                    m_Exclude.Add("crabbing", "crab");
                    m_Exclude.Add("crammed", "cram");
                    m_Exclude.Add("cramming", "cram");
                    m_Exclude.Add("crapped", "crap");
                    m_Exclude.Add("crapping", "crap");
                    m_Exclude.Add("crept", "creep");
                    m_Exclude.Add("cribbed", "crib");
                    m_Exclude.Add("cribbing", "crib");
                    m_Exclude.Add("cried", "cry");
                    m_Exclude.Add("cropped", "crop");
                    m_Exclude.Add("cropping", "crop");
                    m_Exclude.Add("crossbred", "crossbreed");
                    m_Exclude.Add("crosscutting", "crosscut");
                    m_Exclude.Add("crucified", "crucify");
                    m_Exclude.Add("cubbed", "cub");
                    m_Exclude.Add("cubbing", "cub");
                    m_Exclude.Add("cudgelled", "cudgel");
                    m_Exclude.Add("cudgelling", "cudgel");
                    m_Exclude.Add("cupelled", "cupel");
                    m_Exclude.Add("cupelling", "cupel");
                    m_Exclude.Add("cupped", "cup");
                    m_Exclude.Add("cupping", "cup");
                    m_Exclude.Add("curetted", "curet");
                    m_Exclude.Add("curettes", "curet");
                    m_Exclude.Add("curetting", "curet");
                    m_Exclude.Add("curried", "curry");
                    m_Exclude.Add("curst", "curse");
                    m_Exclude.Add("curtsied", "curtsy");
                    m_Exclude.Add("curvetted", "curvet");
                    m_Exclude.Add("curvetting", "curvet");
                    m_Exclude.Add("cutting", "cut");
                    m_Exclude.Add("dabbed", "dab");
                    m_Exclude.Add("dabbing", "dab");
                    m_Exclude.Add("dagged", "dag");
                    m_Exclude.Add("dagging", "dag");
                    m_Exclude.Add("dallied", "dally");
                    m_Exclude.Add("dammed", "dam");
                    m_Exclude.Add("damming", "dam");
                    m_Exclude.Add("damnified", "damnify");
                    m_Exclude.Add("dandified", "dandify");
                    m_Exclude.Add("dapped", "dap");
                    m_Exclude.Add("dapping", "dap");
                    m_Exclude.Add("dealt", "deal");
                    m_Exclude.Add("debarred", "debar");
                    m_Exclude.Add("debarring", "debar");
                    m_Exclude.Add("debugged", "debug");
                    m_Exclude.Add("debugging", "debug");
                    m_Exclude.Add("debussed", "debus");
                    m_Exclude.Add("debusses", "debus");
                    m_Exclude.Add("debussing", "debus");
                    m_Exclude.Add("decalcified", "decalcify");
                    m_Exclude.Add("declassified", "declassify");
                    m_Exclude.Add("decontrolled", "decontrol");
                    m_Exclude.Add("decontrolling", "decontrol");
                    m_Exclude.Add("decried", "decry");
                    m_Exclude.Add("deep-freeze", "deepfreeze");
                    m_Exclude.Add("deep-freezed", "deepfreeze");
                    m_Exclude.Add("deep-freezes", "deepfreeze");
                    m_Exclude.Add("deep-fried", "deep-fry");
                    m_Exclude.Add("deferred", "defer");
                    m_Exclude.Add("deferring", "defer");
                    m_Exclude.Add("defied", "defy");
                    m_Exclude.Add("degassed", "degas");
                    m_Exclude.Add("degasses", "degas");
                    m_Exclude.Add("degassing", "degas");
                    m_Exclude.Add("dehumidified", "dehumidify");
                    m_Exclude.Add("deified", "deify");
                    m_Exclude.Add("demitted", "demit");
                    m_Exclude.Add("demitting", "demit");
                    m_Exclude.Add("demobbed", "demob");
                    m_Exclude.Add("demobbing", "demob");
                    m_Exclude.Add("demulsified", "demulsify");
                    m_Exclude.Add("demurred", "demur");
                    m_Exclude.Add("demurring", "demur");
                    m_Exclude.Add("demystified", "demystify");
                    m_Exclude.Add("denazified", "denazify");
                    m_Exclude.Add("denied", "deny");
                    m_Exclude.Add("denitrified", "denitrify");
                    m_Exclude.Add("denned", "den");
                    m_Exclude.Add("denning", "den");
                    m_Exclude.Add("descried", "descry");
                    m_Exclude.Add("deterred", "deter");
                    m_Exclude.Add("deterring", "deter");
                    m_Exclude.Add("detoxified", "detoxify");
                    m_Exclude.Add("devilled", "devil");
                    m_Exclude.Add("devilling", "devil");
                    m_Exclude.Add("devitrified", "devitrify");
                    m_Exclude.Add("diagrammed", "diagram");
                    m_Exclude.Add("diagramming", "diagram");
                    m_Exclude.Add("dialled", "dial");
                    m_Exclude.Add("dialling", "dial");
                    m_Exclude.Add("dibbed", "dib");
                    m_Exclude.Add("dibbing", "dib");
                    m_Exclude.Add("did", "do");
                    m_Exclude.Add("digging", "dig");
                    m_Exclude.Add("dignified", "dignify");
                    m_Exclude.Add("dilly-dallied", "dilly-dally");
                    m_Exclude.Add("dimmed", "dim");
                    m_Exclude.Add("dimming", "dim");
                    m_Exclude.Add("dinned", "din");
                    m_Exclude.Add("dinning", "din");
                    m_Exclude.Add("dipped", "dip");
                    m_Exclude.Add("dipping", "dip");
                    m_Exclude.Add("dirtied", "dirty");
                    m_Exclude.Add("disannulled", "disannul");
                    m_Exclude.Add("disannulling", "disannul");
                    m_Exclude.Add("disbarred", "disbar");
                    m_Exclude.Add("disbarring", "disbar");
                    m_Exclude.Add("disbudded", "disbud");
                    m_Exclude.Add("disbudding", "disbud");
                    m_Exclude.Add("disembodied", "disembody");
                    m_Exclude.Add("disembowelled", "disembowel");
                    m_Exclude.Add("disembowelling", "disembowel");
                    m_Exclude.Add("disenthralled", "disenthral");
                    m_Exclude.Add("disenthralling", "disenthral");
                    m_Exclude.Add("disenthralls", "disenthral");
                    m_Exclude.Add("disenthrals", "disenthrall");
                    m_Exclude.Add("dishevelled", "dishevel");
                    m_Exclude.Add("dishevelling", "dishevel");
                    m_Exclude.Add("disinterred", "disinter");
                    m_Exclude.Add("disinterring", "disinter");
                    m_Exclude.Add("dispelled", "dispel");
                    m_Exclude.Add("dispelling", "dispel");
                    m_Exclude.Add("disqualified", "disqualify");
                    m_Exclude.Add("dissatisfied", "dissatisfy");
                    m_Exclude.Add("distilled", "distil");
                    m_Exclude.Add("distilling", "distil");
                    m_Exclude.Add("diversified", "diversify");
                    m_Exclude.Add("divvied", "divvy");
                    m_Exclude.Add("dizzied", "dizzy");
                    m_Exclude.Add("dogged", "dog");
                    m_Exclude.Add("dogging", "dog");
                    m_Exclude.Add("doglegged", "dogleg");
                    m_Exclude.Add("doglegging", "dogleg");
                    m_Exclude.Add("dollied", "dolly");
                    m_Exclude.Add("done", "do");
                    m_Exclude.Add("donned", "don");
                    m_Exclude.Add("donning", "don");
                    m_Exclude.Add("dotted", "dot");
                    m_Exclude.Add("dotting", "dot");
                    m_Exclude.Add("dought", "dow");
                    m_Exclude.Add("dove", "dive");
                    m_Exclude.Add("drabbed", "drab");
                    m_Exclude.Add("drabbing", "drab");
                    m_Exclude.Add("dragged", "drag");
                    m_Exclude.Add("dragging", "drag");
                    m_Exclude.Add("drank", "drink");
                    m_Exclude.Add("drawn", "draw");
                    m_Exclude.Add("dreamt", "dream");
                    m_Exclude.Add("drew", "draw");
                    m_Exclude.Add("dried", "dry");
                    m_Exclude.Add("dripped", "drip");
                    m_Exclude.Add("dripping", "drip");
                    m_Exclude.Add("drivelled", "drivel");
                    m_Exclude.Add("drivelling", "drivel");
                    m_Exclude.Add("driven", "drive");
                    m_Exclude.Add("dropped", "drop");
                    m_Exclude.Add("dropping", "drop");
                    m_Exclude.Add("drove", "drive");
                    m_Exclude.Add("drubbed", "drub");
                    m_Exclude.Add("drubbing", "drub");
                    m_Exclude.Add("drugged", "drug");
                    m_Exclude.Add("drugging", "drug");
                    m_Exclude.Add("drummed", "drum");
                    m_Exclude.Add("drumming", "drum");
                    m_Exclude.Add("drunk", "drink");
                    m_Exclude.Add("dubbed", "dub");
                    m_Exclude.Add("dubbing", "dub");
                    m_Exclude.Add("duelled", "duel");
                    m_Exclude.Add("duelling", "duel");
                    m_Exclude.Add("dug", "dig");
                    m_Exclude.Add("dulcified", "dulcify");
                    m_Exclude.Add("dummied", "dummy");
                    m_Exclude.Add("dunned", "dun");
                    m_Exclude.Add("dunning", "dun");
                    m_Exclude.Add("dwelt", "dwell");
                    m_Exclude.Add("dying", "die");
                    m_Exclude.Add("easied", "easy");
                    m_Exclude.Add("eaten", "eat");
                    m_Exclude.Add("eavesdropped", "eavesdrop");
                    m_Exclude.Add("eavesdropping", "eavesdrop");
                    m_Exclude.Add("eddied", "eddy");
                    m_Exclude.Add("edified", "edify");
                    m_Exclude.Add("ego-tripped", "ego-trip");
                    m_Exclude.Add("ego-tripping", "ego-trip");
                    m_Exclude.Add("electrified", "electrify");
                    m_Exclude.Add("embedded", "embed");
                    m_Exclude.Add("embedding", "embed");
                    m_Exclude.Add("embodied", "embody");
                    m_Exclude.Add("embussed", "embus");
                    m_Exclude.Add("embusses", "embus");
                    m_Exclude.Add("embussing", "embus");
                    m_Exclude.Add("emitted", "emit");
                    m_Exclude.Add("emitting", "emit");
                    m_Exclude.Add("empanelled", "empanel");
                    m_Exclude.Add("empanelling", "empanel");
                    m_Exclude.Add("emptied", "empty");
                    m_Exclude.Add("emulsified", "emulsify");
                    m_Exclude.Add("enamelled", "enamel");
                    m_Exclude.Add("enamelling", "enamel");
                    m_Exclude.Add("englutted", "englut");
                    m_Exclude.Add("englutting", "englut");
                    m_Exclude.Add("enrolled", "enrol");
                    m_Exclude.Add("enrolling", "enrol");
                    m_Exclude.Add("enthralled", "enthral");
                    m_Exclude.Add("enthralling", "enthral");
                    m_Exclude.Add("entrammelled", "entrammel");
                    m_Exclude.Add("entrammelling", "entrammel");
                    m_Exclude.Add("entrapped", "entrap");
                    m_Exclude.Add("entrapping", "entrap");
                    m_Exclude.Add("envied", "envy");
                    m_Exclude.Add("enwound", "enwind");
                    m_Exclude.Add("enwrapped", "enwrap");
                    m_Exclude.Add("enwrapping", "enwrap");
                    m_Exclude.Add("equalled", "equal");
                    m_Exclude.Add("equalling", "equal");
                    m_Exclude.Add("equipped", "equip");
                    m_Exclude.Add("equipping", "equip");
                    m_Exclude.Add("espied", "espy");
                    m_Exclude.Add("esterified", "esterify");
                    m_Exclude.Add("estopped", "estop");
                    m_Exclude.Add("estopping", "estop");
                    m_Exclude.Add("etherified", "etherify");
                    m_Exclude.Add("excelled", "excel");
                    m_Exclude.Add("excelling", "excel");
                    m_Exclude.Add("exemplified", "exemplify");
                    m_Exclude.Add("expelled", "expel");
                    m_Exclude.Add("expelling", "expel");
                    m_Exclude.Add("extolled", "extol");
                    m_Exclude.Add("extolling", "extol");
                    m_Exclude.Add("facetted", "facet");
                    m_Exclude.Add("facetting", "facet");
                    m_Exclude.Add("fagged", "fag");
                    m_Exclude.Add("fagging", "fag");
                    m_Exclude.Add("fallen", "fall");
                    m_Exclude.Add("falsified", "falsify");
                    m_Exclude.Add("fancied", "fancy");
                    m_Exclude.Add("fanned", "fan");
                    m_Exclude.Add("fanning", "fan");
                    m_Exclude.Add("fantasied", "fantasy");
                    m_Exclude.Add("fatted", "fat");
                    m_Exclude.Add("fatting", "fat");
                    m_Exclude.Add("featherbedded", "featherbed");
                    m_Exclude.Add("featherbedding", "featherbed");
                    m_Exclude.Add("fed", "feed");
                    m_Exclude.Add("fell", "fall");
                    m_Exclude.Add("felt", "feel");
                    m_Exclude.Add("ferried", "ferry");
                    m_Exclude.Add("fibbed", "fib");
                    m_Exclude.Add("fibbing", "fib");
                    m_Exclude.Add("figged", "fig");
                    m_Exclude.Add("figging", "fig");
                    m_Exclude.Add("filled_up", "fill_up");
                    m_Exclude.Add("fine-drawn", "fine-draw");
                    m_Exclude.Add("fine-drew", "fine-draw");
                    m_Exclude.Add("finned", "fin");
                    m_Exclude.Add("finning", "fin");
                    m_Exclude.Add("fitted", "fit");
                    m_Exclude.Add("fitting", "fit");
                    m_Exclude.Add("flagged", "flag");
                    m_Exclude.Add("flagging", "flag");
                    m_Exclude.Add("flammed", "flam");
                    m_Exclude.Add("flamming", "flam");
                    m_Exclude.Add("flannelled", "flannel");
                    m_Exclude.Add("flannelling", "flannel");
                    m_Exclude.Add("flapped", "flap");
                    m_Exclude.Add("flapping", "flap");
                    m_Exclude.Add("flatted", "flat");
                    m_Exclude.Add("flatting", "flat");
                    m_Exclude.Add("fled", "flee");
                    m_Exclude.Add("flew", "fly");
                    m_Exclude.Add("flimflammed", "flimflam");
                    m_Exclude.Add("flimflamming", "flimflam");
                    m_Exclude.Add("flip-flopped", "flip-flop");
                    m_Exclude.Add("flip-flopping", "flip-flop");
                    m_Exclude.Add("flipped", "flip");
                    m_Exclude.Add("flipping", "flip");
                    m_Exclude.Add("flitted", "flit");
                    m_Exclude.Add("flitting", "flit");
                    m_Exclude.Add("flogged", "flog");
                    m_Exclude.Add("flogging", "flog");
                    m_Exclude.Add("floodlit", "floodlight");
                    m_Exclude.Add("flopped", "flop");
                    m_Exclude.Add("flopping", "flop");
                    m_Exclude.Add("flown", "fly");
                    m_Exclude.Add("flubbed", "flub");
                    m_Exclude.Add("flubbing", "flub");
                    m_Exclude.Add("flung", "fling");
                    m_Exclude.Add("flurried", "flurry");
                    m_Exclude.Add("flyblew", "flyblow");
                    m_Exclude.Add("flyblown", "flyblow");
                    m_Exclude.Add("fobbed", "fob");
                    m_Exclude.Add("fobbing", "fob");
                    m_Exclude.Add("fogged", "fog");
                    m_Exclude.Add("fogging", "fog");
                    m_Exclude.Add("footslogged", "footslog");
                    m_Exclude.Add("footslogging", "footslog");
                    m_Exclude.Add("forbad", "forbid");
                    m_Exclude.Add("forbade", "forbid");
                    m_Exclude.Add("forbidden", "forbid");
                    m_Exclude.Add("forbidding", "forbid");
                    m_Exclude.Add("forbore", "forbear");
                    m_Exclude.Add("forborne", "forbear");
                    m_Exclude.Add("force-fed", "force-feed");
                    m_Exclude.Add("fordid", "fordo");
                    m_Exclude.Add("fordone", "fordo");
                    m_Exclude.Add("foredid", "foredo");
                    m_Exclude.Add("foredone", "foredo");
                    m_Exclude.Add("foregone", "forego");
                    m_Exclude.Add("foreknew", "foreknow");
                    m_Exclude.Add("foreknown", "foreknow");
                    m_Exclude.Add("foreran", "forerun");
                    m_Exclude.Add("forerunning", "forerun");
                    m_Exclude.Add("foresaw", "foresee");
                    m_Exclude.Add("foreseen", "foresee");
                    m_Exclude.Add("foreshown", "foreshow");
                    m_Exclude.Add("forespoke", "forespeak");
                    m_Exclude.Add("forespoken", "forespeak");
                    m_Exclude.Add("foretold", "foretell");
                    m_Exclude.Add("forewent", "forego");
                    m_Exclude.Add("forgave", "forgive");
                    m_Exclude.Add("forgetting", "forget");
                    m_Exclude.Add("forgiven", "forgive");
                    m_Exclude.Add("forgone", "forgo");
                    m_Exclude.Add("forgot", "forget");
                    m_Exclude.Add("forgotten", "forget");
                    m_Exclude.Add("formatted", "format");
                    m_Exclude.Add("formatting", "format");
                    m_Exclude.Add("forsaken", "forsake");
                    m_Exclude.Add("forsook", "forsake");
                    m_Exclude.Add("forspoke", "forspeak");
                    m_Exclude.Add("forspoken", "forspeak");
                    m_Exclude.Add("forswore", "forswear");
                    m_Exclude.Add("forsworn", "forswear");
                    m_Exclude.Add("fortified", "fortify");
                    m_Exclude.Add("forwent", "forgo");
                    m_Exclude.Add("fought", "fight");
                    m_Exclude.Add("found", "find");
                    m_Exclude.Add("foxtrotted", "foxtrot");
                    m_Exclude.Add("foxtrotting", "foxtrot");
                    m_Exclude.Add("frapped", "frap");
                    m_Exclude.Add("frapping", "frap");
                    m_Exclude.Add("freeze-dried", "freeze-dry");
                    m_Exclude.Add("frenchified", "frenchify");
                    m_Exclude.Add("frenzied", "frenzy");
                    m_Exclude.Add("fretted", "fret");
                    m_Exclude.Add("fretting", "fret");
                    m_Exclude.Add("fried", "fry");
                    m_Exclude.Add("frigged", "frig");
                    m_Exclude.Add("frigging", "frig");
                    m_Exclude.Add("fritted", "frit");
                    m_Exclude.Add("fritting", "frit");
                    m_Exclude.Add("frivolled", "frivol");
                    m_Exclude.Add("frivolling", "frivol");
                    m_Exclude.Add("frogged", "frog");
                    m_Exclude.Add("frogging", "frog");
                    m_Exclude.Add("frolicked", "frolic");
                    m_Exclude.Add("frolicking", "frolic");
                    m_Exclude.Add("froze", "freeze");
                    m_Exclude.Add("frozen", "freeze");
                    m_Exclude.Add("fructified", "fructify");
                    m_Exclude.Add("fuelled", "fuel");
                    m_Exclude.Add("fuelling", "fuel");
                    m_Exclude.Add("fulfilled", "fulfil");
                    m_Exclude.Add("fulfilling", "fulfil");
                    m_Exclude.Add("funned", "fun");
                    m_Exclude.Add("funnelled", "funnel");
                    m_Exclude.Add("funnelling", "funnel");
                    m_Exclude.Add("funning", "fun");
                    m_Exclude.Add("furred", "fur");
                    m_Exclude.Add("furring", "fur");
                    m_Exclude.Add("gadded", "gad");
                    m_Exclude.Add("gadding", "gad");
                    m_Exclude.Add("gagged", "gag");
                    m_Exclude.Add("gagging", "gag");
                    m_Exclude.Add("gainsaid", "gainsay");
                    m_Exclude.Add("gambolled", "gambol");
                    m_Exclude.Add("gambolling", "gambol");
                    m_Exclude.Add("gammed", "gam");
                    m_Exclude.Add("gamming", "gam");
                    m_Exclude.Add("gan", "gin");
                    m_Exclude.Add("ganned", "gan");
                    m_Exclude.Add("ganning", "gan");
                    m_Exclude.Add("gapped", "gap");
                    m_Exclude.Add("gapping", "gap");
                    m_Exclude.Add("gasified", "gasify");
                    m_Exclude.Add("gassed", "gas");
                    m_Exclude.Add("gasses", "gas");
                    m_Exclude.Add("gassing", "gas");
                    m_Exclude.Add("gave", "give");
                    m_Exclude.Add("gelled", "gel");
                    m_Exclude.Add("gelling", "gel");
                    m_Exclude.Add("gelt", "geld");
                    m_Exclude.Add("gemmed", "gem");
                    m_Exclude.Add("gemming", "gem");
                    m_Exclude.Add("genned-up", "gen-up");
                    m_Exclude.Add("genning-up", "gen-up");
                    m_Exclude.Add("gens-up", "gen-up");
                    m_Exclude.Add("gets_lost", "get_lost");
                    m_Exclude.Add("gets_started", "get_started");
                    m_Exclude.Add("getting", "get");
                    m_Exclude.Add("getting_lost", "get_lost");
                    m_Exclude.Add("getting_started", "get_started");
                    m_Exclude.Add("ghostwritten", "ghostwrite");
                    m_Exclude.Add("ghostwrote", "ghostwrite");
                    m_Exclude.Add("gibbed", "gib");
                    m_Exclude.Add("gibbing", "gib");
                    m_Exclude.Add("giddied", "giddy");
                    m_Exclude.Add("giftwrapped", "giftwrap");
                    m_Exclude.Add("giftwrapping", "giftwrap");
                    m_Exclude.Add("gigged", "gig");
                    m_Exclude.Add("gigging", "gig");
                    m_Exclude.Add("gilt", "gild");
                    m_Exclude.Add("ginned", "gin");
                    m_Exclude.Add("ginning", "gin");
                    m_Exclude.Add("gipped", "gip");
                    m_Exclude.Add("gipping", "gip");
                    m_Exclude.Add("girt", "gird");
                    m_Exclude.Add("given", "give");
                    m_Exclude.Add("glommed", "glom");
                    m_Exclude.Add("glomming", "glom");
                    m_Exclude.Add("gloried", "glory");
                    m_Exclude.Add("glorified", "glorify");
                    m_Exclude.Add("glutted", "glut");
                    m_Exclude.Add("glutting", "glut");
                    m_Exclude.Add("gnawn", "gnaw");
                    m_Exclude.Add("goes_deep", "go_deep");
                    m_Exclude.Add("going_deep", "go_deep");
                    m_Exclude.Add("gollied", "golly");
                    m_Exclude.Add("gone", "go");
                    m_Exclude.Add("gone_deep", "go_deep");
                    m_Exclude.Add("goose-stepped", "goose-step");
                    m_Exclude.Add("goose-stepping", "goose-step");
                    m_Exclude.Add("got", "get");
                    m_Exclude.Add("got_lost", "get_lost");
                    m_Exclude.Add("got_started", "get_started");
                    m_Exclude.Add("gotten", "get");
                    m_Exclude.Add("gotten_lost", "get_lost");
                    m_Exclude.Add("grabbed", "grab");
                    m_Exclude.Add("grabbing", "grab");
                    m_Exclude.Add("gratified", "gratify");
                    m_Exclude.Add("gravelled", "gravel");
                    m_Exclude.Add("gravelling", "gravel");
                    m_Exclude.Add("graven", "grave");
                    m_Exclude.Add("grew", "grow");
                    m_Exclude.Add("grinned", "grin");
                    m_Exclude.Add("grinning", "grin");
                    m_Exclude.Add("gripped", "grip");
                    m_Exclude.Add("gripping", "grip");
                    m_Exclude.Add("gript", "grip");
                    m_Exclude.Add("gritted", "grit");
                    m_Exclude.Add("gritting", "grit");
                    m_Exclude.Add("ground", "grind");
                    m_Exclude.Add("grovelled", "grovel");
                    m_Exclude.Add("grovelling", "grovel");
                    m_Exclude.Add("grown", "grow");
                    m_Exclude.Add("grubbed", "grub");
                    m_Exclude.Add("grubbing", "grub");
                    m_Exclude.Add("guarantied", "guaranty");
                    m_Exclude.Add("gullied", "gully");
                    m_Exclude.Add("gummed", "gum");
                    m_Exclude.Add("gumming", "gum");
                    m_Exclude.Add("gunned", "gun");
                    m_Exclude.Add("gunning", "gun");
                    m_Exclude.Add("gypped", "gyp");
                    m_Exclude.Add("gypping", "gyp");
                    m_Exclude.Add("hacksawn", "hacksaw");
                    m_Exclude.Add("had", "have");
                    m_Exclude.Add("had_a_feeling", "have_a_feeling");
                    m_Exclude.Add("had_left", "have_left");
                    m_Exclude.Add("had_the_feeling", "have_the_feeling");
                    m_Exclude.Add("hammed", "ham");
                    m_Exclude.Add("hamming", "ham");
                    m_Exclude.Add("hamstrung", "hamstring");
                    m_Exclude.Add("hand-knitted", "hand-knit");
                    m_Exclude.Add("hand-knitting", "hand-knit");
                    m_Exclude.Add("handfed", "handfeed");
                    m_Exclude.Add("handicapped", "handicap");
                    m_Exclude.Add("handicapping", "handicap");
                    m_Exclude.Add("handselled", "handsel");
                    m_Exclude.Add("handselling", "handsel");
                    m_Exclude.Add("harried", "harry");
                    m_Exclude.Add("has", "have");
                    m_Exclude.Add("has_a_feeling", "have_a_feeling");
                    m_Exclude.Add("has_left", "have_left");
                    m_Exclude.Add("has_the_feeling", "have_the_feeling");
                    m_Exclude.Add("hatchelled", "hatchel");
                    m_Exclude.Add("hatchelling", "hatchel");
                    m_Exclude.Add("hatted", "hat");
                    m_Exclude.Add("hatting", "hat");
                    m_Exclude.Add("having_a_feeling", "have_a_feeling");
                    m_Exclude.Add("having_left", "have_left");
                    m_Exclude.Add("having_the_feeling", "have_the_feeling");
                    m_Exclude.Add("heard", "hear");
                    m_Exclude.Add("hedgehopped", "hedgehop");
                    m_Exclude.Add("hedgehopping", "hedgehop");
                    m_Exclude.Add("held", "hold");
                    m_Exclude.Add("hemmed", "hem");
                    m_Exclude.Add("hemming", "hem");
                    m_Exclude.Add("hewn", "hew");
                    m_Exclude.Add("hiccupped", "hiccup");
                    m_Exclude.Add("hiccupping", "hiccup");
                    m_Exclude.Add("hid", "hide");
                    m_Exclude.Add("hidden", "hide");
                    m_Exclude.Add("high-hatted", "high-hat");
                    m_Exclude.Add("high-hatting", "high-hat");
                    m_Exclude.Add("hinnied", "hinny");
                    m_Exclude.Add("hitting", "hit");
                    m_Exclude.Add("hobbed", "hob");
                    m_Exclude.Add("hobbing", "hob");
                    m_Exclude.Add("hobnobbed", "hobnob");
                    m_Exclude.Add("hobnobbing", "hobnob");
                    m_Exclude.Add("hocus-pocussed", "hocus-pocus");
                    m_Exclude.Add("hocus-pocussing", "hocus-pocus");
                    m_Exclude.Add("hocussed", "hocus");
                    m_Exclude.Add("hocussing", "hocus");
                    m_Exclude.Add("hogged", "hog");
                    m_Exclude.Add("hogging", "hog");
                    m_Exclude.Add("hogtying", "hogtie");
                    m_Exclude.Add("honied", "honey");
                    m_Exclude.Add("hopped", "hop");
                    m_Exclude.Add("hopping", "hop");
                    m_Exclude.Add("horrified", "horrify");
                    m_Exclude.Add("horsewhipped", "horsewhip");
                    m_Exclude.Add("horsewhipping", "horsewhip");
                    m_Exclude.Add("houselled", "housel");
                    m_Exclude.Add("houselling", "housel");
                    m_Exclude.Add("hove", "heave");
                    m_Exclude.Add("hovelled", "hovel");
                    m_Exclude.Add("hovelling", "hovel");
                    m_Exclude.Add("hugged", "hug");
                    m_Exclude.Add("hugging", "hug");
                    m_Exclude.Add("humbugged", "humbug");
                    m_Exclude.Add("humbugging", "humbug");
                    m_Exclude.Add("humidified", "humidify");
                    m_Exclude.Add("hummed", "hum");
                    m_Exclude.Add("humming", "hum");
                    m_Exclude.Add("hung", "hang");
                    m_Exclude.Add("hurried", "hurry");
                    m_Exclude.Add("hypertrophied", "hypertrophy");
                    m_Exclude.Add("identified", "identify");
                    m_Exclude.Add("imbedded", "imbed");
                    m_Exclude.Add("imbedding", "imbed");
                    m_Exclude.Add("impanelled", "impanel");
                    m_Exclude.Add("impanelling", "impanel");
                    m_Exclude.Add("impelled", "impel");
                    m_Exclude.Add("impelling", "impel");
                    m_Exclude.Add("implied", "imply");
                    m_Exclude.Add("inbred", "inbreed");
                    m_Exclude.Add("incurred", "incur");
                    m_Exclude.Add("incurring", "incur");
                    m_Exclude.Add("indemnified", "indemnify");
                    m_Exclude.Add("indwelt", "indwell");
                    m_Exclude.Add("inferred", "infer");
                    m_Exclude.Add("inferring", "infer");
                    m_Exclude.Add("initialled", "initial");
                    m_Exclude.Add("initialling", "initial");
                    m_Exclude.Add("inlaid", "inlay");
                    m_Exclude.Add("insetting", "inset");
                    m_Exclude.Add("inspanned", "inspan");
                    m_Exclude.Add("inspanning", "inspan");
                    m_Exclude.Add("installed", "instal");
                    m_Exclude.Add("installing", "instal");
                    m_Exclude.Add("intensified", "intensify");
                    m_Exclude.Add("interbred", "interbreed");
                    m_Exclude.Add("intercropped", "intercrop");
                    m_Exclude.Add("intercropping", "intercrop");
                    m_Exclude.Add("intercutting", "intercut");
                    m_Exclude.Add("interlaid", "interlay");
                    m_Exclude.Add("interlapped", "interlap");
                    m_Exclude.Add("interlapping", "interlap");
                    m_Exclude.Add("intermarried", "intermarry");
                    m_Exclude.Add("intermitted", "intermit");
                    m_Exclude.Add("intermitting", "intermit");
                    m_Exclude.Add("interpled", "interplead");
                    m_Exclude.Add("interred", "inter");
                    m_Exclude.Add("interring", "inter");
                    m_Exclude.Add("interstratified", "interstratify");
                    m_Exclude.Add("interwove", "interweave");
                    m_Exclude.Add("interwoven", "interweave");
                    m_Exclude.Add("intromitted", "intromit");
                    m_Exclude.Add("intromitting", "intromit");
                    m_Exclude.Add("inwove", "inweave");
                    m_Exclude.Add("inwoven", "inweave");
                    m_Exclude.Add("inwrapped", "inwrap");
                    m_Exclude.Add("inwrapping", "inwrap");
                    m_Exclude.Add("is", "be");
                    m_Exclude.Add("jabbed", "jab");
                    m_Exclude.Add("jabbing", "jab");
                    m_Exclude.Add("jagged", "jag");
                    m_Exclude.Add("jagging", "jag");
                    m_Exclude.Add("jammed", "jam");
                    m_Exclude.Add("jamming", "jam");
                    m_Exclude.Add("japanned", "japan");
                    m_Exclude.Add("japanning", "japan");
                    m_Exclude.Add("jarred", "jar");
                    m_Exclude.Add("jarring", "jar");
                    m_Exclude.Add("jellied", "jelly");
                    m_Exclude.Add("jellified", "jellify");
                    m_Exclude.Add("jemmied", "jemmy");
                    m_Exclude.Add("jerry-built", "jerry-build");
                    m_Exclude.Add("jetted", "jet");
                    m_Exclude.Add("jetting", "jet");
                    m_Exclude.Add("jewelled", "jewel");
                    m_Exclude.Add("jewelling", "jewel");
                    m_Exclude.Add("jibbed", "jib");
                    m_Exclude.Add("jibbing", "jib");
                    m_Exclude.Add("jigged", "jig");
                    m_Exclude.Add("jigging", "jig");
                    m_Exclude.Add("jimmied", "jimmy");
                    m_Exclude.Add("jitterbugged", "jitterbug");
                    m_Exclude.Add("jitterbugging", "jitterbug");
                    m_Exclude.Add("jobbed", "job");
                    m_Exclude.Add("jobbing", "job");
                    m_Exclude.Add("jog-trotted", "jog-trot");
                    m_Exclude.Add("jog-trotting", "jog-trot");
                    m_Exclude.Add("jogged", "jog");
                    m_Exclude.Add("jogging", "jog");
                    m_Exclude.Add("joined_battle", "join_battle");
                    m_Exclude.Add("joined_forces", "join_forces");
                    m_Exclude.Add("joining_battle", "join_battle");
                    m_Exclude.Add("joining_forces", "join_forces");
                    m_Exclude.Add("joins_battle", "join_battle");
                    m_Exclude.Add("joins_forces", "join_forces");
                    m_Exclude.Add("jollied", "jolly");
                    m_Exclude.Add("jollified", "jollify");
                    m_Exclude.Add("jotted", "jot");
                    m_Exclude.Add("jotting", "jot");
                    m_Exclude.Add("joy-ridden", "joy-ride");
                    m_Exclude.Add("joy-rode", "joy-ride");
                    m_Exclude.Add("joypopped", "joypop");
                    m_Exclude.Add("joypopping", "joypop");
                    m_Exclude.Add("jugged", "jug");
                    m_Exclude.Add("jugging", "jug");
                    m_Exclude.Add("jumped_off", "jump_off");
                    m_Exclude.Add("jumping_off", "jump_off");
                    m_Exclude.Add("jumps_off", "jump_off");
                    m_Exclude.Add("justified", "justify");
                    m_Exclude.Add("jutted", "jut");
                    m_Exclude.Add("jutting", "jut");
                    m_Exclude.Add("kenned", "ken");
                    m_Exclude.Add("kennelled", "kennel");
                    m_Exclude.Add("kennelling", "kennel");
                    m_Exclude.Add("kenning", "ken");
                    m_Exclude.Add("kent", "ken");
                    m_Exclude.Add("kept", "keep");
                    m_Exclude.Add("kernelled", "kernel");
                    m_Exclude.Add("kernelling", "kernel");
                    m_Exclude.Add("kidded", "kid");
                    m_Exclude.Add("kidding", "kid");
                    m_Exclude.Add("kidnapped", "kidnap");
                    m_Exclude.Add("kidnapping", "kidnap");
                    m_Exclude.Add("kipped", "kip");
                    m_Exclude.Add("kipping", "kip");
                    m_Exclude.Add("knapped", "knap");
                    m_Exclude.Add("knapping", "knap");
                    m_Exclude.Add("kneecapped", "kneecap");
                    m_Exclude.Add("kneecapping", "kneecap");
                    m_Exclude.Add("knelt", "kneel");
                    m_Exclude.Add("knew", "know");
                    m_Exclude.Add("knitted", "knit");
                    m_Exclude.Add("knitting", "knit");
                    m_Exclude.Add("knobbed", "knob");
                    m_Exclude.Add("knobbing", "knob");
                    m_Exclude.Add("knotted", "knot");
                    m_Exclude.Add("knotting", "knot");
                    m_Exclude.Add("known", "know");
                    m_Exclude.Add("ko'd", "ko");
                    m_Exclude.Add("ko'ing", "ko");
                    m_Exclude.Add("ko's", "ko");
                    m_Exclude.Add("labelled", "label");
                    m_Exclude.Add("labelling", "label");
                    m_Exclude.Add("laden", "lade");
                    m_Exclude.Add("ladyfied", "ladify");
                    m_Exclude.Add("ladyfies", "ladify");
                    m_Exclude.Add("ladyfying", "ladify");
                    m_Exclude.Add("lagged", "lag");
                    m_Exclude.Add("lagging", "lag");
                    m_Exclude.Add("laid", "lay");
                    m_Exclude.Add("lain", "lie");
                    m_Exclude.Add("lallygagged", "lallygag");
                    m_Exclude.Add("lallygagging", "lallygag");
                    m_Exclude.Add("lammed", "lam");
                    m_Exclude.Add("lamming", "lam");
                    m_Exclude.Add("lapidified", "lapidify");
                    m_Exclude.Add("lapped", "lap");
                    m_Exclude.Add("lapping", "lap");
                    m_Exclude.Add("laurelled", "laurel");
                    m_Exclude.Add("laurelling", "laurel");
                    m_Exclude.Add("lay", "lie");
                    m_Exclude.Add("layed_for", "lie_for");
                    m_Exclude.Add("laying_for", "lie_for");
                    m_Exclude.Add("lays_for", "lie_for");
                    m_Exclude.Add("leant", "lean");
                    m_Exclude.Add("leapfrogged", "leapfrog");
                    m_Exclude.Add("leapfrogging", "leapfrog");
                    m_Exclude.Add("leapt", "leap");
                    m_Exclude.Add("learnt", "learn");
                    m_Exclude.Add("leaves_undone", "leave_undone");
                    m_Exclude.Add("leaving_undone", "leave_undone");
                    m_Exclude.Add("led", "lead");
                    m_Exclude.Add("left", "leave");
                    m_Exclude.Add("left_undone", "leave_undone");
                    m_Exclude.Add("lent", "lend");
                    m_Exclude.Add("letting", "let");
                    m_Exclude.Add("levelled", "level");
                    m_Exclude.Add("levelling", "level");
                    m_Exclude.Add("levied", "levy");
                    m_Exclude.Add("libelled", "libel");
                    m_Exclude.Add("libelling", "libel");
                    m_Exclude.Add("lignified", "lignify");
                    m_Exclude.Add("lipped", "lip");
                    m_Exclude.Add("lipping", "lip");
                    m_Exclude.Add("liquefied", "liquefy");
                    m_Exclude.Add("liquified", "liquify");
                    m_Exclude.Add("lit", "light");
                    m_Exclude.Add("lobbed", "lob");
                    m_Exclude.Add("lobbied", "lobby");
                    m_Exclude.Add("lobbing", "lob");
                    m_Exclude.Add("logged", "log");
                    m_Exclude.Add("logging", "log");
                    m_Exclude.Add("looked_towards", "look_towards");
                    m_Exclude.Add("looking_towards", "look_towards");
                    m_Exclude.Add("looks_towards", "look_towards");
                    m_Exclude.Add("lopped", "lop");
                    m_Exclude.Add("lopping", "lop");
                    m_Exclude.Add("lost", "lose");
                    m_Exclude.Add("lotted", "lot");
                    m_Exclude.Add("lotting", "lot");
                    m_Exclude.Add("lugged", "lug");
                    m_Exclude.Add("lugging", "lug");
                    m_Exclude.Add("lullabied", "lullaby");
                    m_Exclude.Add("lying", "lie");
                    m_Exclude.Add("machine-gunned", "machine-gun");
                    m_Exclude.Add("machine-gunning", "machine-gun");
                    m_Exclude.Add("madded", "mad");
                    m_Exclude.Add("madding", "mad");
                    m_Exclude.Add("made", "make");
                    m_Exclude.Add("magnified", "magnify");
                    m_Exclude.Add("manned", "man");
                    m_Exclude.Add("manning", "man");
                    m_Exclude.Add("manumitted", "manumit");
                    m_Exclude.Add("manumitting", "manumit");
                    m_Exclude.Add("mapped", "map");
                    m_Exclude.Add("mapping", "map");
                    m_Exclude.Add("marcelled", "marcel");
                    m_Exclude.Add("marcelling", "marcel");
                    m_Exclude.Add("marred", "mar");
                    m_Exclude.Add("married", "marry");
                    m_Exclude.Add("marring", "mar");
                    m_Exclude.Add("marshalled", "marshal");
                    m_Exclude.Add("marshalling", "marshal");
                    m_Exclude.Add("marvelled", "marvel");
                    m_Exclude.Add("marvelling", "marvel");
                    m_Exclude.Add("matted", "mat");
                    m_Exclude.Add("matting", "mat");
                    m_Exclude.Add("meant", "mean");
                    m_Exclude.Add("medalled", "medal");
                    m_Exclude.Add("medalling", "medal");
                    m_Exclude.Add("met", "meet");
                    m_Exclude.Add("metalled", "metal");
                    m_Exclude.Add("metalling", "metal");
                    m_Exclude.Add("metrified", "metrify");
                    m_Exclude.Add("might", "may");
                    m_Exclude.Add("militated_against", "militate_against");
                    m_Exclude.Add("militates_against", "militate_against");
                    m_Exclude.Add("militating_against", "militate_against");
                    m_Exclude.Add("mimicked", "mimic");
                    m_Exclude.Add("mimicking", "mimic");
                    m_Exclude.Add("minified", "minify");
                    m_Exclude.Add("misapplied", "misapply");
                    m_Exclude.Add("misbecame", "misbecome");
                    m_Exclude.Add("miscarried", "miscarry");
                    m_Exclude.Add("misdealt", "misdeal");
                    m_Exclude.Add("misfitted", "misfit");
                    m_Exclude.Add("misfitting", "misfit");
                    m_Exclude.Add("misgave", "misgive");
                    m_Exclude.Add("misgiven", "misgive");
                    m_Exclude.Add("mishitting", "mishit");
                    m_Exclude.Add("mislaid", "mislay");
                    m_Exclude.Add("misled", "mislead");
                    m_Exclude.Add("mispled", "misplead");
                    m_Exclude.Add("misspelt", "misspell");
                    m_Exclude.Add("misspent", "misspend");
                    m_Exclude.Add("mistaken", "mistake");
                    m_Exclude.Add("mistook", "mistake");
                    m_Exclude.Add("misunderstood", "misunderstand");
                    m_Exclude.Add("mobbed", "mob");
                    m_Exclude.Add("mobbing", "mob");
                    m_Exclude.Add("modelled", "model");
                    m_Exclude.Add("modelling", "model");
                    m_Exclude.Add("modified", "modify");
                    m_Exclude.Add("mollified", "mollify");
                    m_Exclude.Add("molten", "melt");
                    m_Exclude.Add("mopped", "mop");
                    m_Exclude.Add("mopping", "mop");
                    m_Exclude.Add("mortified", "mortify");
                    m_Exclude.Add("mown", "mow");
                    m_Exclude.Add("mudded", "mud");
                    m_Exclude.Add("muddied", "muddy");
                    m_Exclude.Add("mudding", "mud");
                    m_Exclude.Add("mugged", "mug");
                    m_Exclude.Add("mugging", "mug");
                    m_Exclude.Add("multiplied", "multiply");
                    m_Exclude.Add("mummed", "mum");
                    m_Exclude.Add("mummified", "mummify");
                    m_Exclude.Add("mumming", "mum");
                    m_Exclude.Add("mutinied", "mutiny");
                    m_Exclude.Add("mystified", "mystify");
                    m_Exclude.Add("nabbed", "nab");
                    m_Exclude.Add("nabbing", "nab");
                    m_Exclude.Add("nagged", "nag");
                    m_Exclude.Add("nagging", "nag");
                    m_Exclude.Add("napped", "nap");
                    m_Exclude.Add("napping", "nap");
                    m_Exclude.Add("netted", "net");
                    m_Exclude.Add("netting", "net");
                    m_Exclude.Add("nibbed", "nib");
                    m_Exclude.Add("nibbing", "nib");
                    m_Exclude.Add("nickelled", "nickel");
                    m_Exclude.Add("nickelling", "nickel");
                    m_Exclude.Add("nid-nodded", "nid-nod");
                    m_Exclude.Add("nid-nodding", "nid-nod");
                    m_Exclude.Add("nidified", "nidify");
                    m_Exclude.Add("nigrified", "nigrify");
                    m_Exclude.Add("nipped", "nip");
                    m_Exclude.Add("nipping", "nip");
                    m_Exclude.Add("nitrified", "nitrify");
                    m_Exclude.Add("nodded", "nod");
                    m_Exclude.Add("nodding", "nod");
                    m_Exclude.Add("non-prossed", "non-pros");
                    m_Exclude.Add("non-prosses", "non-pros");
                    m_Exclude.Add("non-prossing", "non-pros");
                    m_Exclude.Add("nonplussed", "nonplus");
                    m_Exclude.Add("nonplusses", "nonplus");
                    m_Exclude.Add("nonplussing", "nonplus");
                    m_Exclude.Add("notified", "notify");
                    m_Exclude.Add("nullified", "nullify");
                    m_Exclude.Add("nutted", "nut");
                    m_Exclude.Add("nutting", "nut");
                    m_Exclude.Add("objectified", "objectify");
                    m_Exclude.Add("occupied", "occupy");
                    m_Exclude.Add("occurred", "occur");
                    m_Exclude.Add("occurring", "occur");
                    m_Exclude.Add("offsetting", "offset");
                    m_Exclude.Add("omitted", "omit");
                    m_Exclude.Add("omitting", "omit");
                    m_Exclude.Add("ossified", "ossify");
                    m_Exclude.Add("outbidden", "outbid");
                    m_Exclude.Add("outbidding", "outbid");
                    m_Exclude.Add("outbred", "outbreed");
                    m_Exclude.Add("outcried", "outcry");
                    m_Exclude.Add("outcropped", "outcrop");
                    m_Exclude.Add("outcropping", "outcrop");
                    m_Exclude.Add("outdid", "outdo");
                    m_Exclude.Add("outdone", "outdo");
                    m_Exclude.Add("outdrawn", "outdraw");
                    m_Exclude.Add("outdrew", "outdraw");
                    m_Exclude.Add("outfitted", "outfit");
                    m_Exclude.Add("outfitting", "outfit");
                    m_Exclude.Add("outfought", "outfight");
                    m_Exclude.Add("outgassed", "outgas");
                    m_Exclude.Add("outgasses", "outgas");
                    m_Exclude.Add("outgassing", "outgas");
                    m_Exclude.Add("outgeneralled", "outgeneral");
                    m_Exclude.Add("outgeneralling", "outgeneral");
                    m_Exclude.Add("outgone", "outgo");
                    m_Exclude.Add("outgrew", "outgrow");
                    m_Exclude.Add("outgrown", "outgrow");
                    m_Exclude.Add("outlaid", "outlay");
                    m_Exclude.Add("outmanned", "outman");
                    m_Exclude.Add("outmanning", "outman");
                    m_Exclude.Add("outputted", "output");
                    m_Exclude.Add("outputting", "output");
                    m_Exclude.Add("outran", "outrun");
                    m_Exclude.Add("outridden", "outride");
                    m_Exclude.Add("outrode", "outride");
                    m_Exclude.Add("outrunning", "outrun");
                    m_Exclude.Add("outshone", "outshine");
                    m_Exclude.Add("outshot", "outshoot");
                    m_Exclude.Add("outsold", "outsell");
                    m_Exclude.Add("outspanned", "outspan");
                    m_Exclude.Add("outspanning", "outspan");
                    m_Exclude.Add("outstood", "outstand");
                    m_Exclude.Add("outstripped", "outstrip");
                    m_Exclude.Add("outstripping", "outstrip");
                    m_Exclude.Add("outthought", "outthink");
                    m_Exclude.Add("outwent", "outgo");
                    m_Exclude.Add("outwitted", "outwit");
                    m_Exclude.Add("outwitting", "outwit");
                    m_Exclude.Add("outwore", "outwear");
                    m_Exclude.Add("outworn", "outwear");
                    m_Exclude.Add("overbidden", "overbid");
                    m_Exclude.Add("overbidding", "overbid");
                    m_Exclude.Add("overblew", "overblow");
                    m_Exclude.Add("overblown", "overblow");
                    m_Exclude.Add("overbore", "overbear");
                    m_Exclude.Add("overborne", "overbear");
                    m_Exclude.Add("overbuilt", "overbuild");
                    m_Exclude.Add("overcame", "overcome");
                    m_Exclude.Add("overcropped", "overcrop");
                    m_Exclude.Add("overcropping", "overcrop");
                    m_Exclude.Add("overdid", "overdo");
                    m_Exclude.Add("overdone", "overdo");
                    m_Exclude.Add("overdrawn", "overdraw");
                    m_Exclude.Add("overdrew", "overdraw");
                    m_Exclude.Add("overdriven", "overdrive");
                    m_Exclude.Add("overdrove", "overdrive");
                    m_Exclude.Add("overflew", "overfly");
                    m_Exclude.Add("overflown", "overflow");
                    m_Exclude.Add("overgrew", "overgrow");
                    m_Exclude.Add("overgrown", "overgrow");
                    m_Exclude.Add("overheard", "overhear");
                    m_Exclude.Add("overhung", "overhang");
                    m_Exclude.Add("overlaid", "overlay");
                    m_Exclude.Add("overlain", "overlie");
                    m_Exclude.Add("overlapped", "overlap");
                    m_Exclude.Add("overlapping", "overlap");
                    m_Exclude.Add("overlay", "overlie");
                    m_Exclude.Add("overlying", "overlie");
                    m_Exclude.Add("overmanned", "overman");
                    m_Exclude.Add("overmanning", "overman");
                    m_Exclude.Add("overpaid", "overpay");
                    m_Exclude.Add("overpast", "overpass");
                    m_Exclude.Add("overran", "overrun");
                    m_Exclude.Add("overridden", "override");
                    m_Exclude.Add("overrode", "override");
                    m_Exclude.Add("overrunning", "overrun");
                    m_Exclude.Add("oversaw", "oversee");
                    m_Exclude.Add("overseen", "oversee");
                    m_Exclude.Add("oversetting", "overset");
                    m_Exclude.Add("oversewn", "oversew");
                    m_Exclude.Add("overshot", "overshoot");
                    m_Exclude.Add("oversimplified", "oversimplify");
                    m_Exclude.Add("overslept", "oversleep");
                    m_Exclude.Add("oversold", "oversell");
                    m_Exclude.Add("overspent", "overspend");
                    m_Exclude.Add("overspilt", "overspill");
                    m_Exclude.Add("overstepped", "overstep");
                    m_Exclude.Add("overstepping", "overstep");
                    m_Exclude.Add("overtaken", "overtake");
                    m_Exclude.Add("overthrew", "overthrow");
                    m_Exclude.Add("overthrown", "overthrow");
                    m_Exclude.Add("overtook", "overtake");
                    m_Exclude.Add("overtopped", "overtop");
                    m_Exclude.Add("overtopping", "overtop");
                    m_Exclude.Add("overwound", "overwind");
                    m_Exclude.Add("overwritten", "overwrite");
                    m_Exclude.Add("overwrote", "overwrite");
                    m_Exclude.Add("pacified", "pacify");
                    m_Exclude.Add("padded", "pad");
                    m_Exclude.Add("padding", "pad");
                    m_Exclude.Add("paid", "pay");
                    m_Exclude.Add("palled", "pal");
                    m_Exclude.Add("palling", "pal");
                    m_Exclude.Add("palsied", "palsy");
                    m_Exclude.Add("pandied", "pandy");
                    m_Exclude.Add("panelled", "panel");
                    m_Exclude.Add("panelling", "panel");
                    m_Exclude.Add("panicked", "panic");
                    m_Exclude.Add("panicking", "panic");
                    m_Exclude.Add("panned", "pan");
                    m_Exclude.Add("panning", "pan");
                    m_Exclude.Add("parallelled", "parallel");
                    m_Exclude.Add("parallelling", "parallel");
                    m_Exclude.Add("parcelled", "parcel");
                    m_Exclude.Add("parcelling", "parcel");
                    m_Exclude.Add("parodied", "parody");
                    m_Exclude.Add("parried", "parry");
                    m_Exclude.Add("partaken", "partake");
                    m_Exclude.Add("partook", "partake");
                    m_Exclude.Add("pasquil", "pasquinade");
                    m_Exclude.Add("pasquilled", "pasquinade");
                    m_Exclude.Add("pasquilling", "pasquinade");
                    m_Exclude.Add("pasquils", "pasquinade");
                    m_Exclude.Add("patrolled", "patrol");
                    m_Exclude.Add("patrolling", "patrol");
                    m_Exclude.Add("patted", "pat");
                    m_Exclude.Add("patting", "pat");
                    m_Exclude.Add("pedalled", "pedal");
                    m_Exclude.Add("pedalling", "pedal");
                    m_Exclude.Add("pegged", "peg");
                    m_Exclude.Add("pegging", "peg");
                    m_Exclude.Add("pencilled", "pencil");
                    m_Exclude.Add("pencilling", "pencil");
                    m_Exclude.Add("penned", "pen");
                    m_Exclude.Add("penning", "pen");
                    m_Exclude.Add("pent", "pen");
                    m_Exclude.Add("pepped", "pep");
                    m_Exclude.Add("pepping", "pep");
                    m_Exclude.Add("permitted", "permit");
                    m_Exclude.Add("permitting", "permit");
                    m_Exclude.Add("personified", "personify");
                    m_Exclude.Add("petrified", "petrify");
                    m_Exclude.Add("petted", "pet");
                    m_Exclude.Add("pettifogged", "pettifog");
                    m_Exclude.Add("pettifogging", "pettifog");
                    m_Exclude.Add("petting", "pet");
                    m_Exclude.Add("phantasied", "phantasy");
                    m_Exclude.Add("photocopied", "photocopy");
                    m_Exclude.Add("photomapped", "photomap");
                    m_Exclude.Add("photomapping", "photomap");
                    m_Exclude.Add("photosetting", "photoset");
                    m_Exclude.Add("physicked", "physic");
                    m_Exclude.Add("physicking", "physic");
                    m_Exclude.Add("picnicked", "picnic");
                    m_Exclude.Add("picnicking", "picnic");
                    m_Exclude.Add("pigged", "pig");
                    m_Exclude.Add("pigging", "pig");
                    m_Exclude.Add("pilloried", "pillory");
                    m_Exclude.Add("pinch-hitting", "pinch-hit");
                    m_Exclude.Add("pinned", "pin");
                    m_Exclude.Add("pinning", "pin");
                    m_Exclude.Add("pipped", "pip");
                    m_Exclude.Add("pipping", "pip");
                    m_Exclude.Add("pistol-whipped", "pistol-whip");
                    m_Exclude.Add("pistol-whipping", "pistol-whip");
                    m_Exclude.Add("pistolled", "pistol");
                    m_Exclude.Add("pistolling", "pistol");
                    m_Exclude.Add("pitapatted", "pitapat");
                    m_Exclude.Add("pitapatting", "pitapat");
                    m_Exclude.Add("pitied", "pity");
                    m_Exclude.Add("pitted", "pit");
                    m_Exclude.Add("pitting", "pit");
                    m_Exclude.Add("planned", "plan");
                    m_Exclude.Add("planning", "plan");
                    m_Exclude.Add("platted", "plat");
                    m_Exclude.Add("platting", "plat");
                    m_Exclude.Add("played_a_part", "play_a_part");
                    m_Exclude.Add("playing_a_part", "play_a_part");
                    m_Exclude.Add("plays_a_part", "play_a_part");
                    m_Exclude.Add("pled", "plead");
                    m_Exclude.Add("plied", "ply");
                    m_Exclude.Add("plodded", "plod");
                    m_Exclude.Add("plodding", "plod");
                    m_Exclude.Add("plopped", "plop");
                    m_Exclude.Add("plopping", "plop");
                    m_Exclude.Add("plotted", "plot");
                    m_Exclude.Add("plotting", "plot");
                    m_Exclude.Add("plugged", "plug");
                    m_Exclude.Add("plugging", "plug");
                    m_Exclude.Add("podded", "pod");
                    m_Exclude.Add("podding", "pod");
                    m_Exclude.Add("pommelled", "pommel");
                    m_Exclude.Add("pommelling", "pommel");
                    m_Exclude.Add("popped", "pop");
                    m_Exclude.Add("popping", "pop");
                    m_Exclude.Add("potted", "pot");
                    m_Exclude.Add("potting", "pot");
                    m_Exclude.Add("preachified", "preachify");
                    m_Exclude.Add("precancelled", "precancel");
                    m_Exclude.Add("precancelling", "precancel");
                    m_Exclude.Add("preferred", "prefer");
                    m_Exclude.Add("preferring", "prefer");
                    m_Exclude.Add("preoccupied", "preoccupy");
                    m_Exclude.Add("prepaid", "prepay");
                    m_Exclude.Add("presignified", "presignify");
                    m_Exclude.Add("pretermitted", "pretermit");
                    m_Exclude.Add("pretermitting", "pretermit");
                    m_Exclude.Add("prettied", "pretty");
                    m_Exclude.Add("prettified", "prettify");
                    m_Exclude.Add("pried", "pry");
                    m_Exclude.Add("prigged", "prig");
                    m_Exclude.Add("prigging", "prig");
                    m_Exclude.Add("primmed", "prim");
                    m_Exclude.Add("primming", "prim");
                    m_Exclude.Add("prodded", "prod");
                    m_Exclude.Add("prodding", "prod");
                    m_Exclude.Add("programmed", "program");
                    m_Exclude.Add("programmes", "program");
                    m_Exclude.Add("programming", "program");
                    m_Exclude.Add("prologed", "prologue");
                    m_Exclude.Add("prologing", "prologue");
                    m_Exclude.Add("prologs", "prologue");
                    m_Exclude.Add("propelled", "propel");
                    m_Exclude.Add("propelling", "propel");
                    m_Exclude.Add("prophesied", "prophesy");
                    m_Exclude.Add("propped", "prop");
                    m_Exclude.Add("propping", "prop");
                    m_Exclude.Add("proven", "prove");
                    m_Exclude.Add("pubbed", "pub");
                    m_Exclude.Add("pubbing", "pub");
                    m_Exclude.Add("pugged", "pug");
                    m_Exclude.Add("pugging", "pug");
                    m_Exclude.Add("pummelled", "pummel");
                    m_Exclude.Add("pummelling", "pummel");
                    m_Exclude.Add("punned", "pun");
                    m_Exclude.Add("punning", "pun");
                    m_Exclude.Add("pupped", "pup");
                    m_Exclude.Add("pupping", "pup");
                    m_Exclude.Add("purified", "purify");
                    m_Exclude.Add("put-putted", "put-put");
                    m_Exclude.Add("put-putting", "put-put");
                    m_Exclude.Add("putrefied", "putrefy");
                    m_Exclude.Add("puttied", "putty");
                    m_Exclude.Add("putting", "put");
                    m_Exclude.Add("qualified", "qualify");
                    m_Exclude.Add("quantified", "quantify");
                    m_Exclude.Add("quarrelled", "quarrel");
                    m_Exclude.Add("quarrelling", "quarrel");
                    m_Exclude.Add("quarried", "quarry");
                    m_Exclude.Add("quartersawn", "quartersaw");
                    m_Exclude.Add("queried", "query");
                    m_Exclude.Add("quick-froze", "quick-freeze");
                    m_Exclude.Add("quick-frozen", "quick-freeze");
                    m_Exclude.Add("quickstepped", "quickstep");
                    m_Exclude.Add("quickstepping", "quickstep");
                    m_Exclude.Add("quipped", "quip");
                    m_Exclude.Add("quipping", "quip");
                    m_Exclude.Add("quitted", "quit");
                    m_Exclude.Add("quitting", "quit");
                    m_Exclude.Add("quizzed", "quiz");
                    m_Exclude.Add("quizzes", "quiz");
                    m_Exclude.Add("quizzing", "quiz");
                    m_Exclude.Add("ragged", "rag");
                    m_Exclude.Add("ragging", "rag");
                    m_Exclude.Add("rallied", "rally");
                    m_Exclude.Add("ramified", "ramify");
                    m_Exclude.Add("rammed", "ram");
                    m_Exclude.Add("ramming", "ram");
                    m_Exclude.Add("ran", "run");
                    m_Exclude.Add("rang", "ring");
                    m_Exclude.Add("rapped", "rap");
                    m_Exclude.Add("rappelled", "rappel");
                    m_Exclude.Add("rappelling", "rappel");
                    m_Exclude.Add("rapping", "rap");
                    m_Exclude.Add("rarefied", "rarefy");
                    m_Exclude.Add("ratified", "ratify");
                    m_Exclude.Add("ratted", "rat");
                    m_Exclude.Add("ratting", "rat");
                    m_Exclude.Add("ravelled", "ravel");
                    m_Exclude.Add("ravelling", "ravel");
                    m_Exclude.Add("razor-cutting", "razor-cut");
                    m_Exclude.Add("re-trod", "re-tread");
                    m_Exclude.Add("re-trodden", "re-tread");
                    m_Exclude.Add("rebelled", "rebel");
                    m_Exclude.Add("rebelling", "rebel");
                    m_Exclude.Add("rebuilt", "rebuild");
                    m_Exclude.Add("rebutted", "rebut");
                    m_Exclude.Add("rebutting", "rebut");
                    m_Exclude.Add("recapped", "recap");
                    m_Exclude.Add("recapping", "recap");
                    m_Exclude.Add("reclassified", "reclassify");
                    m_Exclude.Add("recommitted", "recommit");
                    m_Exclude.Add("recommitting", "recommit");
                    m_Exclude.Add("recopied", "recopy");
                    m_Exclude.Add("rectified", "rectify");
                    m_Exclude.Add("recurred", "recur");
                    m_Exclude.Add("recurring", "recur");
                    m_Exclude.Add("red-pencilled", "red-pencil");
                    m_Exclude.Add("red-pencilling", "red-pencil");
                    m_Exclude.Add("redded", "red");
                    m_Exclude.Add("redding", "red");
                    m_Exclude.Add("redid", "redo");
                    m_Exclude.Add("redone", "redo");
                    m_Exclude.Add("referred", "refer");
                    m_Exclude.Add("referring", "refer");
                    m_Exclude.Add("refitted", "refit");
                    m_Exclude.Add("refitting", "refit");
                    m_Exclude.Add("reft", "reave");
                    m_Exclude.Add("refuelled", "refuel");
                    m_Exclude.Add("refuelling", "refuel");
                    m_Exclude.Add("regretted", "regret");
                    m_Exclude.Add("regretting", "regret");
                    m_Exclude.Add("reheard", "rehear");
                    m_Exclude.Add("reified", "reify");
                    m_Exclude.Add("relied", "rely");
                    m_Exclude.Add("remade", "remake");
                    m_Exclude.Add("remarried", "remarry");
                    m_Exclude.Add("remitted", "remit");
                    m_Exclude.Add("remitting", "remit");
                    m_Exclude.Add("rent", "rend");
                    m_Exclude.Add("repaid", "repay");
                    m_Exclude.Add("repelled", "repel");
                    m_Exclude.Add("repelling", "repel");
                    m_Exclude.Add("replevied", "replevy");
                    m_Exclude.Add("replied", "reply");
                    m_Exclude.Add("repotted", "repot");
                    m_Exclude.Add("repotting", "repot");
                    m_Exclude.Add("reran", "rerun");
                    m_Exclude.Add("rerunning", "rerun");
                    m_Exclude.Add("resat", "resit");
                    m_Exclude.Add("resetting", "reset");
                    m_Exclude.Add("resewn", "resew");
                    m_Exclude.Add("resitting", "resit");
                    m_Exclude.Add("retaken", "retake");
                    m_Exclude.Add("rethought", "rethink");
                    m_Exclude.Add("retold", "retell");
                    m_Exclude.Add("retook", "retake");
                    m_Exclude.Add("retransmitted", "retransmit");
                    m_Exclude.Add("retransmitting", "retransmit");
                    m_Exclude.Add("retried", "retry");
                    m_Exclude.Add("retrofitted", "retrofit");
                    m_Exclude.Add("retrofitting", "retrofit");
                    m_Exclude.Add("retted", "ret");
                    m_Exclude.Add("retting", "ret");
                    m_Exclude.Add("reunified", "reunify");
                    m_Exclude.Add("revelled", "revel");
                    m_Exclude.Add("revelling", "revel");
                    m_Exclude.Add("revetted", "revet");
                    m_Exclude.Add("revetting", "revet");
                    m_Exclude.Add("revivified", "revivify");
                    m_Exclude.Add("revved", "rev");
                    m_Exclude.Add("revving", "rev");
                    m_Exclude.Add("rewound", "rewind");
                    m_Exclude.Add("rewritten", "rewrite");
                    m_Exclude.Add("rewrote", "rewrite");
                    m_Exclude.Add("ribbed", "rib");
                    m_Exclude.Add("ribbing", "rib");
                    m_Exclude.Add("ricochetted", "ricochet");
                    m_Exclude.Add("ricochetting", "ricochet");
                    m_Exclude.Add("ridded", "rid");
                    m_Exclude.Add("ridden", "ride");
                    m_Exclude.Add("ridding", "rid");
                    m_Exclude.Add("rigged", "rig");
                    m_Exclude.Add("rigging", "rig");
                    m_Exclude.Add("rigidified", "rigidify");
                    m_Exclude.Add("rimmed", "rim");
                    m_Exclude.Add("rimming", "rim");
                    m_Exclude.Add("ripped", "rip");
                    m_Exclude.Add("ripping", "rip");
                    m_Exclude.Add("risen", "rise");
                    m_Exclude.Add("rivalled", "rival");
                    m_Exclude.Add("rivalling", "rival");
                    m_Exclude.Add("riven", "rive");
                    m_Exclude.Add("robbed", "rob");
                    m_Exclude.Add("robbing", "rob");
                    m_Exclude.Add("rode", "ride");
                    m_Exclude.Add("rose", "rise");
                    m_Exclude.Add("rotted", "rot");
                    m_Exclude.Add("rotting", "rot");
                    m_Exclude.Add("rough-dried", "rough-dry");
                    m_Exclude.Add("rough-hewn", "rough-hew");
                    m_Exclude.Add("rove", "reeve");
                    m_Exclude.Add("rowelled", "rowel");
                    m_Exclude.Add("rowelling", "rowel");
                    m_Exclude.Add("rubbed", "rub");
                    m_Exclude.Add("rubbing", "rub");
                    m_Exclude.Add("rung", "ring");
                    m_Exclude.Add("running", "run");
                    m_Exclude.Add("rutted", "rut");
                    m_Exclude.Add("rutting", "rut");
                    m_Exclude.Add("saccharified", "saccharify");
                    m_Exclude.Add("sagged", "sag");
                    m_Exclude.Add("sagging", "sag");
                    m_Exclude.Add("said", "say");
                    m_Exclude.Add("salaried", "salary");
                    m_Exclude.Add("salified", "salify");
                    m_Exclude.Add("sallied", "sally");
                    m_Exclude.Add("sanctified", "sanctify");
                    m_Exclude.Add("sandbagged", "sandbag");
                    m_Exclude.Add("sandbagging", "sandbag");
                    m_Exclude.Add("sang", "sing");
                    m_Exclude.Add("sank", "sink");
                    m_Exclude.Add("saponified", "saponify");
                    m_Exclude.Add("sapped", "sap");
                    m_Exclude.Add("sapping", "sap");
                    m_Exclude.Add("sat", "sit");
                    m_Exclude.Add("satisfied", "satisfy");
                    m_Exclude.Add("savvied", "savvy");
                    m_Exclude.Add("saw", "see");
                    m_Exclude.Add("sawn", "saw");
                    m_Exclude.Add("scagged", "scag");
                    m_Exclude.Add("scagging", "scag");
                    m_Exclude.Add("scanned", "scan");
                    m_Exclude.Add("scanning", "scan");
                    m_Exclude.Add("scarified", "scarify");
                    m_Exclude.Add("scarred", "scar");
                    m_Exclude.Add("scarring", "scar");
                    m_Exclude.Add("scatted", "scat");
                    m_Exclude.Add("scatting", "scat");
                    m_Exclude.Add("scorified", "scorify");
                    m_Exclude.Add("scragged", "scrag");
                    m_Exclude.Add("scragging", "scrag");
                    m_Exclude.Add("scrammed", "scram");
                    m_Exclude.Add("scramming", "scram");
                    m_Exclude.Add("scrapped", "scrap");
                    m_Exclude.Add("scrapping", "scrap");
                    m_Exclude.Add("scried", "scry");
                    m_Exclude.Add("scrubbed", "scrub");
                    m_Exclude.Add("scrubbing", "scrub");
                    m_Exclude.Add("scrummed", "scrum");
                    m_Exclude.Add("scrumming", "scrum");
                    m_Exclude.Add("scudded", "scud");
                    m_Exclude.Add("scudding", "scud");
                    m_Exclude.Add("scummed", "scum");
                    m_Exclude.Add("scumming", "scum");
                    m_Exclude.Add("scurried", "scurry");
                    m_Exclude.Add("seen", "see");
                    m_Exclude.Add("sent", "send");
                    m_Exclude.Add("setting", "set");
                    m_Exclude.Add("sewn", "sew");
                    m_Exclude.Add("shagged", "shag");
                    m_Exclude.Add("shagging", "shag");
                    m_Exclude.Add("shaken", "shake");
                    m_Exclude.Add("shaken_hands", "shake_hands");
                    m_Exclude.Add("shakes_hands", "shake_hands");
                    m_Exclude.Add("shaking_hands", "shake_hands");
                    m_Exclude.Add("shammed", "sham");
                    m_Exclude.Add("shamming", "sham");
                    m_Exclude.Add("sharecropped", "sharecrop");
                    m_Exclude.Add("sharecropping", "sharecrop");
                    m_Exclude.Add("shat", "shit");
                    m_Exclude.Add("shaven", "shave");
                    m_Exclude.Add("shedding", "shed");
                    m_Exclude.Add("shellacked", "shellac");
                    m_Exclude.Add("shellacking", "shellac");
                    m_Exclude.Add("shent", "shend");
                    m_Exclude.Add("shewn", "shew");
                    m_Exclude.Add("shied", "shy");
                    m_Exclude.Add("shikarred", "shikar");
                    m_Exclude.Add("shikarring", "shikar");
                    m_Exclude.Add("shillyshallied", "shillyshally");
                    m_Exclude.Add("shimmed", "shim");
                    m_Exclude.Add("shimmied", "shimmy");
                    m_Exclude.Add("shimming", "shim");
                    m_Exclude.Add("shinned", "shin");
                    m_Exclude.Add("shinning", "shin");
                    m_Exclude.Add("shipped", "ship");
                    m_Exclude.Add("shipping", "ship");
                    m_Exclude.Add("shitted", "shit");
                    m_Exclude.Add("shitting", "shit");
                    m_Exclude.Add("shod", "shoe");
                    m_Exclude.Add("shone", "shine");
                    m_Exclude.Add("shook", "shake");
                    m_Exclude.Add("shook_hands", "shake_hands");
                    m_Exclude.Add("shopped", "shop");
                    m_Exclude.Add("shopping", "shop");
                    m_Exclude.Add("shot", "shoot");
                    m_Exclude.Add("shotgunned", "shotgun");
                    m_Exclude.Add("shotgunning", "shotgun");
                    m_Exclude.Add("shotted", "shot");
                    m_Exclude.Add("shotting", "shot");
                    m_Exclude.Add("shovelled", "shovel");
                    m_Exclude.Add("shovelling", "shovel");
                    m_Exclude.Add("shown", "show");
                    m_Exclude.Add("shrank", "shrink");
                    m_Exclude.Add("shredded", "shred");
                    m_Exclude.Add("shredding", "shred");
                    m_Exclude.Add("shrink-wrapped", "shrink-wrap");
                    m_Exclude.Add("shrink-wrapping", "shrink-wrap");
                    m_Exclude.Add("shrivelled", "shrivel");
                    m_Exclude.Add("shrivelling", "shrivel");
                    m_Exclude.Add("shriven", "shrive");
                    m_Exclude.Add("shrove", "shrive");
                    m_Exclude.Add("shrugged", "shrug");
                    m_Exclude.Add("shrugging", "shrug");
                    m_Exclude.Add("shrunk", "shrink");
                    m_Exclude.Add("shrunken", "shrink");
                    m_Exclude.Add("shunned", "shun");
                    m_Exclude.Add("shunning", "shun");
                    m_Exclude.Add("shutting", "shut");
                    m_Exclude.Add("sicked", "sic");
                    m_Exclude.Add("sicking", "sic");
                    m_Exclude.Add("sideslipped", "sideslip");
                    m_Exclude.Add("sideslipping", "sideslip");
                    m_Exclude.Add("sidestepped", "sidestep");
                    m_Exclude.Add("sidestepping", "sidestep");
                    m_Exclude.Add("sightsaw", "sightsee");
                    m_Exclude.Add("sightseen", "sightsee");
                    m_Exclude.Add("signalled", "signal");
                    m_Exclude.Add("signalling", "signal");
                    m_Exclude.Add("signified", "signify");
                    m_Exclude.Add("silicified", "silicify");
                    m_Exclude.Add("simplified", "simplify");
                    m_Exclude.Add("singing", "sing");
                    m_Exclude.Add("single-stepped", "single-step");
                    m_Exclude.Add("single-stepping", "single-step");
                    m_Exclude.Add("sinned", "sin");
                    m_Exclude.Add("sinning", "sin");
                    m_Exclude.Add("sipped", "sip");
                    m_Exclude.Add("sipping", "sip");
                    m_Exclude.Add("sitting", "sit");
                    m_Exclude.Add("skellied", "skelly");
                    m_Exclude.Add("skenned", "sken");
                    m_Exclude.Add("skenning", "sken");
                    m_Exclude.Add("sketted", "sket");
                    m_Exclude.Add("sketting", "sket");
                    m_Exclude.Add("ski'd", "ski");
                    m_Exclude.Add("skidded", "skid");
                    m_Exclude.Add("skidding", "skid");
                    m_Exclude.Add("skimmed", "skim");
                    m_Exclude.Add("skimming", "skim");
                    m_Exclude.Add("skin-popped", "skin-pop");
                    m_Exclude.Add("skin-popping", "skin-pop");
                    m_Exclude.Add("skinned", "skin");
                    m_Exclude.Add("skinning", "skin");
                    m_Exclude.Add("skinny-dipped", "skinny-dip");
                    m_Exclude.Add("skinny-dipping", "skinny-dip");
                    m_Exclude.Add("skipped", "skip");
                    m_Exclude.Add("skipping", "skip");
                    m_Exclude.Add("skivvied", "skivvy");
                    m_Exclude.Add("skydove", "skydive");
                    m_Exclude.Add("slabbed", "slab");
                    m_Exclude.Add("slabbing", "slab");
                    m_Exclude.Add("slagged", "slag");
                    m_Exclude.Add("slagging", "slag");
                    m_Exclude.Add("slain", "slay");
                    m_Exclude.Add("slammed", "slam");
                    m_Exclude.Add("slamming", "slam");
                    m_Exclude.Add("slapped", "slap");
                    m_Exclude.Add("slapping", "slap");
                    m_Exclude.Add("slatted", "slat");
                    m_Exclude.Add("slatting", "slat");
                    m_Exclude.Add("sledding", "sled");
                    m_Exclude.Add("slept", "sleep");
                    m_Exclude.Add("slew", "slay");
                    m_Exclude.Add("slid", "slide");
                    m_Exclude.Add("slidden", "slide");
                    m_Exclude.Add("slipped", "slip");
                    m_Exclude.Add("slipping", "slip");
                    m_Exclude.Add("slitting", "slit");
                    m_Exclude.Add("slogged", "slog");
                    m_Exclude.Add("slogging", "slog");
                    m_Exclude.Add("slopped", "slop");
                    m_Exclude.Add("slopping", "slop");
                    m_Exclude.Add("slotted", "slot");
                    m_Exclude.Add("slotting", "slot");
                    m_Exclude.Add("slugged", "slug");
                    m_Exclude.Add("slugging", "slug");
                    m_Exclude.Add("slummed", "slum");
                    m_Exclude.Add("slumming", "slum");
                    m_Exclude.Add("slung", "sling");
                    m_Exclude.Add("slunk", "slink");
                    m_Exclude.Add("slurred", "slur");
                    m_Exclude.Add("slurring", "slur");
                    m_Exclude.Add("smelt", "smell");
                    m_Exclude.Add("smit", "smite");
                    m_Exclude.Add("smitten", "smite");
                    m_Exclude.Add("smote", "smite");
                    m_Exclude.Add("smutted", "smut");
                    m_Exclude.Add("smutting", "smut");
                    m_Exclude.Add("snagged", "snag");
                    m_Exclude.Add("snagging", "snag");
                    m_Exclude.Add("snapped", "snap");
                    m_Exclude.Add("snapping", "snap");
                    m_Exclude.Add("snedded", "sned");
                    m_Exclude.Add("snedding", "sned");
                    m_Exclude.Add("snipped", "snip");
                    m_Exclude.Add("snipping", "snip");
                    m_Exclude.Add("snivelled", "snivel");
                    m_Exclude.Add("snivelling", "snivel");
                    m_Exclude.Add("snogged", "snog");
                    m_Exclude.Add("snogging", "snog");
                    m_Exclude.Add("snubbed", "snub");
                    m_Exclude.Add("snubbing", "snub");
                    m_Exclude.Add("snuck", "sneak");
                    m_Exclude.Add("snugged", "snug");
                    m_Exclude.Add("snugging", "snug");
                    m_Exclude.Add("sobbed", "sob");
                    m_Exclude.Add("sobbing", "sob");
                    m_Exclude.Add("sodded", "sod");
                    m_Exclude.Add("sodding", "sod");
                    m_Exclude.Add("soft-pedalled", "soft-pedal");
                    m_Exclude.Add("soft-pedalling", "soft-pedal");
                    m_Exclude.Add("sold", "sell");
                    m_Exclude.Add("solemnified", "solemnify");
                    m_Exclude.Add("solidified", "solidify");
                    m_Exclude.Add("soothsaid", "soothsay");
                    m_Exclude.Add("sopped", "sop");
                    m_Exclude.Add("sopping", "sop");
                    m_Exclude.Add("sought", "seek");
                    m_Exclude.Add("sown", "sow");
                    m_Exclude.Add("spagged", "spag");
                    m_Exclude.Add("spagging", "spag");
                    m_Exclude.Add("spancelled", "spancel");
                    m_Exclude.Add("spancelling", "spancel");
                    m_Exclude.Add("spanned", "span");
                    m_Exclude.Add("spanning", "span");
                    m_Exclude.Add("sparred", "spar");
                    m_Exclude.Add("sparring", "spar");
                    m_Exclude.Add("spat", "spit");
                    m_Exclude.Add("spatted", "spat");
                    m_Exclude.Add("spatting", "spat");
                    m_Exclude.Add("specified", "specify");
                    m_Exclude.Add("sped", "speed");
                    m_Exclude.Add("speechified", "speechify");
                    m_Exclude.Add("spellbound", "spellbind");
                    m_Exclude.Add("spelt", "spell");
                    m_Exclude.Add("spent", "spend");
                    m_Exclude.Add("spied", "spy");
                    m_Exclude.Add("spilt", "spill");
                    m_Exclude.Add("spin-dried", "spin-dry");
                    m_Exclude.Add("spinning", "spin");
                    m_Exclude.Add("spiralled", "spiral");
                    m_Exclude.Add("spiralling", "spiral");
                    m_Exclude.Add("spitted", "spit");
                    m_Exclude.Add("spitting", "spit");
                    m_Exclude.Add("splitting", "split");
                    m_Exclude.Add("spoilt", "spoil");
                    m_Exclude.Add("spoke", "speak");
                    m_Exclude.Add("spoken", "speak");
                    m_Exclude.Add("spoon-fed", "spoon-feed");
                    m_Exclude.Add("spotlit", "spotlight");
                    m_Exclude.Add("spotted", "spot");
                    m_Exclude.Add("spotting", "spot");
                    m_Exclude.Add("sprang", "spring");
                    m_Exclude.Add("sprigged", "sprig");
                    m_Exclude.Add("sprigging", "sprig");
                    m_Exclude.Add("sprung", "spring");
                    m_Exclude.Add("spudded", "spud");
                    m_Exclude.Add("spudding", "spud");
                    m_Exclude.Add("spun", "spin");
                    m_Exclude.Add("spurred", "spur");
                    m_Exclude.Add("spurring", "spur");
                    m_Exclude.Add("squatted", "squat");
                    m_Exclude.Add("squatting", "squat");
                    m_Exclude.Add("squibbed", "squib");
                    m_Exclude.Add("squibbing", "squib");
                    m_Exclude.Add("squidded", "squid");
                    m_Exclude.Add("squidding", "squid");
                    m_Exclude.Add("squilgee", "squeegee");
                    m_Exclude.Add("stabbed", "stab");
                    m_Exclude.Add("stabbing", "stab");
                    m_Exclude.Add("stall-fed", "stall-feed");
                    m_Exclude.Add("stank", "stink");
                    m_Exclude.Add("starred", "star");
                    m_Exclude.Add("starring", "star");
                    m_Exclude.Add("steadied", "steady");
                    m_Exclude.Add("stellified", "stellify");
                    m_Exclude.Add("stemmed", "stem");
                    m_Exclude.Add("stemming", "stem");
                    m_Exclude.Add("stems_from", "stem_from");
                    m_Exclude.Add("stencilled", "stencil");
                    m_Exclude.Add("stencilling", "stencil");
                    m_Exclude.Add("stepped", "step");
                    m_Exclude.Add("stepping", "step");
                    m_Exclude.Add("stetted", "stet");
                    m_Exclude.Add("stetting", "stet");
                    m_Exclude.Add("stied", "sty");
                    m_Exclude.Add("stilettoeing", "stiletto");
                    m_Exclude.Add("stirred", "stir");
                    m_Exclude.Add("stirring", "stir");
                    m_Exclude.Add("stole", "steal");
                    m_Exclude.Add("stolen", "steal");
                    m_Exclude.Add("stood", "stand");
                    m_Exclude.Add("stopped", "stop");
                    m_Exclude.Add("stopping", "stop");
                    m_Exclude.Add("storied", "story");
                    m_Exclude.Add("stotted", "stot");
                    m_Exclude.Add("stotting", "stot");
                    m_Exclude.Add("stove", "stave");
                    m_Exclude.Add("strapped", "strap");
                    m_Exclude.Add("strapping", "strap");
                    m_Exclude.Add("stratified", "stratify");
                    m_Exclude.Add("strewn", "strew");
                    m_Exclude.Add("stridden", "stride");
                    m_Exclude.Add("stripped", "strip");
                    m_Exclude.Add("stripping", "strip");
                    m_Exclude.Add("striven", "strive");
                    m_Exclude.Add("strode", "stride");
                    m_Exclude.Add("stropped", "strop");
                    m_Exclude.Add("stropping", "strop");
                    m_Exclude.Add("strove", "strive");
                    m_Exclude.Add("strown", "strow");
                    m_Exclude.Add("struck", "strike");
                    m_Exclude.Add("strummed", "strum");
                    m_Exclude.Add("strumming", "strum");
                    m_Exclude.Add("strung", "string");
                    m_Exclude.Add("strutted", "strut");
                    m_Exclude.Add("strutting", "strut");
                    m_Exclude.Add("stubbed", "stub");
                    m_Exclude.Add("stubbing", "stub");
                    m_Exclude.Add("stuck", "stick");
                    m_Exclude.Add("studded", "stud");
                    m_Exclude.Add("studding", "stud");
                    m_Exclude.Add("studied", "study");
                    m_Exclude.Add("stultified", "stultify");
                    m_Exclude.Add("stummed", "stum");
                    m_Exclude.Add("stumming", "stum");
                    m_Exclude.Add("stung", "sting");
                    m_Exclude.Add("stunk", "stink");
                    m_Exclude.Add("stunned", "stun");
                    m_Exclude.Add("stunning", "stun");
                    m_Exclude.Add("stupefied", "stupefy");
                    m_Exclude.Add("stymying", "stymie");
                    m_Exclude.Add("subbed", "sub");
                    m_Exclude.Add("subbing", "sub");
                    m_Exclude.Add("subjectified", "subjectify");
                    m_Exclude.Add("subletting", "sublet");
                    m_Exclude.Add("submitted", "submit");
                    m_Exclude.Add("submitting", "submit");
                    m_Exclude.Add("subtotalled", "subtotal");
                    m_Exclude.Add("subtotalling", "subtotal");
                    m_Exclude.Add("sullied", "sully");
                    m_Exclude.Add("sulphuretted", "sulphuret");
                    m_Exclude.Add("sulphuretting", "sulphuret");
                    m_Exclude.Add("summed", "sum");
                    m_Exclude.Add("summing", "sum");
                    m_Exclude.Add("sung", "sing");
                    m_Exclude.Add("sunk", "sink");
                    m_Exclude.Add("sunken", "sink");
                    m_Exclude.Add("sunned", "sun");
                    m_Exclude.Add("sunning", "sun");
                    m_Exclude.Add("supped", "sup");
                    m_Exclude.Add("supping", "sup");
                    m_Exclude.Add("supplied", "supply");
                    m_Exclude.Add("swabbed", "swab");
                    m_Exclude.Add("swabbing", "swab");
                    m_Exclude.Add("swagged", "swag");
                    m_Exclude.Add("swagging", "swag");
                    m_Exclude.Add("swam", "swim");
                    m_Exclude.Add("swapped", "swap");
                    m_Exclude.Add("swapping", "swap");
                    m_Exclude.Add("swatted", "swat");
                    m_Exclude.Add("swatting", "swat");
                    m_Exclude.Add("swept", "sweep");
                    m_Exclude.Add("swigged", "swig");
                    m_Exclude.Add("swigging", "swig");
                    m_Exclude.Add("swimming", "swim");
                    m_Exclude.Add("swivelled", "swivel");
                    m_Exclude.Add("swivelling", "swivel");
                    m_Exclude.Add("swollen", "swell");
                    m_Exclude.Add("swopped", "swap");
                    m_Exclude.Add("swopping", "swap");
                    m_Exclude.Add("swops", "swap");
                    m_Exclude.Add("swore", "swear");
                    m_Exclude.Add("sworn", "swear");
                    m_Exclude.Add("swotted", "swot");
                    m_Exclude.Add("swotting", "swot");
                    m_Exclude.Add("swum", "swim");
                    m_Exclude.Add("swung", "swing");
                    m_Exclude.Add("syllabified", "syllabify");
                    m_Exclude.Add("symbolled", "symbol");
                    m_Exclude.Add("symbolling", "symbol");
                    m_Exclude.Add("tabbed", "tab");
                    m_Exclude.Add("tabbing", "tab");
                    m_Exclude.Add("tagged", "tag");
                    m_Exclude.Add("tagging", "tag");
                    m_Exclude.Add("taken", "take");
                    m_Exclude.Add("taken_a_side", "take_a_side");
                    m_Exclude.Add("taken_pains", "take_pains");
                    m_Exclude.Add("taken_steps", "take_steps");
                    m_Exclude.Add("takes_a_side", "take_a_side");
                    m_Exclude.Add("takes_pains", "take_pains");
                    m_Exclude.Add("takes_steps", "take_steps");
                    m_Exclude.Add("taking_a_side", "take_a_side");
                    m_Exclude.Add("taking_pains", "take_pains");
                    m_Exclude.Add("taking_steps", "take_steps");
                    m_Exclude.Add("talcked", "talc");
                    m_Exclude.Add("talcking", "talc");
                    m_Exclude.Add("tallied", "tally");
                    m_Exclude.Add("tally-ho'd", "tally-ho");
                    m_Exclude.Add("tammied", "tammy");
                    m_Exclude.Add("tanned", "tan");
                    m_Exclude.Add("tanning", "tan");
                    m_Exclude.Add("tapped", "tap");
                    m_Exclude.Add("tapping", "tap");
                    m_Exclude.Add("tarred", "tar");
                    m_Exclude.Add("tarried", "tarry");
                    m_Exclude.Add("tarring", "tar");
                    m_Exclude.Add("tasselled", "tassel");
                    m_Exclude.Add("tasselling", "tassel");
                    m_Exclude.Add("tatted", "tat");
                    m_Exclude.Add("tatting", "tat");
                    m_Exclude.Add("taught", "teach");
                    m_Exclude.Add("taxying", "taxi");
                    m_Exclude.Add("teaselled", "teasel");
                    m_Exclude.Add("teaselling", "teasel");
                    m_Exclude.Add("tedded", "ted");
                    m_Exclude.Add("tedding", "ted");
                    m_Exclude.Add("tepefied", "tepefy");
                    m_Exclude.Add("terrified", "terrify");
                    m_Exclude.Add("testified", "testify");
                    m_Exclude.Add("thinking_the_world_of", "think_the_world_of");
                    m_Exclude.Add("thinks_the_world_of", "think_the_world_of");
                    m_Exclude.Add("thinned", "thin");
                    m_Exclude.Add("thinning", "thin");
                    m_Exclude.Add("thought", "think");
                    m_Exclude.Add("thought_the_world_of", "think_the_world_of");
                    m_Exclude.Add("threw", "throw");
                    m_Exclude.Add("threw_out", "throw_out");
                    m_Exclude.Add("thriven", "thrive");
                    m_Exclude.Add("throbbed", "throb");
                    m_Exclude.Add("throbbing", "throb");
                    m_Exclude.Add("throve", "thrive");
                    m_Exclude.Add("throwing_out", "throw_out");
                    m_Exclude.Add("thrown", "throw");
                    m_Exclude.Add("thrown_out", "throw_out");
                    m_Exclude.Add("throws_out", "throw_out");
                    m_Exclude.Add("thrummed", "thrum");
                    m_Exclude.Add("thrumming", "thrum");
                    m_Exclude.Add("thudded", "thud");
                    m_Exclude.Add("thudding", "thud");
                    m_Exclude.Add("tidied", "tidy");
                    m_Exclude.Add("tinned", "tin");
                    m_Exclude.Add("tinning", "tin");
                    m_Exclude.Add("tinselled", "tinsel");
                    m_Exclude.Add("tinselling", "tinsel");
                    m_Exclude.Add("tipped", "tip");
                    m_Exclude.Add("tipping", "tip");
                    m_Exclude.Add("tittupped", "tittup");
                    m_Exclude.Add("tittupping", "tittup");
                    m_Exclude.Add("toadied", "toady");
                    m_Exclude.Add("togged", "tog");
                    m_Exclude.Add("togging", "tog");
                    m_Exclude.Add("told", "tell");
                    m_Exclude.Add("took", "take");
                    m_Exclude.Add("took_a_side", "take_a_side");
                    m_Exclude.Add("took_pains", "take_pains");
                    m_Exclude.Add("took_steps", "take_steps");
                    m_Exclude.Add("topped", "top");
                    m_Exclude.Add("topping", "top");
                    m_Exclude.Add("tore", "tear");
                    m_Exclude.Add("torn", "tear");
                    m_Exclude.Add("torrefied", "torrefy");
                    m_Exclude.Add("torrify", "torrefy");
                    m_Exclude.Add("totalled", "total");
                    m_Exclude.Add("totalling", "total");
                    m_Exclude.Add("totted", "tot");
                    m_Exclude.Add("totting", "tot");
                    m_Exclude.Add("towelled", "towel");
                    m_Exclude.Add("towelling", "towel");
                    m_Exclude.Add("trafficked", "traffic");
                    m_Exclude.Add("trafficking", "traffic");
                    m_Exclude.Add("trameled", "trammel");
                    m_Exclude.Add("trameling", "trammel");
                    m_Exclude.Add("tramelled", "trammel");
                    m_Exclude.Add("tramelling", "trammel");
                    m_Exclude.Add("tramels", "trammel");
                    m_Exclude.Add("trammed", "tram");
                    m_Exclude.Add("tramming", "tram");
                    m_Exclude.Add("transferred", "transfer");
                    m_Exclude.Add("transferring", "transfer");
                    m_Exclude.Add("transfixt", "transfix");
                    m_Exclude.Add("tranship", "transship");
                    m_Exclude.Add("transhipped", "tranship");
                    m_Exclude.Add("transhipping", "tranship");
                    m_Exclude.Add("transmitted", "transmit");
                    m_Exclude.Add("transmitting", "transmit");
                    m_Exclude.Add("transmogrified", "transmogrify");
                    m_Exclude.Add("transshipped", "transship");
                    m_Exclude.Add("transshipping", "transship");
                    m_Exclude.Add("trapanned", "trapan");
                    m_Exclude.Add("trapanning", "trapan");
                    m_Exclude.Add("trapped", "trap");
                    m_Exclude.Add("trapping", "trap");
                    m_Exclude.Add("travelled", "travel");
                    m_Exclude.Add("travelling", "travel");
                    m_Exclude.Add("travestied", "travesty");
                    m_Exclude.Add("trekked", "trek");
                    m_Exclude.Add("trekking", "trek");
                    m_Exclude.Add("trepanned", "trepan");
                    m_Exclude.Add("trepanning", "trepan");
                    m_Exclude.Add("tried", "try");
                    m_Exclude.Add("trigged", "trig");
                    m_Exclude.Add("trigging", "trig");
                    m_Exclude.Add("trimmed", "trim");
                    m_Exclude.Add("trimming", "trim");
                    m_Exclude.Add("tripped", "trip");
                    m_Exclude.Add("tripping", "trip");
                    m_Exclude.Add("trod", "tread");
                    m_Exclude.Add("trodden", "tread");
                    m_Exclude.Add("trogged", "trog");
                    m_Exclude.Add("trogging", "trog");
                    m_Exclude.Add("trotted", "trot");
                    m_Exclude.Add("trotting", "trot");
                    m_Exclude.Add("trowelled", "trowel");
                    m_Exclude.Add("trowelling", "trowel");
                    m_Exclude.Add("tugged", "tug");
                    m_Exclude.Add("tugging", "tug");
                    m_Exclude.Add("tumefied", "tumefy");
                    m_Exclude.Add("tunned", "tun");
                    m_Exclude.Add("tunnelled", "tunnel");
                    m_Exclude.Add("tunnelling", "tunnel");
                    m_Exclude.Add("tunning", "tun");
                    m_Exclude.Add("tupped", "tup");
                    m_Exclude.Add("tupping", "tup");
                    m_Exclude.Add("tut-tutted", "tut-tut");
                    m_Exclude.Add("tut-tutting", "tut-tut");
                    m_Exclude.Add("twigged", "twig");
                    m_Exclude.Add("twigging", "twig");
                    m_Exclude.Add("twinned", "twin");
                    m_Exclude.Add("twinning", "twin");
                    m_Exclude.Add("twitted", "twit");
                    m_Exclude.Add("twitting", "twit");
                    m_Exclude.Add("tying", "tie");
                    m_Exclude.Add("typesetting", "typeset");
                    m_Exclude.Add("typewritten", "typewrite");
                    m_Exclude.Add("typewrote", "typewrite");
                    m_Exclude.Add("typified", "typify");
                    m_Exclude.Add("uglified", "uglify");
                    m_Exclude.Add("unbarred", "unbar");
                    m_Exclude.Add("unbarring", "unbar");
                    m_Exclude.Add("unbent", "unbend");
                    m_Exclude.Add("unbound", "unbind");
                    m_Exclude.Add("uncapped", "uncap");
                    m_Exclude.Add("uncapping", "uncap");
                    m_Exclude.Add("unclad", "unclothe");
                    m_Exclude.Add("unclogged", "unclog");
                    m_Exclude.Add("unclogging", "unclog");
                    m_Exclude.Add("underbidding", "underbid");
                    m_Exclude.Add("underbought", "underbuy");
                    m_Exclude.Add("undercutting", "undercut");
                    m_Exclude.Add("underfed", "underfeed");
                    m_Exclude.Add("undergirt", "undergird");
                    m_Exclude.Add("undergone", "undergo");
                    m_Exclude.Add("underlaid", "underlay");
                    m_Exclude.Add("underlain", "underlie");
                    m_Exclude.Add("underlay", "underlie");
                    m_Exclude.Add("underletting", "underlet");
                    m_Exclude.Add("underlying", "underlie");
                    m_Exclude.Add("underpaid", "underpay");
                    m_Exclude.Add("underpinned", "underpin");
                    m_Exclude.Add("underpinning", "underpin");
                    m_Exclude.Add("underpropped", "underprop");
                    m_Exclude.Add("underpropping", "underprop");
                    m_Exclude.Add("undersetting", "underset");
                    m_Exclude.Add("undershot", "undershoot");
                    m_Exclude.Add("undersold", "undersell");
                    m_Exclude.Add("understood", "understand");
                    m_Exclude.Add("understudied", "understudy");
                    m_Exclude.Add("undertaken", "undertake");
                    m_Exclude.Add("undertook", "undertake");
                    m_Exclude.Add("underwent", "undergo");
                    m_Exclude.Add("underwritten", "underwrite");
                    m_Exclude.Add("underwrote", "underwrite");
                    m_Exclude.Add("undid", "undo");
                    m_Exclude.Add("undone", "undo");
                    m_Exclude.Add("unfitted", "unfit");
                    m_Exclude.Add("unfitting", "unfit");
                    m_Exclude.Add("unfroze", "unfreeze");
                    m_Exclude.Add("unfrozen", "unfreeze");
                    m_Exclude.Add("unified", "unify");
                    m_Exclude.Add("unkennelled", "unkennel");
                    m_Exclude.Add("unkennelling", "unkennel");
                    m_Exclude.Add("unknitted", "unknit");
                    m_Exclude.Add("unknitting", "unknit");
                    m_Exclude.Add("unlaid", "unlay");
                    m_Exclude.Add("unlearnt", "unlearn");
                    m_Exclude.Add("unmade", "unmake");
                    m_Exclude.Add("unmanned", "unman");
                    m_Exclude.Add("unmanning", "unman");
                    m_Exclude.Add("unpegged", "unpeg");
                    m_Exclude.Add("unpegging", "unpeg");
                    m_Exclude.Add("unpinned", "unpin");
                    m_Exclude.Add("unpinning", "unpin");
                    m_Exclude.Add("unplugged", "unplug");
                    m_Exclude.Add("unplugging", "unplug");
                    m_Exclude.Add("unravelled", "unravel");
                    m_Exclude.Add("unravelling", "unravel");
                    m_Exclude.Add("unrigged", "unrig");
                    m_Exclude.Add("unrigging", "unrig");
                    m_Exclude.Add("unripped", "unrip");
                    m_Exclude.Add("unripping", "unrip");
                    m_Exclude.Add("unrove", "unreeve");
                    m_Exclude.Add("unsaid", "unsay");
                    m_Exclude.Add("unshipped", "unship");
                    m_Exclude.Add("unshipping", "unship");
                    m_Exclude.Add("unslung", "unsling");
                    m_Exclude.Add("unsnapped", "unsnap");
                    m_Exclude.Add("unsnapping", "unsnap");
                    m_Exclude.Add("unspoke", "unspeak");
                    m_Exclude.Add("unspoken", "unspeak");
                    m_Exclude.Add("unsteadied", "unsteady");
                    m_Exclude.Add("unstepped", "unstep");
                    m_Exclude.Add("unstepping", "unstep");
                    m_Exclude.Add("unstopped", "unstop");
                    m_Exclude.Add("unstopping", "unstop");
                    m_Exclude.Add("unstrung", "unstring");
                    m_Exclude.Add("unstuck", "unstick");
                    m_Exclude.Add("unswore", "unswear");
                    m_Exclude.Add("unsworn", "unswear");
                    m_Exclude.Add("untaught", "unteach");
                    m_Exclude.Add("unthought", "unthink");
                    m_Exclude.Add("untidied", "untidy");
                    m_Exclude.Add("untrod", "untread");
                    m_Exclude.Add("untrodden", "untread");
                    m_Exclude.Add("untying", "untie");
                    m_Exclude.Add("unwound", "unwind");
                    m_Exclude.Add("unwrapped", "unwrap");
                    m_Exclude.Add("unwrapping", "unwrap");
                    m_Exclude.Add("unzipped", "unzip");
                    m_Exclude.Add("unzipping", "unzip");
                    m_Exclude.Add("upbuilt", "upbuild");
                    m_Exclude.Add("upheld", "uphold");
                    m_Exclude.Add("uphove", "upheave");
                    m_Exclude.Add("upped", "up");
                    m_Exclude.Add("uppercutting", "uppercut");
                    m_Exclude.Add("upping", "up");
                    m_Exclude.Add("uprisen", "uprise");
                    m_Exclude.Add("uprose", "uprise");
                    m_Exclude.Add("upsetting", "upset");
                    m_Exclude.Add("upsprang", "upspring");
                    m_Exclude.Add("upsprung", "upspring");
                    m_Exclude.Add("upswept", "upsweep");
                    m_Exclude.Add("upswollen", "upswell");
                    m_Exclude.Add("upswung", "upswing");
                    m_Exclude.Add("vagged", "vag");
                    m_Exclude.Add("vagging", "vag");
                    m_Exclude.Add("varied", "vary");
                    m_Exclude.Add("vatted", "vat");
                    m_Exclude.Add("vatting", "vat");
                    m_Exclude.Add("verbified", "verbify");
                    m_Exclude.Add("verified", "verify");
                    m_Exclude.Add("versified", "versify");
                    m_Exclude.Add("vetted", "vet");
                    m_Exclude.Add("vetting", "vet");
                    m_Exclude.Add("victualled", "victual");
                    m_Exclude.Add("victualling", "victual");
                    m_Exclude.Add("vilified", "vilify");
                    m_Exclude.Add("vitrified", "vitrify");
                    m_Exclude.Add("vitriolled", "vitriol");
                    m_Exclude.Add("vitriolling", "vitriol");
                    m_Exclude.Add("vivified", "vivify");
                    m_Exclude.Add("vying", "vie");
                    m_Exclude.Add("wadded", "wad");
                    m_Exclude.Add("waddied", "waddy");
                    m_Exclude.Add("wadding", "wad");

                    m_Exclude.Add("wadsetted", "wadset");
                    m_Exclude.Add("wadsetting", "wadset");
                    m_Exclude.Add("wagged", "wag");
                    m_Exclude.Add("wagging", "wag");
                    m_Exclude.Add("wanned", "wan");
                    m_Exclude.Add("wanning", "wan");
                    m_Exclude.Add("warred", "war");
                    m_Exclude.Add("warring", "war");
                    m_Exclude.Add("was", "be");
                    m_Exclude.Add("water-ski'd", "water-ski");
                    m_Exclude.Add("waylaid", "waylay");
                    m_Exclude.Add("wearied", "weary");
                    m_Exclude.Add("weatherstripped", "weatherstrip");
                    m_Exclude.Add("weatherstripping", "weatherstrip");
                    m_Exclude.Add("webbed", "web");
                    m_Exclude.Add("webbing", "web");
                    m_Exclude.Add("wedded", "wed");
                    m_Exclude.Add("wedding", "wed");
                    m_Exclude.Add("went", "go");
                    m_Exclude.Add("went_deep", "go_deep");
                    m_Exclude.Add("wept", "weep");
                    m_Exclude.Add("were", "be");
                    m_Exclude.Add("wetted", "wet");
                    m_Exclude.Add("wetting", "wet");
                    m_Exclude.Add("whammed", "wham");
                    m_Exclude.Add("whamming", "wham");
                    m_Exclude.Add("whapped", "whap");
                    m_Exclude.Add("whapping", "whap");
                    m_Exclude.Add("whetted", "whet");
                    m_Exclude.Add("whetting", "whet");
                    m_Exclude.Add("whinnied", "whinny");
                    m_Exclude.Add("whipped", "whip");
                    m_Exclude.Add("whipping", "whip");
                    m_Exclude.Add("whipsawn", "whipsaw");
                    m_Exclude.Add("whirred", "whir");
                    m_Exclude.Add("whirring", "whir");
                    m_Exclude.Add("whistle-stopped", "whistle-stop");
                    m_Exclude.Add("whistle-stopping", "whistle-stop");
                    m_Exclude.Add("whizzed", "whiz");
                    m_Exclude.Add("whizzes", "whiz");
                    m_Exclude.Add("whizzing", "whiz");
                    m_Exclude.Add("whopped", "whop");
                    m_Exclude.Add("whopping", "whop");
                    m_Exclude.Add("wigged", "wig");
                    m_Exclude.Add("wigging", "wig");
                    m_Exclude.Add("wigwagged", "wigwag");
                    m_Exclude.Add("wigwagging", "wigwag");
                    m_Exclude.Add("wildcatted", "wildcat");
                    m_Exclude.Add("wildcatting", "wildcat");
                    m_Exclude.Add("window-shopped", "window-shop");
                    m_Exclude.Add("window-shopping", "window-shop");
                    m_Exclude.Add("winning", "win");
                    m_Exclude.Add("winterfed", "winterfeed");
                    m_Exclude.Add("wiredrawn", "wiredraw");
                    m_Exclude.Add("wiredrew", "wiredraw");
                    m_Exclude.Add("withdrawn", "withdraw");
                    m_Exclude.Add("withdrew", "withdraw");
                    m_Exclude.Add("withheld", "withhold");
                    m_Exclude.Add("withstood", "withstand");
                    m_Exclude.Add("woke", "wake");
                    m_Exclude.Add("woken", "wake");
                    m_Exclude.Add("won", "win");
                    m_Exclude.Add("wonned", "won");
                    m_Exclude.Add("wonning", "won");
                    m_Exclude.Add("wore", "wear");
                    m_Exclude.Add("worn", "wear");
                    m_Exclude.Add("worried", "worry");
                    m_Exclude.Add("worshipped", "worship");
                    m_Exclude.Add("worshipping", "worship");
                    m_Exclude.Add("wound", "wind");
                    m_Exclude.Add("wove", "weave");
                    m_Exclude.Add("woven", "weave");
                    m_Exclude.Add("wrapped", "wrap");
                    m_Exclude.Add("wrapping", "wrap");
                    m_Exclude.Add("wried", "wry");
                    m_Exclude.Add("written", "write");
                    m_Exclude.Add("wrote", "write");
                    m_Exclude.Add("wrought", "work");
                    m_Exclude.Add("wrung", "wring");
                    m_Exclude.Add("yakked", "yak");
                    m_Exclude.Add("yakking", "yak");
                    m_Exclude.Add("yapped", "yap");
                    m_Exclude.Add("yapping", "yap");
                    m_Exclude.Add("ycleped", "clepe");
                    m_Exclude.Add("yclept", "clepe");
                    m_Exclude.Add("yenned", "yen");
                    m_Exclude.Add("yenning", "yen");
                    m_Exclude.Add("yodelled", "yodel");
                    m_Exclude.Add("yodelling", "yodel");
                    m_Exclude.Add("zapped", "zap");
                    m_Exclude.Add("zapping", "zap");
                    m_Exclude.Add("zigzagged", "zigzag");
                    m_Exclude.Add("zigzagging", "zigzag");
                    m_Exclude.Add("zipped", "zip");
                    m_Exclude.Add("zipping", "zip");
                    #endregion

                    #region noun
                    m_Exclude.Add("aardwolves", "aardwolf");
                    m_Exclude.Add("abaci", "abacus");
                    m_Exclude.Add("aboideaux", "aboideau");
                    m_Exclude.Add("aboiteaux", "aboiteau");
                    m_Exclude.Add("abscissae", "abscissa");
                    m_Exclude.Add("acanthi", "acanthus");
                    m_Exclude.Add("acari", "acarus");
                    m_Exclude.Add("acciaccature", "acciaccatura");
                    m_Exclude.Add("acetabula", "acetabulum");
                    m_Exclude.Add("achaemenidae", "achaemenid");
                    m_Exclude.Add("achaemenides", "achaemenid");
                    m_Exclude.Add("acicula", "aciculum");
                    m_Exclude.Add("aciculae", "acicula");
                    m_Exclude.Add("acini", "acinus");
                    m_Exclude.Add("acre-feet", "acre-foot");
                    m_Exclude.Add("acromia", "acromion");
                    m_Exclude.Add("actiniae", "actinia");
                    m_Exclude.Add("actinozoa", "actinozoan");
                    m_Exclude.Add("addenda", "addendum");
                    m_Exclude.Add("adenocarcinomata", "adenocarcinoma");
                    m_Exclude.Add("adenomata", "adenoma");
                    m_Exclude.Add("adieux", "adieu");
                    m_Exclude.Add("adyta", "adytum");
                    m_Exclude.Add("aecia", "aecium");
                    m_Exclude.Add("aecidia", "aecidium");
                    m_Exclude.Add("aerobia", "aerobium");
                    m_Exclude.Add("agents-general", "agent-general");
                    m_Exclude.Add("aggiornamenti", "aggiornamento");
                    m_Exclude.Add("agnomina", "agnomen");
                    m_Exclude.Add("agones", "agon");
                    m_Exclude.Add("agorae", "agora");
                    m_Exclude.Add("agouties", "agouti");
                    m_Exclude.Add("aides-de-camp", "aide-de-camp");
                    m_Exclude.Add("aides-memoire", "aide-memoire");
                    m_Exclude.Add("aids-de-camp", "aid-de-camp");
                    m_Exclude.Add("alae", "ala");
                    m_Exclude.Add("alewives", "alewife");
                    m_Exclude.Add("alkalies", "alkali");
                    m_Exclude.Add("allodia", "allodium");
                    m_Exclude.Add("alluvia", "alluvium");
                    m_Exclude.Add("alodia", "alodium");
                    m_Exclude.Add("alto-relievos", "alto-relievo");
                    m_Exclude.Add("altocumuli", "altocumulus");
                    m_Exclude.Add("altostrati", "altostratus");
                    m_Exclude.Add("alulae", "alula");
                    m_Exclude.Add("alumnae", "alumna");
                    m_Exclude.Add("alumni", "alumnus");
                    m_Exclude.Add("alveoli", "alveolus");
                    m_Exclude.Add("amanuenses", "amanuensis");
                    m_Exclude.Add("ambulacra", "ambulacrum");
                    m_Exclude.Add("amebae", "ameba");
                    m_Exclude.Add("amici_curiae", "amicus_curiae");
                    m_Exclude.Add("amnia", "amnion");
                    m_Exclude.Add("amniocenteses", "amniocentesis");
                    m_Exclude.Add("amoebae", "amoeba");
                    m_Exclude.Add("amoebiases", "amoebiasis");
                    m_Exclude.Add("amoraim", "amora");
                    m_Exclude.Add("amoretti", "amoretto");
                    m_Exclude.Add("amorini", "amorino");
                    m_Exclude.Add("amphiarthroses", "amphiarthrosis");
                    m_Exclude.Add("amphicia", "amphithecium");
                    m_Exclude.Add("amphimixes", "amphimixis");
                    m_Exclude.Add("amphioxi", "amphioxus");
                    m_Exclude.Add("amphisbaenae", "amphisbaena");
                    m_Exclude.Add("amphorae", "amphora");
                    m_Exclude.Add("ampullae", "ampulla");
                    m_Exclude.Add("amygdalae", "amygdala");
                    m_Exclude.Add("anabases", "anabasis");
                    m_Exclude.Add("anacolutha", "anacoluthon");
                    m_Exclude.Add("anacruses", "anacrusis");
                    m_Exclude.Add("anaerobia", "anaerobium");
                    m_Exclude.Add("anagnorises", "anagnorisis");
                    m_Exclude.Add("analemmata", "analemma");
                    m_Exclude.Add("analyses", "analysis");
                    m_Exclude.Add("anamneses", "anamnesis");
                    m_Exclude.Add("anamorphoses", "anamorphosis");
                    m_Exclude.Add("anastomoses", "anastomosis");
                    m_Exclude.Add("anatyxes", "anaptyxis");
                    m_Exclude.Add("ancones", "ancon");
                    m_Exclude.Add("androclinia", "androclinium");
                    m_Exclude.Add("androecia", "androecium");
                    m_Exclude.Add("androsphinges", "androsphinx");
                    m_Exclude.Add("andtheridia", "antheridium");
                    m_Exclude.Add("angelfishes", "angelfish");
                    m_Exclude.Add("angiomata", "angioma");
                    m_Exclude.Add("animalcula", "animalculum");
                    m_Exclude.Add("anlagen", "anlage");
                    m_Exclude.Add("annattos", "anatto");
                    m_Exclude.Add("annuli", "annulus");
                    m_Exclude.Add("antae", "anta");
                    m_Exclude.Add("antalkalies", "antalkali");
                    m_Exclude.Add("antefixa", "antefix");
                    m_Exclude.Add("antennae", "antenna");
                    m_Exclude.Add("antependia", "antependium");
                    m_Exclude.Add("anthelia", "anthelion");
                    m_Exclude.Add("anthelices", "anthelix");
                    m_Exclude.Add("anthemia", "anthemion");
                    m_Exclude.Add("antheridia", "antheridium");
                    m_Exclude.Add("anthodia", "anthodium");
                    m_Exclude.Add("anthozoa", "anthozoan");
                    m_Exclude.Add("anthraces", "anthrax");
                    m_Exclude.Add("anticlinoria", "anticlinorium");
                    m_Exclude.Add("antihelices", "antihelix");
                    m_Exclude.Add("antiheroes", "antihero");
                    m_Exclude.Add("antisera", "antiserum");
                    m_Exclude.Add("antitheses", "antithesis");
                    m_Exclude.Add("antitragi", "antitragus");
                    m_Exclude.Add("antra", "antrum");
                    m_Exclude.Add("aortae", "aorta");
                    m_Exclude.Add("aphelia", "aphelion");
                    m_Exclude.Add("aphides", "aphis");
                    m_Exclude.Add("apices", "apex");
                    m_Exclude.Add("apodoses", "apodosis");
                    m_Exclude.Add("apomixes", "apomixis");
                    m_Exclude.Add("aponeuroses", "aponeurosis");
                    m_Exclude.Add("apophyses", "apophysis");
                    m_Exclude.Add("aposiopeses", "aposiopesis");
                    m_Exclude.Add("apothecia", "apothecium");
                    m_Exclude.Add("apotheoses", "apotheosis");
                    m_Exclude.Add("appendices", "appendix");
                    m_Exclude.Add("appoggiature", "appoggiatura");
                    m_Exclude.Add("apsides", "apsis");
                    m_Exclude.Add("aquae", "aqua");
                    m_Exclude.Add("aquaria", "aquarium");
                    m_Exclude.Add("araglis", "argali");
                    m_Exclude.Add("arboreta", "arboretum");
                    m_Exclude.Add("arcana", "arcanum");
                    m_Exclude.Add("archegonia", "archegonium");
                    m_Exclude.Add("archerfishes", "archerfish");
                    m_Exclude.Add("archesporia", "archesporium");
                    m_Exclude.Add("archipelagoes", "archipelago");
                    m_Exclude.Add("arcs-boutants", "arc-boutant");
                    m_Exclude.Add("areolae", "areola");
                    m_Exclude.Add("argumenta", "argumentum");
                    m_Exclude.Add("ariette", "arietta");
                    m_Exclude.Add("aristae", "arista");
                    m_Exclude.Add("armamentaria", "armamentarium");
                    m_Exclude.Add("arses", "arsis");
                    m_Exclude.Add("artal", "rotl");
                    m_Exclude.Add("artel", "rotl");
                    m_Exclude.Add("arterioscleroses", "arteriosclerosis");
                    m_Exclude.Add("aruspices", "aruspex");
                    m_Exclude.Add("asceses", "ascesis");
                    m_Exclude.Add("asci", "ascus");
                    m_Exclude.Add("ascidia", "ascidium");
                    m_Exclude.Add("ascogonia", "ascogonium");
                    m_Exclude.Add("ashes", "ash");
                    m_Exclude.Add("ashkenazim", "ashkenazi");
                    m_Exclude.Add("aspergilla", "aspergillum");
                    m_Exclude.Add("aspergilli", "aspergillus");
                    m_Exclude.Add("aspergilloses", "aspergillosis");
                    m_Exclude.Add("aspersoria", "aspersorium");
                    m_Exclude.Add("assegais", "assagai");
                    m_Exclude.Add("astragali", "astragalus");
                    m_Exclude.Add("asyndeta", "asyndeton");
                    m_Exclude.Add("atheromata", "atheroma");
                    m_Exclude.Add("atheroscleroses", "atherosclerosis");
                    m_Exclude.Add("atmolyses", "atmolysis");
                    m_Exclude.Add("atria", "atrium");
                    m_Exclude.Add("attorneys-at-law", "attorney-at-law");
                    m_Exclude.Add("auditoria", "auditorium");
                    m_Exclude.Add("aurae", "aura");
                    m_Exclude.Add("aurar", "eyir");
                    //TODO:                    m_Exclude.Add("aurar", "eyrir");
                    m_Exclude.Add("aurei", "aureus");
                    m_Exclude.Add("auriculae", "auricula");
                    m_Exclude.Add("aurorae", "aurora");
                    m_Exclude.Add("auspices", "auspex");
                    m_Exclude.Add("autocatalyses", "autocatalysis");
                    m_Exclude.Add("autochthones", "autochthon");
                    m_Exclude.Add("automata", "automaton");
                    m_Exclude.Add("autos-da-fe", "auto-da-fe");
                    m_Exclude.Add("avitaminoses", "avitaminosis");
                    m_Exclude.Add("axes", "ax");
                    m_Exclude.Add("axillae", "axilla");
                    m_Exclude.Add("bacchantes", "bacchant");
                    m_Exclude.Add("bacchii", "bacchius");
                    m_Exclude.Add("bacilli", "bacillus");
                    m_Exclude.Add("bacteriostases", "bacteriostasis");
                    m_Exclude.Add("bacula", "baculum");
                    m_Exclude.Add("bains-marie", "bain-marie");
                    m_Exclude.Add("bains_marie", "bain_marie");
                    m_Exclude.Add("ballistae", "ballista");
                    m_Exclude.Add("bambini", "bambino");
                    m_Exclude.Add("bandeaux", "bandeau");
                    m_Exclude.Add("banditti", "bandit");
                    m_Exclude.Add("bani", "ban");
                    m_Exclude.Add("banjoes", "banjo");
                    m_Exclude.Add("barklice", "barklouse");
                    m_Exclude.Add("barramundies", "barramundi");
                    m_Exclude.Add("bases", "base");
                    m_Exclude.Add("bases-on-balls", "base_on_balls");
                    m_Exclude.Add("bases_on_balls", "base_on_balls");
                    m_Exclude.Add("basidia", "basidium");
                    m_Exclude.Add("basileis", "basileus");
                    m_Exclude.Add("bassi", "basso");
                    m_Exclude.Add("bastinadoes", "bastinado");
                    m_Exclude.Add("bateaux", "bateau");
                    m_Exclude.Add("batfishes", "batfish");
                    m_Exclude.Add("beadsmen", "beadsman");
                    m_Exclude.Add("beaux", "beau");
                    m_Exclude.Add("beches-de-mer", "beche-de-mer");
                    m_Exclude.Add("beeves", "beef");
                    m_Exclude.Add("behooves", "behoof");
                    m_Exclude.Add("bersaglieri", "bersagliere");
                    m_Exclude.Add("bhishties", "bheesty");
                    m_Exclude.Add("bibliothecae", "bibliotheca");
                    m_Exclude.Add("bicennaries", "bicentenary");
                    m_Exclude.Add("bijoux", "bijou");
                    m_Exclude.Add("bilboes", "bilbo");
                    m_Exclude.Add("billets-doux", "billet-doux");
                    m_Exclude.Add("billfishes", "billfish");
                    m_Exclude.Add("bimboes", "bimbo");
                    m_Exclude.Add("bisectrices", "bisectrix");
                    m_Exclude.Add("blackfeet", "blackfoot");
                    m_Exclude.Add("blackfishes", "blackfish");
                    m_Exclude.Add("blastemata", "blastema");
                    m_Exclude.Add("blastulae", "blastula");
                    m_Exclude.Add("blindfishes", "blindfish");
                    m_Exclude.Add("blowfishes", "blowfish");
                    m_Exclude.Add("bluefishes", "bluefish");
                    m_Exclude.Add("boarfishes", "boarfish");
                    m_Exclude.Add("bok", "boschbok");
                    m_Exclude.Add("boleti", "boletus");
                    m_Exclude.Add("bolivares", "bolivar");
                    m_Exclude.Add("bolsheviki", "bolshevik");
                    m_Exclude.Add("bonefishes", "bonefish");
                    m_Exclude.Add("bongoes", "bongo");
                    m_Exclude.Add("bonitoes", "bonito");
                    m_Exclude.Add("booklice", "booklouse");
                    m_Exclude.Add("bookshelves", "bookshelf");
                    m_Exclude.Add("boraces", "borax");
                    m_Exclude.Add("borborygmi", "borborygmus");
                    m_Exclude.Add("bordereaux", "bordereau");
                    m_Exclude.Add("botargoes", "botargo");
                    m_Exclude.Add("box-kodaks", "box_kodak");
                    m_Exclude.Add("boxfishes", "boxfish");
                    m_Exclude.Add("brachia", "brachium");
                    m_Exclude.Add("brainchildren", "brainchild");
                    m_Exclude.Add("branchiae", "branchia");
                    m_Exclude.Add("brants", "brant");
                    m_Exclude.Add("bravadoes", "bravado");
                    m_Exclude.Add("bravoes", "bravo");
                    m_Exclude.Add("bregmata", "bregma");
                    m_Exclude.Add("brethren", "brother");
                    m_Exclude.Add("broadcast_media", "broadcast_medium");
                    m_Exclude.Add("broadleaves", "broadleaf");
                    m_Exclude.Add("bronchi", "bronchus");
                    m_Exclude.Add("brothers-in-law", "brother-in-law");
                    m_Exclude.Add("bryozoa", "bryozoan");
                    m_Exclude.Add("buboes", "bubo");
                    m_Exclude.Add("buckoes", "bucko");
                    m_Exclude.Add("buckteeth", "bucktooth");
                    m_Exclude.Add("buffaloes", "buffalo");
                    m_Exclude.Add("bullae", "bulla");
                    m_Exclude.Add("bunde", "bund");
                    m_Exclude.Add("bureaux", "bureau");
                    m_Exclude.Add("bureaux_de_change", "bureau_de_change");
                    m_Exclude.Add("bursae", "bursa");
                    m_Exclude.Add("bushbok", "boschbok");
                    m_Exclude.Add("bushboks", "boschbok");
                    m_Exclude.Add("busses", "bus");
                    m_Exclude.Add("butterfishes", "butterfish");
                    m_Exclude.Add("byssi", "byssus");
                    m_Exclude.Add("cacti", "cactus");
                    m_Exclude.Add("caducei", "caduceus");
                    m_Exclude.Add("caeca", "caecum");
                    m_Exclude.Add("caesurae", "caesura");
                    m_Exclude.Add("calami", "calamus");
                    m_Exclude.Add("calathi", "calathus");
                    m_Exclude.Add("calcanei", "calcaneum");
                    m_Exclude.Add("calces", "calx");
                    m_Exclude.Add("calculi", "calculus");
                    m_Exclude.Add("caldaria", "caldarium");
                    m_Exclude.Add("calices", "calix");
                    m_Exclude.Add("calicoes", "calico");
                    m_Exclude.Add("calli", "callus");
                    m_Exclude.Add("calves", "calf");
                    m_Exclude.Add("calyces", "calyx");
                    m_Exclude.Add("cambia", "cambium");
                    m_Exclude.Add("camerae", "camera");
                    m_Exclude.Add("canaliculi", "canaliculus");
                    m_Exclude.Add("candelabra", "candelabrum");
                    m_Exclude.Add("candlefishes", "candlefish");
                    m_Exclude.Add("canthi", "canthus");
                    m_Exclude.Add("canulae", "canula");
                    m_Exclude.Add("canzoni", "canzone");
                    m_Exclude.Add("capita", "caput");
                    m_Exclude.Add("capitula", "capitulum");
                    m_Exclude.Add("capricci", "capriccio");
                    m_Exclude.Add("carabinieri", "carabiniere");
                    m_Exclude.Add("carbonadoes", "carbonado");
                    m_Exclude.Add("carcinomata", "carcinoma");
                    m_Exclude.Add("cargoes", "cargo");
                    m_Exclude.Add("carides", "caryatid");
                    m_Exclude.Add("carinae", "carina");
                    m_Exclude.Add("caroli", "carolus");
                    m_Exclude.Add("carpi", "carpus");
                    m_Exclude.Add("carpogonia", "carpogonium");
                    m_Exclude.Add("carryings-on", "carrying-on");
                    m_Exclude.Add("caryopses", "caryopsis");
                    m_Exclude.Add("caryopsides", "caryopsis");
                    m_Exclude.Add("castrati", "castrato");
                    m_Exclude.Add("catabases", "catabasis");
                    m_Exclude.Add("cataclases", "cataclasis");
                    m_Exclude.Add("cataloes", "catalo");
                    m_Exclude.Add("catalyses", "catalysis");
                    m_Exclude.Add("catenae", "catena");
                    m_Exclude.Add("catfishes", "catfish");
                    m_Exclude.Add("cathari", "cathar");
                    m_Exclude.Add("cathexes", "cathexis");
                    m_Exclude.Add("cattaloes", "cattalo");
                    m_Exclude.Add("caudices", "caudex");
                    m_Exclude.Add("caules", "caulis");
                    m_Exclude.Add("cavatine", "cavatina");
                    m_Exclude.Add("cavefishes", "cavefish");
                    m_Exclude.Add("cavetti", "cavetto");
                    m_Exclude.Add("cavo-rilievi", "cavo-rilievo");
                    m_Exclude.Add("ceca", "cecum");
                    m_Exclude.Add("cellae", "cella");
                    m_Exclude.Add("cembali", "cembalo");
                    m_Exclude.Add("centesimi", "centesimo");
                    m_Exclude.Add("centra", "centrum");
                    m_Exclude.Add("cephalothoraces", "cephalothorax");
                    m_Exclude.Add("cercariae", "cercaria");
                    m_Exclude.Add("cercariiae", "cercaria");
                    m_Exclude.Add("cerci", "cercus");
                    m_Exclude.Add("cerebella", "cerebellum");
                    m_Exclude.Add("cerebra", "cerebrum");
                    m_Exclude.Add("cervices", "cervix");
                    m_Exclude.Add("cestuses", "caestus");
                    m_Exclude.Add("cesurae", "cesura");
                    m_Exclude.Add("chadarim", "cheder");
                    m_Exclude.Add("chaetae", "chaeta");
                    m_Exclude.Add("chaises_longues", "chaise_longue");
                    m_Exclude.Add("chalazae", "chalaza");
                    m_Exclude.Add("challoth", "hallah");
                    m_Exclude.Add("chalutzim", "chalutz");
                    m_Exclude.Add("chapaties", "chapati");
                    m_Exclude.Add("chapatties", "chapatti");
                    m_Exclude.Add("chapeaux", "chapeau");
                    m_Exclude.Add("chasidim", "chasid");
                    m_Exclude.Add("chassidim", "chassid");
                    m_Exclude.Add("chateaux", "chateau");
                    m_Exclude.Add("chazanim", "chazan");
                    m_Exclude.Add("chedarim", "cheder");
                    m_Exclude.Add("chefs-d'ouvre", "chef-d'ouvre");
                    m_Exclude.Add("chelae", "chela");
                    m_Exclude.Add("chelicerae", "chelicera");
                    m_Exclude.Add("cherubim", "cherub");
                    m_Exclude.Add("chevaux-de-frise", "cheval-de-frise");
                    m_Exclude.Add("chiasmata", "chiasma");
                    m_Exclude.Add("chiasmi", "chiasmus");
                    m_Exclude.Add("children", "child");
                    m_Exclude.Add("chillies", "chilli");
                    m_Exclude.Add("chinese_eddoes", "chinese_eddo");
                    m_Exclude.Add("chitarroni", "chitarrone");
                    m_Exclude.Add("chlamydes", "chlamys");
                    m_Exclude.Add("chlamyses", "chlamys");
                    m_Exclude.Add("chondromata", "chondroma");
                    m_Exclude.Add("choragi", "choragus");
                    m_Exclude.Add("choriambi", "choriambus");
                    m_Exclude.Add("choux", "chou");
                    m_Exclude.Add("chromonemata", "chromonema");
                    m_Exclude.Add("chrysalides", "chrysalis");
                    m_Exclude.Add("chuvashes", "chuvash");
                    m_Exclude.Add("ciboria", "ciborium");
                    m_Exclude.Add("cicadae", "cicada");
                    m_Exclude.Add("cicale", "cicala");
                    m_Exclude.Add("cicatrices", "cicatrix");
                    m_Exclude.Add("ciceroni", "cicerone");
                    m_Exclude.Add("cicisbei", "cicisbeo");
                    m_Exclude.Add("cilia", "cilium");
                    m_Exclude.Add("cimices", "cimex");
                    m_Exclude.Add("cineraria", "cinerarium");
                    m_Exclude.Add("cingula", "cingulum");
                    m_Exclude.Add("cirri", "cirrus");
                    m_Exclude.Add("cirrocumuli", "cirrocumulus");
                    m_Exclude.Add("cirrostrati", "cirrostratus");
                    m_Exclude.Add("ciscoes", "cisco");
                    m_Exclude.Add("cisternae", "cisterna");
                    m_Exclude.Add("clani", "clarino");
                    m_Exclude.Add("clanos", "clarino");
                    m_Exclude.Add("claroes", "claro");
                    m_Exclude.Add("clepsydrae", "clepsydra");
                    m_Exclude.Add("clinandria", "clinandrium");
                    m_Exclude.Add("clingfishes", "clingfish");
                    m_Exclude.Add("clitella", "clitellum");
                    m_Exclude.Add("cloacae", "cloaca");
                    m_Exclude.Add("clostridia", "clostridium");
                    m_Exclude.Add("cloverleaves", "cloverleaf");
                    m_Exclude.Add("clypei", "clypeus");
                    m_Exclude.Add("coagula", "coagulum");
                    m_Exclude.Add("coalfishes", "coalfish");
                    m_Exclude.Add("cocci", "coccus");
                    m_Exclude.Add("coccyges", "coccyx");
                    m_Exclude.Add("cochleae", "cochlea");
                    m_Exclude.Add("codfishes", "codfish");
                    m_Exclude.Add("codices", "codex");
                    m_Exclude.Add("coelentera", "coelenteron");
                    m_Exclude.Add("coenuri", "coenurus");
                    m_Exclude.Add("cognomina", "cognomen");
                    m_Exclude.Add("cola", "colon");
                    m_Exclude.Add("coleorhizae", "coleorhiza");
                    m_Exclude.Add("collegia", "collegium");
                    m_Exclude.Add("colloquia", "colloquium");
                    m_Exclude.Add("colluvia", "colluvium");
                    m_Exclude.Add("collyria", "collyrium");
                    m_Exclude.Add("colones", "colon");
                    m_Exclude.Add("colossi", "colossus");
                    m_Exclude.Add("columbaria", "columbarium");
                    m_Exclude.Add("columellae", "columella");
                    m_Exclude.Add("comae", "coma");
                    m_Exclude.Add("comatulae", "comatula");
                    m_Exclude.Add("comedones", "comedo");
                    m_Exclude.Add("comics", "comic_strip");
                    m_Exclude.Add("commandoes", "commando");
                    m_Exclude.Add("concertanti", "concertante");
                    m_Exclude.Add("concerti", "concerto");
                    m_Exclude.Add("concerti_grossi", "concerto_grosso");
                    m_Exclude.Add("concertini", "concertino");
                    m_Exclude.Add("conchae", "concha");
                    m_Exclude.Add("condottieri", "condottiere");
                    m_Exclude.Add("condylomata", "condyloma");
                    m_Exclude.Add("confervae", "conferva");
                    m_Exclude.Add("congii", "congius");
                    m_Exclude.Add("conidia", "conidium");
                    m_Exclude.Add("conjunctivae", "conjunctiva");
                    m_Exclude.Add("conquistadores", "conquistador");
                    m_Exclude.Add("consortia", "consortium");
                    m_Exclude.Add("contagia", "contagium");
                    m_Exclude.Add("continua", "continuum");
                    m_Exclude.Add("contralti", "contralto");
                    m_Exclude.Add("conversazioni", "conversazione");
                    m_Exclude.Add("convolvuli", "convolvulus");
                    m_Exclude.Add("cooks-general", "cook-general");
                    m_Exclude.Add("copulae", "copula");
                    m_Exclude.Add("corbiculae", "corbicula");
                    m_Exclude.Add("coria", "corium");
                    m_Exclude.Add("corneae", "cornea");
                    m_Exclude.Add("cornua", "cornu");
                    m_Exclude.Add("coronae", "corona");
                    m_Exclude.Add("corpora", "corpus");
                    m_Exclude.Add("corpora_lutea", "corpus_luteum");
                    m_Exclude.Add("corpora_striata", "corpus_striatum");
                    m_Exclude.Add("corrigenda", "corrigendum");
                    m_Exclude.Add("cortices", "cortex");
                    m_Exclude.Add("cortinae", "cortina");
                    m_Exclude.Add("corybantes", "corybant");
                    m_Exclude.Add("coryphaei", "coryphaeus");
                    m_Exclude.Add("costae", "costa");
                    m_Exclude.Add("cothurni", "cothurnus");
                    m_Exclude.Add("courts_martial", "court_martial");
                    m_Exclude.Add("couteaux", "couteau");
                    m_Exclude.Add("cowfishes", "cowfish");
                    m_Exclude.Add("coxae", "coxa");
                    m_Exclude.Add("cramboes", "crambo");
                    m_Exclude.Add("crania", "cranium");
                    m_Exclude.Add("crases", "crasis");
                    m_Exclude.Add("crawfishes", "crawfish");
                    m_Exclude.Add("crayfishes", "crayfish");
                    m_Exclude.Add("credenda", "credendum");
                    m_Exclude.Add("crematoria", "crematorium");
                    m_Exclude.Add("crescendi", "crescendo");
                    m_Exclude.Add("cribella", "cribellum");
                    m_Exclude.Add("crises", "crisis");
                    m_Exclude.Add("crissa", "crissum");
                    m_Exclude.Add("cristae", "crista");
                    m_Exclude.Add("criteria", "criterion");
                    m_Exclude.Add("cruces", "crux");
                    m_Exclude.Add("crura", "crus");
                    m_Exclude.Add("crusadoes", "crusado");
                    m_Exclude.Add("cruzadoes", "cruzado");
                    m_Exclude.Add("crying", "cry");
                    m_Exclude.Add("cryings", "cry");
                    m_Exclude.Add("ctenidia", "ctenidium");
                    m_Exclude.Add("cubicula", "cubiculum");
                    m_Exclude.Add("culices", "culex");
                    m_Exclude.Add("culpae", "culpa");
                    m_Exclude.Add("culs-de-sac", "cul-de-sac");
                    m_Exclude.Add("culti", "cultus");
                    m_Exclude.Add("cumuli", "cumulus");
                    m_Exclude.Add("cumulonimbi", "cumulonimbus");
                    m_Exclude.Add("cumulostrati", "cumulostratus");
                    m_Exclude.Add("curiae", "curia");
                    m_Exclude.Add("curricula", "curriculum");
                    m_Exclude.Add("custodes", "custos");
                    m_Exclude.Add("cutes", "cutis");
                    m_Exclude.Add("cuticulae", "cuticula");
                    m_Exclude.Add("cuttlefishes", "cuttlefish");
                    m_Exclude.Add("cyclopes", "cyclops");
                    m_Exclude.Add("cycloses", "cyclosis");
                    m_Exclude.Add("cylices", "cylix");
                    m_Exclude.Add("cylikes", "cylix");
                    m_Exclude.Add("cymae", "cyma");
                    m_Exclude.Add("cymatia", "cymatium");
                    m_Exclude.Add("cypselae", "cypsela");
                    m_Exclude.Add("cysticerci", "cysticercus");
                    m_Exclude.Add("dadoes", "dado");
                    m_Exclude.Add("dagoes", "dago");
                    m_Exclude.Add("damselfishes", "damselfish");
                    m_Exclude.Add("data", "datum");
                    m_Exclude.Add("daughters-in-law", "daughter-in-law");
                    m_Exclude.Add("daymio", "daimio");
                    m_Exclude.Add("daymios", "daimio");
                    m_Exclude.Add("dealfishes", "dealfish");
                    m_Exclude.Add("decemviri", "decemvir");
                    m_Exclude.Add("decennia", "decennium");
                    m_Exclude.Add("deciduae", "decidua");
                    m_Exclude.Add("definienda", "definiendum");
                    m_Exclude.Add("definientia", "definiens");
                    m_Exclude.Add("delphinia", "delphinium");
                    m_Exclude.Add("denarii", "denarius");
                    m_Exclude.Add("dentalia", "dentalium");
                    m_Exclude.Add("dermatoses", "dermatosis");
                    m_Exclude.Add("desiderata", "desideratum");
                    m_Exclude.Add("desperadoes", "desperado");
                    m_Exclude.Add("devilfishes", "devilfish");
                    m_Exclude.Add("diaereses", "diaeresis");
                    m_Exclude.Add("diaerses", "diaeresis");
                    m_Exclude.Add("diagnoses", "diagnosis");
                    m_Exclude.Add("dialyses", "dialysis");
                    m_Exclude.Add("diaphyses", "diaphysis");
                    m_Exclude.Add("diapophyses", "diapophysis");
                    m_Exclude.Add("diarthroses", "diarthrosis");
                    m_Exclude.Add("diastalses", "diastalsis");
                    m_Exclude.Add("diastases", "diastasis");
                    m_Exclude.Add("diastemata", "diastema");
                    //TODO:                    m_Exclude.Add("diastemata", "diastema");
                    m_Exclude.Add("diathses", "diathesis");
                    m_Exclude.Add("diazoes", "diazo");
                    m_Exclude.Add("dibbukkim", "dibbuk");
                    m_Exclude.Add("dichasia", "dichasium");
                    m_Exclude.Add("dicta", "dictum");
                    m_Exclude.Add("didoes", "dido");
                    m_Exclude.Add("diereses", "dieresis");
                    m_Exclude.Add("dieses", "diesis");
                    m_Exclude.Add("differentiae", "differentia");
                    m_Exclude.Add("dilettanti", "dilettante");
                    m_Exclude.Add("diluvia", "diluvium");
                    m_Exclude.Add("dingoes", "dingo");
                    m_Exclude.Add("diplococci", "diplococcus");
                    m_Exclude.Add("directors-general", "director-general");
                    m_Exclude.Add("disci", "discus");
                    m_Exclude.Add("discoboli", "discobolos");
                    m_Exclude.Add("dive", "diva");
                    m_Exclude.Add("diverticula", "diverticulum");
                    m_Exclude.Add("divertimenti", "divertimento");
                    m_Exclude.Add("djinn", "djinni");
                    m_Exclude.Add("dodoes", "dodo");
                    m_Exclude.Add("dogfishes", "dogfish");
                    m_Exclude.Add("dogmata", "dogma");
                    m_Exclude.Add("dogteeth", "dogtooth");
                    m_Exclude.Add("dollarfishes", "dollarfish");
                    m_Exclude.Add("domatia", "domatium");
                    m_Exclude.Add("dominoes", "domino");
                    m_Exclude.Add("dormice", "dormouse");
                    m_Exclude.Add("dorsa", "dorsum");
                    m_Exclude.Add("drachmae", "drachma");
                    m_Exclude.Add("drawknives", "drawknife");
                    m_Exclude.Add("drosophilae", "drosophila");
                    m_Exclude.Add("drumfishes", "drumfish");
                    m_Exclude.Add("dryades", "dryad");
                    m_Exclude.Add("dui", "duo");
                    m_Exclude.Add("duona", "duodenum");
                    m_Exclude.Add("duonas", "duodenum");
                    m_Exclude.Add("dupondii", "dupondius");
                    m_Exclude.Add("duumviri", "duumvir");
                    m_Exclude.Add("dwarves", "dwarf");
                    m_Exclude.Add("dybbukkim", "dybbuk");
                    m_Exclude.Add("ecchymoses", "ecchymosis");
                    m_Exclude.Add("ecclesiae", "ecclesia");
                    m_Exclude.Add("ecdyses", "ecdysis");
                    m_Exclude.Add("echidnae", "echidna");
                    m_Exclude.Add("echini", "echinus");
                    m_Exclude.Add("echinococci", "echinococcus");
                    m_Exclude.Add("echoes", "echo");
                    m_Exclude.Add("ectozoa", "ectozoan");
                    m_Exclude.Add("eddoes", "eddo");
                    m_Exclude.Add("edemata", "edema");
                    m_Exclude.Add("effluvia", "effluvium");
                    m_Exclude.Add("eidola", "eidolon");
                    m_Exclude.Add("eisegeses", "eisegesis");
                    m_Exclude.Add("eisteddfodau", "eisteddfod");
                    m_Exclude.Add("elenchi", "elenchus");
                    m_Exclude.Add("ellipses", "ellipsis");
                    m_Exclude.Add("eluvia", "eluvium");
                    m_Exclude.Add("elves", "elf");
                    m_Exclude.Add("elytra", "elytron");
                    m_Exclude.Add("embargoes", "embargo");
                    m_Exclude.Add("emboli", "embolus");
                    m_Exclude.Add("emphases", "emphasis");
                    m_Exclude.Add("emporia", "emporium");
                    m_Exclude.Add("enarthroses", "enarthrosis");
                    m_Exclude.Add("encephala", "encephalon");
                    m_Exclude.Add("encephalitides", "encephalitis");
                    m_Exclude.Add("encephalomata", "encephaloma");
                    m_Exclude.Add("enchiridia", "enchiridion");
                    m_Exclude.Add("enchondromata", "enchondroma");
                    m_Exclude.Add("encomia", "encomium");
                    m_Exclude.Add("endamebae", "endameba");
                    m_Exclude.Add("endamoebae", "endamoeba");
                    m_Exclude.Add("endocardia", "endocardium");
                    m_Exclude.Add("endocrania", "endocranium");
                    m_Exclude.Add("endometria", "endometrium");
                    m_Exclude.Add("endostea", "endosteum");
                    m_Exclude.Add("endostoses", "endostosis");
                    m_Exclude.Add("endothecia", "endothecium");
                    m_Exclude.Add("endothelia", "endothelium");
                    m_Exclude.Add("endotheliomata", "endothelioma");
                    m_Exclude.Add("endozoa", "endozoan");
                    m_Exclude.Add("enemata", "enema");
                    m_Exclude.Add("enneahedra", "enneahedron");
                    m_Exclude.Add("entamebae", "entameba");
                    m_Exclude.Add("entamoebae", "entamoeba");
                    m_Exclude.Add("entases", "entasis");
                    m_Exclude.Add("entera", "enteron");
                    m_Exclude.Add("entia", "ens");
                    m_Exclude.Add("entozoa", "entozoan");
                    m_Exclude.Add("epencephala", "epencephalon");
                    m_Exclude.Add("epentheses", "epenthesis");
                    m_Exclude.Add("epexegeses", "epexegesis");
                    m_Exclude.Add("ephemera", "ephemeron");
                    m_Exclude.Add("ephemerae", "ephemera");
                    m_Exclude.Add("ephemerides", "ephemeris");
                    m_Exclude.Add("ephori", "ephor");
                    m_Exclude.Add("epicalyces", "epicalyx");
                    m_Exclude.Add("epicanthi", "epicanthus");
                    m_Exclude.Add("epicardia", "epicardium");
                    m_Exclude.Add("epicedia", "epicedium");
                    m_Exclude.Add("epicleses", "epiclesis");
                    m_Exclude.Add("epididymides", "epididymis");
                    m_Exclude.Add("epigastria", "epigastrium");
                    m_Exclude.Add("epiglottides", "epiglottis");
                    m_Exclude.Add("epimysia", "epimysium");
                    m_Exclude.Add("epiphenomena", "epiphenomenon");
                    m_Exclude.Add("epiphyses", "epiphysis");
                    m_Exclude.Add("episterna", "episternum");
                    m_Exclude.Add("epithalamia", "epithalamion");
                    m_Exclude.Add("epithelia", "epithelium");
                    m_Exclude.Add("epitheliomata", "epithelioma");
                    m_Exclude.Add("epizoa", "epizoan");
                    m_Exclude.Add("epyllia", "epyllion");
                    m_Exclude.Add("equilibria", "equilibrium");
                    m_Exclude.Add("equiseta", "equisetum");
                    m_Exclude.Add("eringoes", "eringo");
                    m_Exclude.Add("errata", "erratum");
                    m_Exclude.Add("eryngoes", "eryngo");
                    m_Exclude.Add("esophagi", "esophagus");
                    m_Exclude.Add("etyma", "etymon");
                    m_Exclude.Add("eucalypti", "eucalyptus");
                    m_Exclude.Add("eupatridae", "eupatrid");
                    m_Exclude.Add("euripi", "euripus");
                    m_Exclude.Add("exanthemata", "exanthema");
                    m_Exclude.Add("executrices", "executrix");
                    m_Exclude.Add("exegeses", "exegesis");
                    m_Exclude.Add("exempla", "exemplum");
                    m_Exclude.Add("exordia", "exordium");
                    m_Exclude.Add("exostoses", "exostosis");
                    m_Exclude.Add("extrema", "extremum");
                    m_Exclude.Add("eyeteeth", "eyetooth");
                    m_Exclude.Add("fabliaux", "fabliau");
                    m_Exclude.Add("faciae", "facia");
                    m_Exclude.Add("faculae", "facula");
                    m_Exclude.Add("fallfishes", "fallfish");
                    m_Exclude.Add("famuli", "famulus");
                    m_Exclude.Add("farmers-general", "farmer-general");
                    m_Exclude.Add("farragoes", "farrago");
                    m_Exclude.Add("fasciae", "fascia");
                    m_Exclude.Add("fasciculi", "fasciculus");
                    m_Exclude.Add("fathers-in-law", "father-in-law");
                    m_Exclude.Add("fatsoes", "fatso");
                    m_Exclude.Add("faunae", "fauna");
                    m_Exclude.Add("feculae", "fecula");
                    m_Exclude.Add("fedayeen", "fedayee");
                    m_Exclude.Add("feet", "foot");
                    m_Exclude.Add("fellaheen", "fellah");
                    m_Exclude.Add("fellahin", "fellah");
                    m_Exclude.Add("felones_de_se", "felo_de_se");
                    m_Exclude.Add("felos_de_se", "felo_de_se");
                    m_Exclude.Add("femora", "femur");
                    m_Exclude.Add("fenestellae", "fenestella");
                    m_Exclude.Add("fenestrae", "fenestra");
                    m_Exclude.Add("feriae", "feria");
                    m_Exclude.Add("fermate", "fermata");
                    m_Exclude.Add("ferulae", "ferula");
                    m_Exclude.Add("festschriften", "festschrift");
                    m_Exclude.Add("fetiales", "fetial");
                    m_Exclude.Add("fezzes", "fez");
                    m_Exclude.Add("fiascoes", "fiasco");
                    m_Exclude.Add("fibrillae", "fibrilla");
                    m_Exclude.Add("fibromata", "fibroma");
                    m_Exclude.Add("fibulae", "fibula");
                    m_Exclude.Add("ficoes", "fico");
                    m_Exclude.Add("fideicommissa", "fideicommissum");
                    m_Exclude.Add("fieldmice", "fieldmouse");
                    m_Exclude.Add("figs.", "fig.");
                    m_Exclude.Add("fila", "filum");
                    m_Exclude.Add("filariiae", "filaria");
                    m_Exclude.Add("filefishes", "filefish");
                    m_Exclude.Add("fimbriae", "fimbria");
                    m_Exclude.Add("fishes", "fish");
                    m_Exclude.Add("fishwives", "fishwife");
                    m_Exclude.Add("fistulae", "fistula");
                    m_Exclude.Add("flabella", "flabellum");
                    m_Exclude.Add("flagella", "flagellum");
                    m_Exclude.Add("flagstaves", "flagstaff");
                    m_Exclude.Add("flambeaux", "flambeau");
                    m_Exclude.Add("flamines", "flamen");
                    m_Exclude.Add("flamingoes", "flamingo");
                    m_Exclude.Add("flatfeet", "flatfoot");
                    m_Exclude.Add("flatfishes", "flatfish");
                    m_Exclude.Add("fleurs-de-lis", "fleur-de-lis");
                    m_Exclude.Add("fleurs-de-lys", "fleur-de-lys");
                    m_Exclude.Add("flights_of_stairs", "flight_of_stairs");
                    m_Exclude.Add("flittermice", "flittermouse");
                    m_Exclude.Add("flocci", "floccus");
                    m_Exclude.Add("flocculi", "flocculus");
                    m_Exclude.Add("florae", "flora");
                    m_Exclude.Add("floreant.", "floreat");
                    m_Exclude.Add("florilegia", "florilegium");
                    m_Exclude.Add("flowers-de-luce", "flower-de-luce");
                    m_Exclude.Add("flyleaves", "flyleaf");
                    m_Exclude.Add("foci", "focus");
                    m_Exclude.Add("folia", "folium");
                    m_Exclude.Add("fora", "forum");
                    m_Exclude.Add("foramina", "foramen");
                    m_Exclude.Add("forefeet", "forefoot");
                    m_Exclude.Add("foreteeth", "foretooth");
                    m_Exclude.Add("formicaria", "formicarium");
                    m_Exclude.Add("formulae", "formula");
                    m_Exclude.Add("fornices", "fornix");
                    m_Exclude.Add("fortes", "fortis");
                    m_Exclude.Add("fossae", "fossa");
                    m_Exclude.Add("foveae", "fovea");
                    m_Exclude.Add("foveolae", "foveola");
                    m_Exclude.Add("fractocumuli", "fractocumulus");
                    m_Exclude.Add("fractostrati", "fractostratus");
                    m_Exclude.Add("fraena", "fraenum");
                    m_Exclude.Add("frauen", "frau");
                    m_Exclude.Add("frena", "frenum");
                    m_Exclude.Add("frenula", "frenulum");
                    m_Exclude.Add("frescoes", "fresco");
                    m_Exclude.Add("fricandeaux", "fricandeau");
                    m_Exclude.Add("fricandoes", "fricando");
                    m_Exclude.Add("frijoles", "frijol");
                    m_Exclude.Add("frogfishes", "frogfish");
                    m_Exclude.Add("frontes", "frons");
                    m_Exclude.Add("frusta", "frustum");
                    m_Exclude.Add("fuci", "fucus");
                    m_Exclude.Add("fulcra", "fulcrum");
                    m_Exclude.Add("fumatoria", "fumatorium");
                    m_Exclude.Add("fundi", "fundus");
                    m_Exclude.Add("fungi", "fungus");
                    m_Exclude.Add("funiculi", "funiculus");
                    m_Exclude.Add("furcula", "furculum");
                    m_Exclude.Add("furculae", "furcula");
                    m_Exclude.Add("furfures", "furfur");
                    m_Exclude.Add("galeae", "galea");
                    m_Exclude.Add("gambadoes", "gambado");
                    m_Exclude.Add("gametangia", "gametangium");
                    m_Exclude.Add("gametoecia", "gametoecium");
                    m_Exclude.Add("gammadia", "gammadion");
                    m_Exclude.Add("ganglia", "ganglion");
                    m_Exclude.Add("garfishes", "garfish");
                    //TODO:                    m_Exclude.Add("gasses", "gas");
                    m_Exclude.Add("gastrulae", "gastrula");
                    m_Exclude.Add("gateaux", "gateau");
                    m_Exclude.Add("gazeboes", "gazebo");
                    m_Exclude.Add("geckoes", "gecko");
                    m_Exclude.Add("geese", "goose");
                    m_Exclude.Add("gelsemia", "gelsemium");
                    m_Exclude.Add("gemboks", "gemsbok");
                    m_Exclude.Add("gembucks", "gemsbuck");
                    m_Exclude.Add("gemeinschaften", "gemeinschaft");
                    m_Exclude.Add("gemmae", "gemma");
                    m_Exclude.Add("genera", "genus");
                    m_Exclude.Add("generatrices", "generatrix");
                    m_Exclude.Add("geneses", "genesis");
                    m_Exclude.Add("genii", "genius");
                    m_Exclude.Add("gentes", "gens");
                    m_Exclude.Add("gentlemen-at-arms", "gentleman-at-arms");
                    m_Exclude.Add("gentlemen-farmers", "gentleman-farmer");
                    m_Exclude.Add("genua", "genu");
                    m_Exclude.Add("germina", "germen");
                    m_Exclude.Add("gesellschaften", "gesellschaft");
                    m_Exclude.Add("gestalten", "gestalt");
                    m_Exclude.Add("ghettoes", "ghetto");
                    m_Exclude.Add("gingivae", "gingiva");
                    m_Exclude.Add("gingkoes", "gingko");
                    m_Exclude.Add("ginglymi", "ginglymus");
                    m_Exclude.Add("ginkgoes", "ginkgo");
                    m_Exclude.Add("gippoes", "gippo");
                    m_Exclude.Add("glabellae", "glabella");
                    m_Exclude.Add("gladioli", "gladiolus");
                    m_Exclude.Add("glandes", "glans");
                    m_Exclude.Add("gliomata", "glioma");
                    m_Exclude.Add("glissandi", "glissando");
                    m_Exclude.Add("globefishes", "globefish");
                    m_Exclude.Add("globigerinae", "globigerina");
                    m_Exclude.Add("glochidcia", "glochidium");
                    m_Exclude.Add("glochidia", "glochidium");
                    m_Exclude.Add("glomeruli", "glomerulus");
                    m_Exclude.Add("glossae", "glossa");
                    m_Exclude.Add("glottides", "glottis");
                    m_Exclude.Add("glutaei", "glutaeus");
                    m_Exclude.Add("glutei", "gluteus");
                    m_Exclude.Add("gnoses", "gnosis");
                    m_Exclude.Add("goatfishes", "goatfish");
                    m_Exclude.Add("goboes", "gobo");
                    m_Exclude.Add("godchildren", "godchild");
                    m_Exclude.Add("goes", "go");
                    m_Exclude.Add("goings-over", "going-over");
                    m_Exclude.Add("goldfishes", "goldfish");
                    m_Exclude.Add("gomphoses", "gomphosis");
                    m_Exclude.Add("gonia", "gonion");
                    m_Exclude.Add("gonidia", "gonidium");
                    m_Exclude.Add("gonococci", "gonococcus");
                    m_Exclude.Add("goodwives", "goodwife");
                    m_Exclude.Add("goosefishes", "goosefish");
                    m_Exclude.Add("gorgoneia", "gorgoneion");
                    m_Exclude.Add("gospopoda", "gospodin");
                    m_Exclude.Add("governors_general", "governor_general");
                    m_Exclude.Add("goyim", "goy");
                    m_Exclude.Add("grafen", "graf");
                    m_Exclude.Add("graffiti", "graffito");
                    m_Exclude.Add("grandchildren", "grandchild");
                    m_Exclude.Add("grants-in-aid", "grant-in-aid");
                    m_Exclude.Add("granulomata", "granuloma");
                    m_Exclude.Add("gravamina", "gravamen");
                    m_Exclude.Add("grig-gris", "gris-gris");
                    m_Exclude.Add("groszy", "grosz");
                    m_Exclude.Add("grottoes", "grotto");
                    m_Exclude.Add("guilder", "guilde");
                    m_Exclude.Add("guilders", "guilde");
                    m_Exclude.Add("guitarfishes", "guitarfish");
                    m_Exclude.Add("gummata", "gumma");
                    m_Exclude.Add("gurnard", "gurnar");
                    m_Exclude.Add("gurnards", "gurnar");
                    m_Exclude.Add("guttae", "gutta");
                    m_Exclude.Add("gymnasia", "gymnasium");
                    m_Exclude.Add("gynaecea", "gynaeceum");
                    m_Exclude.Add("gynaecia", "gynaecium");
                    m_Exclude.Add("gynecea", "gynecium");
                    m_Exclude.Add("gynecia", "gynecium");
                    m_Exclude.Add("gynoecea", "gynoecium");
                    m_Exclude.Add("gynoecia", "gynoecium");
                    m_Exclude.Add("gyri", "gyrus");
                    m_Exclude.Add("hadarim", "heder");
                    m_Exclude.Add("hadjes", "hadj");
                    m_Exclude.Add("haematolyses", "haematolysis");
                    m_Exclude.Add("haematomata", "haematoma");
                    m_Exclude.Add("haematozoa", "haematozoon");
                    m_Exclude.Add("haemodialyses", "haemodialysis");
                    m_Exclude.Add("haemolyses", "haemolysis");
                    m_Exclude.Add("haemoptyses", "haemoptysis");
                    m_Exclude.Add("haeredes", "haeres");
                    m_Exclude.Add("haftaroth", "haftarah");
                    m_Exclude.Add("hagfishes", "hagfish");
                    m_Exclude.Add("haggadas", "haggada");
                    m_Exclude.Add("haggadoth", "haggada");
                    m_Exclude.Add("hajjes", "hajj");
                    m_Exclude.Add("haleru", "haler");
                    m_Exclude.Add("hallot", "hallah");
                    m_Exclude.Add("halloth", "hallah");
                    m_Exclude.Add("halluces", "hallux");
                    m_Exclude.Add("haloes", "halo");
                    m_Exclude.Add("halteres", "halter");
                    m_Exclude.Add("halves", "half");
                    m_Exclude.Add("hamuli", "hamulus");
                    m_Exclude.Add("hangers-on", "hanger-on");
                    m_Exclude.Add("haphtaroth", "haphtarah");
                    m_Exclude.Add("haredim", "haredi");
                    m_Exclude.Add("haruspices", "haruspex");
                    m_Exclude.Add("hasidim", "hasid");
                    m_Exclude.Add("hassidim", "hassid");
                    m_Exclude.Add("haustella", "haustellum");
                    m_Exclude.Add("haustoria", "haustorium");
                    m_Exclude.Add("hazzanim", "hazzan");
                    m_Exclude.Add("hectocotyli", "hectocotylus");
                    m_Exclude.Add("heirs-at-law", "heir-at-law");
                    m_Exclude.Add("heldentenore", "heldentenor");
                    m_Exclude.Add("helices", "helix");
                    m_Exclude.Add("heliozoa", "heliozoan");
                    m_Exclude.Add("hematolyses", "hematolysis");
                    m_Exclude.Add("hematomata", "hematoma");
                    m_Exclude.Add("hematozoa", "hematozoon");
                    m_Exclude.Add("hemelytra", "hemelytron");
                    m_Exclude.Add("hemielytra", "hemielytron");
                    m_Exclude.Add("hemodialyses", "hemodialysis");
                    m_Exclude.Add("hemolyses", "hemolysis");
                    m_Exclude.Add("hemoptyses", "hemoptysis");
                    m_Exclude.Add("hendecahedra", "hendecahedron");
                    m_Exclude.Add("hens-and-chickens", "hen-and-chickens");
                    m_Exclude.Add("heraclidae", "heraclid");
                    m_Exclude.Add("heraklidae", "heraklid");
                    m_Exclude.Add("herbaria", "herbarium");
                    m_Exclude.Add("hermae", "herm");
                    m_Exclude.Add("hermai", "herma");
                    m_Exclude.Add("herniae", "hernia");
                    m_Exclude.Add("heroes", "hero");
                    m_Exclude.Add("herren", "herr");
                    m_Exclude.Add("hetaerae", "hetaera");
                    m_Exclude.Add("hetairai", "hetaira");
                    m_Exclude.Add("hibernacula", "hibernaculum");
                    m_Exclude.Add("hieracosphinges", "hieracosphinx");
                    m_Exclude.Add("hila", "hilum");
                    m_Exclude.Add("hili", "hilus");
                    m_Exclude.Add("himatia", "himation");
                    m_Exclude.Add("hippocampi", "hippocampus");
                    m_Exclude.Add("hippopotami", "hippopotamus");
                    m_Exclude.Add("hoboes", "hobo");
                    m_Exclude.Add("hogfishes", "hogfish");
                    m_Exclude.Add("homunculi", "homunculus");
                    m_Exclude.Add("honoraria", "honorarium");
                    m_Exclude.Add("hooves", "hoof");
                    m_Exclude.Add("horologia", "horologium");
                    m_Exclude.Add("houses_of_cards", "house_of_cards");
                    m_Exclude.Add("housewives", "housewife");
                    m_Exclude.Add("humeri", "humerus");
                    m_Exclude.Add("hydrae", "hydra");
                    m_Exclude.Add("hydromedusae", "hydromedusa");
                    m_Exclude.Add("hydrozoa", "hydrozoan");
                    m_Exclude.Add("hymenoptera", "hymenopteran");
                    m_Exclude.Add("hynia", "hymenium");
                    m_Exclude.Add("hyniums", "hymenium");
                    m_Exclude.Add("hypanthia", "hypanthium");
                    m_Exclude.Add("hyperostoses", "hyperostosis");
                    m_Exclude.Add("hyphae", "hypha");
                    m_Exclude.Add("hypnoses", "hypnosis");
                    m_Exclude.Add("hypochondria", "hypochondrium");
                    m_Exclude.Add("hypogastria", "hypogastrium");
                    m_Exclude.Add("hypogea", "hypogeum");
                    m_Exclude.Add("hypophyses", "hypophysis");
                    m_Exclude.Add("hypostases", "hypostasis");
                    m_Exclude.Add("hypothalami", "hypothalamus");
                    m_Exclude.Add("hypotheses", "hypothesis");
                    m_Exclude.Add("hyraces", "hyrax");
                    m_Exclude.Add("iambi", "iamb");
                    m_Exclude.Add("ibices", "ibex");
                    m_Exclude.Add("ibo", "igbo");
                    m_Exclude.Add("ichthyosauri", "ichthyosaurus");
                    m_Exclude.Add("ichthyosauruses", "ichthyosaur");
                    m_Exclude.Add("iconostases", "iconostas");
                    m_Exclude.Add("icosahedra", "icosahedron");
                    m_Exclude.Add("ideata", "ideatum");
                    m_Exclude.Add("igorrorote", "igorrote");
                    m_Exclude.Add("ilia", "ilium");
                    m_Exclude.Add("imagines", "imago");
                    m_Exclude.Add("imagoes", "imago");
                    m_Exclude.Add("imperia", "imperium");
                    m_Exclude.Add("impies", "impi");
                    m_Exclude.Add("incubi", "incubus");
                    m_Exclude.Add("incudes", "incus");
                    m_Exclude.Add("indices", "index");
                    m_Exclude.Add("indigoes", "indigo");
                    m_Exclude.Add("indumenta", "indumentum");
                    m_Exclude.Add("indusia", "indusium");
                    m_Exclude.Add("infundibula", "infundibulum");
                    m_Exclude.Add("ingushes", "ingush");
                    m_Exclude.Add("innuendoes", "innuendo");
                    m_Exclude.Add("inocula", "inoculum");
                    m_Exclude.Add("inquisitors-general", "inquisitor-general");
                    m_Exclude.Add("insectaria", "insectarium");
                    m_Exclude.Add("insulae", "insula");
                    m_Exclude.Add("intagli", "intaglio");
                    m_Exclude.Add("interleaves", "interleaf");
                    m_Exclude.Add("intermezzi", "intermezzo");
                    m_Exclude.Add("interreges", "interrex");
                    m_Exclude.Add("interregna", "interregnum");
                    m_Exclude.Add("intimae", "intima");
                    m_Exclude.Add("involucella", "involucellum");
                    m_Exclude.Add("involucra", "involucre");
                    //TODO:                    m_Exclude.Add("involucra", "involucrum");
                    m_Exclude.Add("irides", "iris");
                    m_Exclude.Add("ischia", "ischium");
                    m_Exclude.Add("isthmi", "isthmus");
                    m_Exclude.Add("jackeroos", "jackaroo");
                    m_Exclude.Add("jackfishes", "jackfish");
                    m_Exclude.Add("jackknives", "jackknife");
                    m_Exclude.Add("jacks-in-the-box", "jack-in-the-box");
                    m_Exclude.Add("jambeaux", "jambeau");
                    m_Exclude.Add("jellyfishes", "jellyfish");
                    m_Exclude.Add("jewelfishes", "jewelfish");
                    m_Exclude.Add("jewfishes", "jewfish");
                    m_Exclude.Add("jingoes", "jingo");
                    m_Exclude.Add("jinn", "jinni");
                    m_Exclude.Add("joes", "jo");
                    m_Exclude.Add("judge_advocates_general", "judge_advocate_general");
                    m_Exclude.Add("jura", "jus");
                    m_Exclude.Add("kaddishim", "kaddish");
                    m_Exclude.Add("kalmuck", "kalmuc");
                    m_Exclude.Add("kalmucks", "kalmuc");
                    m_Exclude.Add("katabases", "katabasis");
                    m_Exclude.Add("keeshonden", "keeshond");
                    m_Exclude.Add("kibbutzim", "kibbutz");
                    m_Exclude.Add("killifishes", "killifish");
                    m_Exclude.Add("kingfishes", "kingfish");
                    m_Exclude.Add("kings-of-arms", "king-of-arms");
                    m_Exclude.Add("knights_bachelor", "knight_bachelor");
                    m_Exclude.Add("knights_bachelors", "knight_bachelor");
                    m_Exclude.Add("knights_templar", "knight_templar");
                    m_Exclude.Add("knights_templars", "knight_templar");
                    m_Exclude.Add("knives", "knife");
                    m_Exclude.Add("kohlrabies", "kohlrabi");
                    m_Exclude.Add("kronen", "krone");
                    m_Exclude.Add("kroner", "krone");
                    m_Exclude.Add("kronur", "krona");
                    m_Exclude.Add("krooni", "kroon");
                    m_Exclude.Add("kylikes", "kylix");
                    m_Exclude.Add("labara", "labarum");
                    m_Exclude.Add("labella", "labellum");
                    m_Exclude.Add("labia", "labium");
                    m_Exclude.Add("labra", "labrum");
                    m_Exclude.Add("lactobacilli", "lactobacillus");
                    m_Exclude.Add("lacunae", "lacuna");
                    m_Exclude.Add("lacunaria", "lacunar");
                    m_Exclude.Add("ladies-in-waiting", "lady-in-waiting");
                    m_Exclude.Add("lamellae", "lamella");
                    m_Exclude.Add("lamiae", "lamia");
                    m_Exclude.Add("laminae", "lamina");
                    m_Exclude.Add("lapilli", "lapillus");
                    m_Exclude.Add("lapithae", "lapith");
                    m_Exclude.Add("larvae", "larva");
                    m_Exclude.Add("larynges", "larynx");
                    m_Exclude.Add("lassoes", "lasso");
                    m_Exclude.Add("lati", "lat");
                    m_Exclude.Add("latices", "latex");
                    m_Exclude.Add("latifundia", "latifundium");
                    m_Exclude.Add("latu", "lat");
                    m_Exclude.Add("lavaboes", "lavabo");
                    m_Exclude.Add("leaves", "leaf");
                    m_Exclude.Add("lecythi", "lecythus");
                    m_Exclude.Add("leges", "lex");
                    m_Exclude.Add("lei", "leu");
                    m_Exclude.Add("lemmata", "lemma");
                    m_Exclude.Add("lemnisci", "lemniscus");
                    m_Exclude.Add("lenes", "lenis");
                    m_Exclude.Add("lentigines", "lentigo");
                    m_Exclude.Add("leonides", "leonid");
                    m_Exclude.Add("lepidoptera", "lepidopteran");
                    m_Exclude.Add("leprosaria", "leprosarium");
                    m_Exclude.Add("lepta", "lepton");
                    m_Exclude.Add("leptocephali", "leptocephalus");
                    m_Exclude.Add("leucocytozoa", "leucocytozoan");
                    m_Exclude.Add("leva", "lev");
                    m_Exclude.Add("librae", "libra");
                    m_Exclude.Add("libretti", "libretto");
                    m_Exclude.Add("lice", "louse");
                    m_Exclude.Add("lieder", "lied");
                    m_Exclude.Add("ligulae", "ligula");
                    m_Exclude.Add("limbi", "limbus");
                    m_Exclude.Add("limina", "limen");
                    m_Exclude.Add("limites", "limes");
                    m_Exclude.Add("limuli", "limulus");
                    m_Exclude.Add("lingoes", "lingo");
                    m_Exclude.Add("linguae", "lingua");
                    m_Exclude.Add("linguae_francae", "lingua_franca");
                    m_Exclude.Add("lionfishes", "lionfish");
                    m_Exclude.Add("lipomata", "lipoma");
                    m_Exclude.Add("lire", "lira");
                    m_Exclude.Add("liriodendra", "liriodendron");
                    m_Exclude.Add("listente", "sente");
                    m_Exclude.Add("litai", "lit");
                    m_Exclude.Add("litu", "litas");
                    m_Exclude.Add("lives", "life");
                    m_Exclude.Add("lixivia", "lixivium");
                    m_Exclude.Add("loaves", "loaf");
                    m_Exclude.Add("loci", "locus");
                    m_Exclude.Add("loculi", "loculus");
                    m_Exclude.Add("loggie", "loggia");
                    m_Exclude.Add("logia", "logion");
                    m_Exclude.Add("lomenta", "lomentum");
                    m_Exclude.Add("longobardi", "longobard");
                    m_Exclude.Add("loricae", "lorica");
                    m_Exclude.Add("lubritoria", "lubritorium");
                    m_Exclude.Add("lumbus", "lumbi");
                    m_Exclude.Add("lumina", "lumen");
                    m_Exclude.Add("lumpfishes", "lumpfish");
                    m_Exclude.Add("lungfishes", "lungfish");
                    m_Exclude.Add("lunulae", "lunula");
                    m_Exclude.Add("lures", "lur");
                    m_Exclude.Add("lustra", "lustre");
                    m_Exclude.Add("lyings-in", "lying-in");
                    m_Exclude.Add("lymphangitides", "lymphangitis");
                    m_Exclude.Add("lymphomata", "lymphoma");
                    m_Exclude.Add("lymphopoieses", "lymphopoiesis");
                    m_Exclude.Add("lyses", "lysis");
                    m_Exclude.Add("lyttae", "lytta");
                    m_Exclude.Add("maare", "maar");
                    m_Exclude.Add("macaronies", "macaroni");
                    m_Exclude.Add("maccaronies", "maccaroni");
                    m_Exclude.Add("machzorim", "machzor");
                    m_Exclude.Add("macronuclei", "macronucleus");
                    m_Exclude.Add("macrosporangia", "macrosporangium");
                    m_Exclude.Add("maculae", "macula");
                    m_Exclude.Add("madornos", "madrono");
                    m_Exclude.Add("maestri", "maestro");
                    m_Exclude.Add("mafiosi", "mafioso");
                    m_Exclude.Add("magi", "magus");
                    m_Exclude.Add("magmata", "magma");
                    m_Exclude.Add("magnificoes", "magnifico");
                    m_Exclude.Add("mahzorim", "mahzor");
                    m_Exclude.Add("major-axes", "major_axis");
                    m_Exclude.Add("major_axes", "major_axis");
                    m_Exclude.Add("makuta", "likuta");
                    m_Exclude.Add("mallei", "malleus");
                    m_Exclude.Add("malleoli", "malleolus");
                    m_Exclude.Add("maloti", "loti");
                    m_Exclude.Add("mamillae", "mamilla");
                    m_Exclude.Add("mammae", "mamma");
                    m_Exclude.Add("mammillae", "mammilla");
                    m_Exclude.Add("mandingoes", "mandingo");
                    m_Exclude.Add("mangoes", "mango");
                    m_Exclude.Add("manifestoes", "manifesto");
                    m_Exclude.Add("manteaux", "manteau");
                    m_Exclude.Add("mantes", "mantis");
                    m_Exclude.Add("manubria", "manubrium");
                    m_Exclude.Add("marchese", "marchesa");
                    m_Exclude.Add("marchesi", "marchese");
                    m_Exclude.Add("maremme", "maremma");
                    m_Exclude.Add("markkaa", "markka");
                    m_Exclude.Add("marsupia", "marsupium");
                    m_Exclude.Add("marvels-of-peru", "marvel-of-peru");
                    m_Exclude.Add("mass_media", "mass_medium");
                    m_Exclude.Add("masses", "mass");
                    m_Exclude.Add("masters-at-arms", "master-at-arms");
                    m_Exclude.Add("matrices", "matrix");
                    m_Exclude.Add("matzoth", "matzo");
                    m_Exclude.Add("mausolea", "mausoleum");
                    m_Exclude.Add("maxillae", "maxilla");
                    m_Exclude.Add("maxima", "maximum");
                    m_Exclude.Add("media", "medium");
                    m_Exclude.Add("mediae", "media");
                    m_Exclude.Add("mediastina", "mediastinum");
                    m_Exclude.Add("medullae", "medulla");
                    m_Exclude.Add("medullae_oblongatae", "medulla_oblongata");
                    m_Exclude.Add("medusae", "medusa");
                    m_Exclude.Add("megara", "megaron");
                    m_Exclude.Add("megasporangia", "megasporangium");
                    m_Exclude.Add("megilloth", "megillah");
                    m_Exclude.Add("meioses", "meiosis");
                    m_Exclude.Add("melanomata", "melanoma");
                    m_Exclude.Add("melismata", "melisma");
                    m_Exclude.Add("mementoes", "memento");
                    m_Exclude.Add("memoranda", "memorandum");
                    m_Exclude.Add("men", "man");
                    m_Exclude.Add("men-at-arms", "man-at-arms");
                    m_Exclude.Add("men-o'-war", "man-of-war");
                    m_Exclude.Add("men-of-war", "man-of-war");
                    m_Exclude.Add("men_of_letters", "man_of_letters");
                    m_Exclude.Add("menisci", "meniscus");
                    m_Exclude.Add("menservants", "manservant");
                    m_Exclude.Add("menstrua", "menstruum");
                    m_Exclude.Add("mesdames", "madame");
                    m_Exclude.Add("mesdemoiselles", "mademoiselle");
                    m_Exclude.Add("mesentera", "mesenteron");
                    m_Exclude.Add("mesothoraces", "mesothorax");
                    m_Exclude.Add("messeigneurs", "monseigneur");
                    m_Exclude.Add("messieurs", "monsieur");
                    m_Exclude.Add("mestizoes", "mestizo");
                    m_Exclude.Add("metacarpi", "metacarpus");
                    m_Exclude.Add("metamorphoses", "metamorphosis");
                    m_Exclude.Add("metanephroi", "metanephros");
                    m_Exclude.Add("metastases", "metastasis");
                    m_Exclude.Add("metatarsi", "metatarsus");
                    m_Exclude.Add("metatheses", "metathesis");
                    m_Exclude.Add("metathoraces", "metathorax");
                    m_Exclude.Add("metazoa", "metazoan");
                    m_Exclude.Add("metempsychoses", "metempsychosis");
                    m_Exclude.Add("metencephala", "metencephalon");
                    m_Exclude.Add("mezuzoth", "mezuzah");
                    m_Exclude.Add("miasmata", "miasma");
                    m_Exclude.Add("mice", "mouse");
                    m_Exclude.Add("microanalyses", "microanalysis");
                    m_Exclude.Add("micrococci", "micrococcus");
                    m_Exclude.Add("micronuclei", "micronucleus");
                    m_Exclude.Add("microsporangia", "microsporangium");
                    m_Exclude.Add("midrashim", "midrash");
                    m_Exclude.Add("midwives", "midwife");
                    m_Exclude.Add("milia", "milium");
                    m_Exclude.Add("milieux", "milieu");
                    //TODO:                    m_Exclude.Add("militated_against", "militate_against");
                    m_Exclude.Add("milkfishes", "milkfish");
                    m_Exclude.Add("millennia", "millennium");
                    m_Exclude.Add("minae", "mina");
                    m_Exclude.Add("minima", "minimum");
                    m_Exclude.Add("ministeria", "ministerium");
                    m_Exclude.Add("minutiae", "minutia");
                    m_Exclude.Add("minyanim", "minyan");
                    m_Exclude.Add("mioses", "miosis");
                    m_Exclude.Add("miracidia", "miracidium");
                    m_Exclude.Add("miri", "mir");
                    m_Exclude.Add("mishnayoth", "mishna");
                    m_Exclude.Add("mitochondria", "mitochondrion");
                    m_Exclude.Add("mitzvoth", "mitzvah");
                    m_Exclude.Add("modioli", "modiolus");
                    m_Exclude.Add("moduli", "modulus");
                    m_Exclude.Add("momenta", "momentum");
                    m_Exclude.Add("moments_of_truth", "moment_of_truth");
                    m_Exclude.Add("momi", "momus");
                    m_Exclude.Add("monades", "monad");
                    m_Exclude.Add("monkfishes", "monkfish");
                    m_Exclude.Add("monochasia", "monochasium");
                    m_Exclude.Add("monopodia", "monopodium");
                    m_Exclude.Add("monoptera", "monopteron");
                    m_Exclude.Add("monopteroi", "monopteros");
                    m_Exclude.Add("monsignori", "monsignor");
                    m_Exclude.Add("monts-de-piete", "mont-de-piete");
                    m_Exclude.Add("mooncalves", "mooncalf");
                    m_Exclude.Add("moonfishes", "moonfish");
                    m_Exclude.Add("morae", "mora");
                    m_Exclude.Add("moratoria", "moratorium");
                    m_Exclude.Add("morceaux", "morceau");
                    m_Exclude.Add("morescoes", "moresco");
                    m_Exclude.Add("moriscoes", "morisco");
                    m_Exclude.Add("morphallaxes", "morphallaxis");
                    m_Exclude.Add("morphoses", "morphosis");
                    m_Exclude.Add("morses", "morse");
                    m_Exclude.Add("morulae", "morula");
                    m_Exclude.Add("mosasauri", "mosasaurus");
                    m_Exclude.Add("moshavim", "moshav");
                    m_Exclude.Add("moslim", "moslem");
                    m_Exclude.Add("moslims", "moslem");
                    m_Exclude.Add("mosquitoes", "mosquito");
                    m_Exclude.Add("mothers-in-law", "mother-in-law");
                    m_Exclude.Add("mothers_superior", "mother_superior");
                    m_Exclude.Add("mottoes", "motto");
                    m_Exclude.Add("movers_and_shakers", "mover_and_shaker");
                    m_Exclude.Add("mucosae", "mucosa");
                    m_Exclude.Add("mucrones", "mucro");
                    m_Exclude.Add("mudejares", "mudejar");
                    m_Exclude.Add("mudfishes", "mudfish");
                    m_Exclude.Add("mulattoes", "mulatto");
                    m_Exclude.Add("multiparae", "multipara");
                    m_Exclude.Add("murices", "murex");
                    m_Exclude.Add("muskallunge", "muskellunge");
                    m_Exclude.Add("mycelia", "mycelium");
                    m_Exclude.Add("mycetomata", "mycetoma");
                    m_Exclude.Add("mycobacteria", "mycobacterium");
                    m_Exclude.Add("mycorrhizae", "mycorrhiza");
                    m_Exclude.Add("myelencephala", "myelencephalon");
                    m_Exclude.Add("myiases", "myiasis");
                    m_Exclude.Add("myocardia", "myocardium");
                    m_Exclude.Add("myofibrillae", "myofibrilla");
                    m_Exclude.Add("myomata", "myoma");
                    m_Exclude.Add("myoses", "myosis");
                    m_Exclude.Add("myrmidones", "myrmidon");
                    m_Exclude.Add("mythoi", "mythos");
                    m_Exclude.Add("myxomata", "myxoma");
                    m_Exclude.Add("naevi", "naevus");
                    m_Exclude.Add("naiades", "naiad");
                    m_Exclude.Add("naoi", "naos");
                    m_Exclude.Add("narcissi", "narcissus");
                    m_Exclude.Add("nares", "naris");
                    m_Exclude.Add("nasopharynges", "nasopharynx");
                    m_Exclude.Add("natatoria", "natatorium");
                    m_Exclude.Add("naumachiae", "naumachia");
                    m_Exclude.Add("nauplii", "nauplius");
                    m_Exclude.Add("nautili", "nautilus");
                    m_Exclude.Add("navahoes", "navaho");
                    m_Exclude.Add("navajoes", "navajo");
                    m_Exclude.Add("nebulae", "nebula");
                    m_Exclude.Add("necropoleis", "necropolis");
                    m_Exclude.Add("needlefishes", "needlefish");
                    m_Exclude.Add("negrilloes", "negrillo");
                    m_Exclude.Add("negritoes", "negrito");
                    m_Exclude.Add("negroes", "negro");
                    m_Exclude.Add("nemeses", "nemesis");
                    m_Exclude.Add("nephridia", "nephridium");
                    m_Exclude.Add("nereides", "nereid");
                    m_Exclude.Add("neurohypophyses", "neurohypophysis");
                    m_Exclude.Add("neuromata", "neuroma");
                    m_Exclude.Add("neuroptera", "neuropteron");
                    m_Exclude.Add("neuroses", "neurosis");
                    m_Exclude.Add("nevi", "nevus");
                    m_Exclude.Add("nibelungen", "nibelung");
                    m_Exclude.Add("nidi", "nidus");
                    m_Exclude.Add("nielli", "niello");
                    m_Exclude.Add("nimbi", "nimbus");
                    m_Exclude.Add("nimbostrati", "nimbostratus");
                    m_Exclude.Add("noctilucae", "noctiluca");
                    m_Exclude.Add("nodi", "nodus");
                    m_Exclude.Add("noes", "no");
                    m_Exclude.Add("nomina", "nomen");
                    m_Exclude.Add("nota", "notum");
                    m_Exclude.Add("noumena", "noumenon");
                    m_Exclude.Add("novae", "nova");
                    m_Exclude.Add("novelle", "novella");
                    m_Exclude.Add("novenae", "novena");
                    m_Exclude.Add("nubeculae", "nubecula");
                    m_Exclude.Add("nucelli", "nucellus");
                    m_Exclude.Add("nuchae", "nucha");
                    m_Exclude.Add("nuclei", "nucleus");
                    m_Exclude.Add("nucleoli", "nucleolus");
                    m_Exclude.Add("nulliparae", "nullipara");
                    m_Exclude.Add("numbfishes", "numbfish");
                    m_Exclude.Add("numina", "numen");
                    m_Exclude.Add("nymphae", "nympha");
                    m_Exclude.Add("oarfishes", "oarfish");
                    m_Exclude.Add("oases", "oasis");
                    m_Exclude.Add("obeli", "obelus");
                    m_Exclude.Add("objets_d'art", "objet_d'art");
                    m_Exclude.Add("obligati", "obligato");
                    m_Exclude.Add("oboli", "obolus");
                    m_Exclude.Add("occipita", "occiput");
                    m_Exclude.Add("oceanaria", "oceanarium");
                    m_Exclude.Add("oceanides", "oceanid");
                    m_Exclude.Add("ocelli", "ocellus");
                    m_Exclude.Add("ochreae", "ochrea");
                    m_Exclude.Add("ocreae", "ochrea");
                    m_Exclude.Add("octahedra", "octahedron");
                    m_Exclude.Add("octopi", "octopus");
                    m_Exclude.Add("oculi", "oculus");
                    m_Exclude.Add("odea", "odeum");
                    m_Exclude.Add("oedemata", "edema");
                    m_Exclude.Add("oesophagi", "esophagus");
                    m_Exclude.Add("oldwives", "oldwife");
                    m_Exclude.Add("olea", "oleum");
                    m_Exclude.Add("omasa", "omasum");
                    m_Exclude.Add("omayyades", "omayyad");
                    m_Exclude.Add("omenta", "omentum");
                    m_Exclude.Add("ommatidia", "ommatidium");
                    m_Exclude.Add("ommiades", "ommiad");
                    m_Exclude.Add("onagri", "onager");
                    m_Exclude.Add("oogonia", "oogonium");
                    m_Exclude.Add("oothecae", "ootheca");
                    m_Exclude.Add("operas_seria", "opera_seria");
                    m_Exclude.Add("opercula", "operculum");
                    m_Exclude.Add("optic_axes", "optic_axis");
                    m_Exclude.Add("optima", "optimum");
                    m_Exclude.Add("ora", "os");
                    m_Exclude.Add("organa", "organon");
                    m_Exclude.Add("organums", "organa");
                    m_Exclude.Add("orthoptera", "orthopteron");
                    m_Exclude.Add("osar", "os");
                    m_Exclude.Add("oscula", "osculum");
                    m_Exclude.Add("ossa", "os");
                    m_Exclude.Add("osteomata", "osteoma");
                    m_Exclude.Add("ostia", "ostium");
                    m_Exclude.Add("ottomans", "othman");
                    m_Exclude.Add("ova", "ovum");
                    m_Exclude.Add("ovoli", "ovolo");
                    m_Exclude.Add("ovotestes", "ovotestis");
                    m_Exclude.Add("oxen", "ox");
                    m_Exclude.Add("oxymora", "oxymoron");
                    m_Exclude.Add("paddlefishes", "paddlefish");
                    m_Exclude.Add("paise", "paisa");
                    m_Exclude.Add("paleae", "palea");
                    m_Exclude.Add("palestrae", "palestra");
                    m_Exclude.Add("palingeneses", "palingenesis");
                    m_Exclude.Add("pallia", "pallium");
                    m_Exclude.Add("palmettoes", "palmetto");
                    m_Exclude.Add("palpi", "palpus");
                    m_Exclude.Add("pancratia", "pancratium");
                    m_Exclude.Add("panettoni", "panettone");
                    m_Exclude.Add("paparazzi", "paparazzo");
                    m_Exclude.Add("paperknives", "paperknife");
                    m_Exclude.Add("papillae", "papilla");
                    m_Exclude.Add("papillomata", "papilloma");
                    m_Exclude.Add("pappi", "pappus");
                    m_Exclude.Add("papulae", "papula");
                    m_Exclude.Add("papyri", "papyrus");
                    m_Exclude.Add("parabases", "parabasis");
                    m_Exclude.Add("paraleipses", "paraleipsis");
                    m_Exclude.Add("paralyses", "paralysis");
                    m_Exclude.Add("paramecia", "paramecium");
                    m_Exclude.Add("paramenta", "parament");
                    m_Exclude.Add("paraphyses", "paraphysis");
                    m_Exclude.Add("parapodia", "parapodium");
                    m_Exclude.Add("parapraxes", "parapraxis");
                    m_Exclude.Add("paraselenae", "paraselene");
                    m_Exclude.Add("parashoth", "parashah");
                    m_Exclude.Add("parasyntheta", "parasyntheton");
                    m_Exclude.Add("parazoa", "parazoan");
                    m_Exclude.Add("parentheses", "parenthesis");
                    m_Exclude.Add("parerga", "parergon");
                    m_Exclude.Add("parhelia", "parhelion");
                    m_Exclude.Add("parietes", "paries");
                    m_Exclude.Add("paris-mutuels", "pari-mutuel");
                    m_Exclude.Add("parrotfishes", "parrotfish");
                    m_Exclude.Add("parulides", "parulis");
                    m_Exclude.Add("pasos_dobles", "paso_doble");
                    m_Exclude.Add("passers-by", "passer-by");
                    m_Exclude.Add("pastorali", "pastorale");
                    m_Exclude.Add("patagia", "patagium");
                    m_Exclude.Add("patellae", "patella");
                    m_Exclude.Add("patinae", "patina");
                    m_Exclude.Add("patresfamilias", "paterfamilias");
                    m_Exclude.Add("pease", "pea");
                    m_Exclude.Add("peccadilloes", "peccadillo");
                    m_Exclude.Add("pectines", "pecten");
                    m_Exclude.Add("pedaloes", "pedalo");
                    m_Exclude.Add("pedes", "pes");
                    m_Exclude.Add("pekingese", "pekinese");
                    m_Exclude.Add("pelves", "pelvis");
                    m_Exclude.Add("pence", "penny");
                    m_Exclude.Add("penes", "penis");
                    m_Exclude.Add("penetralium", "penetralia");
                    m_Exclude.Add("penicillia", "penicillium");
                    m_Exclude.Add("penknives", "penknife");
                    m_Exclude.Add("pennae", "penna");
                    m_Exclude.Add("pennia", "penni");
                    m_Exclude.Add("pentahedra", "pentahedron");
                    m_Exclude.Add("pentimenti", "pentimento");
                    m_Exclude.Add("penumbrae", "penumbra");
                    m_Exclude.Add("pepla", "peplum");
                    m_Exclude.Add("pericardia", "pericardium");
                    m_Exclude.Add("perichondria", "perichondrium");
                    m_Exclude.Add("pericrania", "pericranium");
                    m_Exclude.Add("peridia", "peridium");
                    m_Exclude.Add("perigonia", "perigonium");
                    m_Exclude.Add("perihelia", "perihelion");
                    m_Exclude.Add("perinea", "perineum");
                    m_Exclude.Add("perinephria", "perinephrium");
                    m_Exclude.Add("perionychia", "perionychium");
                    m_Exclude.Add("periostea", "periosteum");
                    m_Exclude.Add("periphrases", "periphrasis");
                    m_Exclude.Add("peristalses", "peristalsis");
                    m_Exclude.Add("perithecia", "perithecium");
                    m_Exclude.Add("peritonea", "peritoneum");
                    m_Exclude.Add("personae", "persona");
                    m_Exclude.Add("petechiae", "petechia");
                    m_Exclude.Add("pfennige", "pfennig");
                    m_Exclude.Add("phalanges", "phalange");
                    m_Exclude.Add("phalli", "phallus");
                    m_Exclude.Add("pharynges", "pharynx");
                    m_Exclude.Add("phenomena", "phenomenon");
                    m_Exclude.Add("phi-phenomena", "phi-phenomenon");
                    m_Exclude.Add("philodendra", "philodendron");
                    m_Exclude.Add("phlyctenae", "phlyctaena");
                    m_Exclude.Add("phyla", "phylum");
                    m_Exclude.Add("phylae", "phyle");
                    m_Exclude.Add("phyllotaxes", "phyllotaxis");
                    m_Exclude.Add("phylloxerae", "phylloxera");
                    m_Exclude.Add("phylogeneses", "phylogenesis");
                    m_Exclude.Add("pieds-a-terre", "pied-a-terre");
                    m_Exclude.Add("pigfishes", "pigfish");
                    m_Exclude.Add("pilea", "pileum");
                    m_Exclude.Add("pilei", "pileus");
                    m_Exclude.Add("pineta", "pinetum");
                    m_Exclude.Add("pinfishes", "pinfish");
                    m_Exclude.Add("pinkoes", "pinko");
                    m_Exclude.Add("pinnae", "pinna");
                    m_Exclude.Add("pinnulae", "pinnula");
                    m_Exclude.Add("pipefishes", "pipefish");
                    m_Exclude.Add("pirogi", "pirog");
                    m_Exclude.Add("piscinae", "piscina");
                    m_Exclude.Add("pithecanthropi", "pithecanthropus");
                    m_Exclude.Add("pithoi", "pithos");
                    m_Exclude.Add("placeboes", "placebo");
                    m_Exclude.Add("placentae", "placenta");
                    m_Exclude.Add("planetaria", "planetarium");
                    m_Exclude.Add("planulae", "planula");
                    m_Exclude.Add("plasmodesmata", "plasmodesma");
                    m_Exclude.Add("plasmodia", "plasmodium");
                    m_Exclude.Add("plateaux", "plateau");
                    m_Exclude.Add("plectra", "plectron");
                    m_Exclude.Add("plena", "plenum");
                    m_Exclude.Add("pleura", "pleuron");
                    m_Exclude.Add("pleurae", "pleura");
                    m_Exclude.Add("plicae", "plica");
                    m_Exclude.Add("ploughmen", "ploughman");
                    m_Exclude.Add("pneumobacilli", "pneumobacillus");
                    m_Exclude.Add("pneumococci", "pneumococcus");
                    m_Exclude.Add("pocketknives", "pocketknife");
                    m_Exclude.Add("podetia", "podetium");
                    m_Exclude.Add("podia", "podium");
                    m_Exclude.Add("poleis", "polis");
                    m_Exclude.Add("pollices", "pollex");
                    m_Exclude.Add("pollinia", "pollinium");
                    m_Exclude.Add("polychasia", "polychasium");
                    m_Exclude.Add("polyhedra", "polyhedron");
                    m_Exclude.Add("polyparia", "polyparium");
                    m_Exclude.Add("polypi", "polypus");
                    m_Exclude.Add("polyzoa", "polyzoan");
                    m_Exclude.Add("polyzoaria", "polyzoarium");
                    m_Exclude.Add("pontes", "pons");
                    m_Exclude.Add("pontifices", "pontifex");
                    m_Exclude.Add("portamenti", "portamento");
                    m_Exclude.Add("porticoes", "portico");
                    m_Exclude.Add("portmanteaux", "portmanteau");
                    m_Exclude.Add("postliminia", "postliminium");
                    m_Exclude.Add("potatoes", "potato");
                    m_Exclude.Add("praenomina", "praenomen");
                    m_Exclude.Add("praxes", "praxis");
                    m_Exclude.Add("predelle", "predella");
                    m_Exclude.Add("premaxillae", "premaxilla");
                    m_Exclude.Add("prenomina", "prenomen");
                    m_Exclude.Add("prese", "presa");
                    m_Exclude.Add("primi", "primo");
                    m_Exclude.Add("primigravidae", "primigravida");
                    m_Exclude.Add("primiparae", "primipara");
                    m_Exclude.Add("primordia", "primordium");
                    m_Exclude.Add("principia", "principium");
                    m_Exclude.Add("proboscides", "proboscis");
                    m_Exclude.Add("proces-verbaux", "proces-verbal");
                    m_Exclude.Add("proglottides", "proglottid");
                    m_Exclude.Add("prognoses", "prognosis");
                    m_Exclude.Add("prolegomena", "prolegomenon");
                    m_Exclude.Add("prolepses", "prolepsis");
                    m_Exclude.Add("promycelia", "promycelium");
                    m_Exclude.Add("pronephra", "pronephros");
                    m_Exclude.Add("pronephroi", "pronephros");
                    m_Exclude.Add("pronuclei", "pronucleus");
                    m_Exclude.Add("propositi", "propositus");
                    m_Exclude.Add("proptoses", "proptosis");
                    m_Exclude.Add("propyla", "propylon");
                    m_Exclude.Add("propylaea", "propylaeum");
                    m_Exclude.Add("proscenia", "proscenium");
                    m_Exclude.Add("prosencephala", "prosencephalon");
                    m_Exclude.Add("prostheses", "prosthesis");
                    m_Exclude.Add("prostomia", "prostomium");
                    m_Exclude.Add("protases", "protasis");
                    m_Exclude.Add("prothalamia", "prothalamion");
                    m_Exclude.Add("prothalli", "prothallus");
                    m_Exclude.Add("prothallia", "prothallium");
                    m_Exclude.Add("prothoraces", "prothorax");
                    m_Exclude.Add("protonemata", "protonema");
                    m_Exclude.Add("protozoa", "protozoan");
                    m_Exclude.Add("proventriculi", "proventriculus");
                    m_Exclude.Add("provisoes", "proviso");
                    m_Exclude.Add("prytanea", "prytaneum");
                    m_Exclude.Add("psalteria", "psalterium");
                    m_Exclude.Add("pseudopodia", "pseudopodium");
                    m_Exclude.Add("psychoneuroses", "psychoneurosis");
                    m_Exclude.Add("psychoses", "psychosis");
                    m_Exclude.Add("pterygia", "pterygium");
                    m_Exclude.Add("pterylae", "pteryla");
                    m_Exclude.Add("ptoses", "ptosis");
                    m_Exclude.Add("pubes", "pubis");
                    m_Exclude.Add("pudenda", "pudendum");
                    m_Exclude.Add("puli", "pul");
                    m_Exclude.Add("pulvilli", "pulvillus");
                    m_Exclude.Add("pulvini", "pulvinus");
                    m_Exclude.Add("punchinelloes", "punchinello");
                    m_Exclude.Add("pupae", "pupa");
                    m_Exclude.Add("puparia", "puparium");
                    m_Exclude.Add("putamina", "putamen");
                    m_Exclude.Add("putti", "putto");
                    m_Exclude.Add("pycnidia", "pycnidium");
                    m_Exclude.Add("pygidia", "pygidium");
                    m_Exclude.Add("pylori", "pylorus");
                    m_Exclude.Add("pyxides", "pyxis");
                    m_Exclude.Add("pyxidia", "pyxidium");
                    m_Exclude.Add("qaddishim", "qaddish");
                    m_Exclude.Add("quadrennia", "quadrennium");
                    m_Exclude.Add("quadrigae", "quadriga");
                    m_Exclude.Add("qualia", "quale");
                    m_Exclude.Add("quanta", "quantum");
                    m_Exclude.Add("quarterstaves", "quarterstaff");
                    m_Exclude.Add("quezales", "quezal");
                    m_Exclude.Add("quinquennia", "quinquennium");
                    //                    m_Exclude.Add("quizzes", "quiz");
                    m_Exclude.Add("rabatos", "rabato");
                    m_Exclude.Add("rabbitfishes", "rabbitfish");
                    m_Exclude.Add("rachides", "rhachis");
                    m_Exclude.Add("radices", "radix");
                    m_Exclude.Add("radii", "radius");
                    m_Exclude.Add("radulae", "radula");
                    m_Exclude.Add("ramenta", "ramentum");
                    m_Exclude.Add("rami", "ramus");
                    m_Exclude.Add("ranulae", "ranula");
                    m_Exclude.Add("ranunculi", "ranunculus");
                    m_Exclude.Add("raphae", "raphe");
                    m_Exclude.Add("raphides", "raphide");
                    m_Exclude.Add("ratfishes", "ratfish");
                    m_Exclude.Add("reales", "real");
                    m_Exclude.Add("rearmice", "rearmouse");
                    m_Exclude.Add("recta", "rectum");
                    m_Exclude.Add("recti", "rectus");
                    m_Exclude.Add("rectrices", "rectrix");
                    m_Exclude.Add("redfishes", "redfish");
                    m_Exclude.Add("rediae", "redia");
                    m_Exclude.Add("referenda", "referendum");
                    m_Exclude.Add("refugia", "refugium");
                    m_Exclude.Add("reguli", "regulus");
                    m_Exclude.Add("reis", "real");
                    m_Exclude.Add("relata", "relatum");
                    m_Exclude.Add("remiges", "remex");
                    m_Exclude.Add("reremice", "rearmouse");
                    m_Exclude.Add("reseaux", "reseau");
                    m_Exclude.Add("residua", "residuum");
                    m_Exclude.Add("responsa", "responsum");
                    m_Exclude.Add("retia", "rete");
                    m_Exclude.Add("retiarii", "retiarius");
                    m_Exclude.Add("reticula", "reticulum");
                    m_Exclude.Add("retinacula", "retinaculum");
                    m_Exclude.Add("retinae", "retina");
                    m_Exclude.Add("rhabdomyomata", "rhabdomyoma");
                    m_Exclude.Add("rhachides", "rhachis");
                    m_Exclude.Add("rhachises", "rachis");
                    m_Exclude.Add("rhinencephala", "rhinencephalon");
                    m_Exclude.Add("rhizobia", "rhizobium");
                    m_Exclude.Add("rhombi", "rhombus");
                    m_Exclude.Add("rhonchi", "rhonchus");
                    m_Exclude.Add("rhyta", "rhyton");
                    m_Exclude.Add("ribbonfishes", "ribbonfish");
                    m_Exclude.Add("ricercacari", "ricercare");
                    m_Exclude.Add("ricercari", "ricercare");
                    m_Exclude.Add("rickettsiae", "rickettsia");
                    m_Exclude.Add("rilievi", "rilievo");
                    m_Exclude.Add("rimae", "rima");
                    m_Exclude.Add("robes-de-chambre", "robe-de-chambre");
                    m_Exclude.Add("rockfishes", "rockfish");
                    m_Exclude.Add("roma", "rom");
                    m_Exclude.Add("romans-fleuves", "roman-fleuve");
                    m_Exclude.Add("rondeaux", "rondeau");
                    m_Exclude.Add("rosaria", "rosarium");
                    m_Exclude.Add("rosefishes", "rosefish");
                    m_Exclude.Add("rostella", "rostellum");
                    m_Exclude.Add("rostra", "rostrum");
                    m_Exclude.Add("rouleaux", "rouleau");

                    m_Exclude.Add("rugae", "ruga");
                    m_Exclude.Add("rumina", "rumen");
                    m_Exclude.Add("runners-up", "runner-up");
                    m_Exclude.Add("sacra", "sacrum");
                    m_Exclude.Add("sacraria", "sacrarium");
                    m_Exclude.Add("saguaros", "saguaro");
                    m_Exclude.Add("sailfishes", "sailfish");
                    m_Exclude.Add("salespeople", "salesperson");
                    m_Exclude.Add("salmonellae", "salmonella");
                    m_Exclude.Add("salpae", "salpa");
                    m_Exclude.Add("salpinges", "salpinx");
                    m_Exclude.Add("saltarelli", "saltarello");
                    m_Exclude.Add("salvoes", "salvo");
                    m_Exclude.Add("sancta", "sanctum");
                    m_Exclude.Add("sanitaria", "sanitarium");
                    m_Exclude.Add("santimi", "santims");
                    m_Exclude.Add("saphenae", "saphena");
                    m_Exclude.Add("sarcophagi", "sarcophagus");
                    m_Exclude.Add("sartorii", "sartorius");
                    m_Exclude.Add("sassanidae", "sassanid");
                    m_Exclude.Add("sawfishes", "sawfish");
                    m_Exclude.Add("scaldfishes", "scaldfish");
                    m_Exclude.Add("scaleni", "scalenus");
                    m_Exclude.Add("scapulae", "scapula");
                    m_Exclude.Add("scarabaei", "scarabaeus");
                    m_Exclude.Add("scarves", "scarf");
                    m_Exclude.Add("schatchonim", "schatchen");
                    m_Exclude.Add("schemata", "schema");
                    m_Exclude.Add("scherzandi", "scherzando");
                    m_Exclude.Add("scherzi", "scherzo");
                    m_Exclude.Add("schmoes", "schmo");
                    m_Exclude.Add("scholia", "scholium");
                    m_Exclude.Add("schuln", "schul");
                    m_Exclude.Add("schutzstaffeln", "schutzstaffel");
                    m_Exclude.Add("scirrhi", "scirrhus");
                    m_Exclude.Add("scleromata", "scleroma");
                    m_Exclude.Add("scleroses", "sclerosis");
                    m_Exclude.Add("sclerotia", "sclerotium");
                    m_Exclude.Add("scoleces", "scolex");
                    m_Exclude.Add("scolices", "scolex");
                    m_Exclude.Add("scopulae", "scopula");
                    m_Exclude.Add("scoriae", "scoria");
                    m_Exclude.Add("scotomata", "scotoma");
                    m_Exclude.Add("scriptoria", "scriptorium");
                    m_Exclude.Add("scrota", "scrotum");
                    m_Exclude.Add("scudi", "scudo");
                    m_Exclude.Add("scuta", "scutum");
                    m_Exclude.Add("scutella", "scutellum");
                    m_Exclude.Add("scyphi", "scyphus");
                    m_Exclude.Add("scyphistomae", "scyphistoma");
                    m_Exclude.Add("scyphozoa", "scyphozoan");
                    m_Exclude.Add("secondi", "secondo");
                    m_Exclude.Add("secretaries-general", "secretary-general");
                    m_Exclude.Add("segni", "segno");
                    m_Exclude.Add("seleucidae", "seleucid");
                    m_Exclude.Add("selves", "self");
                    m_Exclude.Add("senores", "senor");
                    m_Exclude.Add("sensilla", "sensillum");
                    m_Exclude.Add("senti", "sent");
                    m_Exclude.Add("senussis", "senusi");
                    m_Exclude.Add("separatrices", "separatrix");
                    m_Exclude.Add("sephardim", "sephardi");
                    m_Exclude.Add("septa", "septum");
                    m_Exclude.Add("septaria", "septarium");
                    m_Exclude.Add("septennia", "septennium");
                    m_Exclude.Add("sequelae", "sequela");
                    m_Exclude.Add("sequestra", "sequestrum");
                    m_Exclude.Add("sera", "serum");
                    m_Exclude.Add("seraphim", "seraph");
                    m_Exclude.Add("sestertia", "sestertium");
                    m_Exclude.Add("setae", "seta");
                    m_Exclude.Add("sgraffiti", "sgraffito");
                    m_Exclude.Add("shabbasim", "shabbas");
                    m_Exclude.Add("shabbatim", "shabbat");
                    m_Exclude.Add("shackoes", "shacko");
                    m_Exclude.Add("shadchanim", "shadchan");
                    m_Exclude.Add("shadchans", "schatchen");
                    m_Exclude.Add("shakoes", "shako");
                    m_Exclude.Add("shammosim", "shammas");
                    m_Exclude.Add("sheatfishes", "sheatfish");
                    m_Exclude.Add("sheaves", "sheaf");
                    m_Exclude.Add("shellfishes", "shellfish");
                    m_Exclude.Add("shelves", "shelf");
                    m_Exclude.Add("shinleaves", "shinleaf");
                    m_Exclude.Add("shittim", "shittah");
                    m_Exclude.Add("shmoes", "shmo");
                    m_Exclude.Add("shofroth", "shofar");
                    m_Exclude.Add("shophroth", "shophar");
                    m_Exclude.Add("shrewmice", "shrewmouse");
                    m_Exclude.Add("shuln", "shul");
                    m_Exclude.Add("siddurim", "siddur");
                    m_Exclude.Add("sigloi", "siglos");
                    m_Exclude.Add("signore", "signora");
                    m_Exclude.Add("signori", "signior");
                    m_Exclude.Add("signorine", "signorina");
                    m_Exclude.Add("siliquae", "siliqua");
                    m_Exclude.Add("silvae", "silva");
                    m_Exclude.Add("silverfishes", "silverfish");
                    m_Exclude.Add("simulacra", "simulacrum");
                    m_Exclude.Add("sincipita", "sinciput");
                    m_Exclude.Add("sinfonie", "sinfonia");
                    m_Exclude.Add("sisters-in-law", "sister-in-law");
                    m_Exclude.Add("sistra", "sistrum");
                    m_Exclude.Add("situlae", "situla");
                    m_Exclude.Add("smalti", "smalto");
                    m_Exclude.Add("snaggleteeth", "snaggletooth");
                    m_Exclude.Add("snailfishes", "snailfish");
                    m_Exclude.Add("snipefishes", "snipefish");
                    m_Exclude.Add("socmen", "socman");
                    m_Exclude.Add("sola", "solum");
                    m_Exclude.Add("solaria", "solarium");
                    m_Exclude.Add("solatia", "solatium");
                    m_Exclude.Add("soldi", "soldo");
                    m_Exclude.Add("soles", "sol");
                    m_Exclude.Add("solfeggi", "solfeggio");
                    m_Exclude.Add("soli", "solo");
                    m_Exclude.Add("solidi", "solidus");
                    m_Exclude.Add("somata", "soma");
                    m_Exclude.Add("sons-in-law", "son-in-law");
                    m_Exclude.Add("soprani", "soprano");
                    m_Exclude.Add("sordini", "sordino");
                    m_Exclude.Add("sori", "sorus");
                    m_Exclude.Add("soroses", "sorosis");
                    m_Exclude.Add("sovkhozy", "sovkhoz");
                    m_Exclude.Add("spadefishes", "spadefish");
                    m_Exclude.Add("spadices", "spadix");
                    m_Exclude.Add("spearfishes", "spearfish");
                    m_Exclude.Add("spectra", "spectrum");
                    m_Exclude.Add("specula", "speculum");
                    m_Exclude.Add("spermatia", "spermatium");
                    m_Exclude.Add("spermatogonia", "spermatogonium");
                    m_Exclude.Add("spermatozoa", "spermatozoon");
                    m_Exclude.Add("spermogonia", "spermogonium");
                    m_Exclude.Add("sphinges", "sphinx");
                    m_Exclude.Add("spicae", "spica");
                    m_Exclude.Add("spicula", "spiculum");
                    m_Exclude.Add("spirilla", "spirillum");
                    m_Exclude.Add("splayfeet", "splayfoot");
                    m_Exclude.Add("splenii", "splenius");
                    m_Exclude.Add("sporangia", "sporangium");
                    m_Exclude.Add("sporogonia", "sporogonium");
                    m_Exclude.Add("sporozoa", "sporozoan");
                    m_Exclude.Add("springhase", "springhaas");
                    m_Exclude.Add("spumoni", "spumone");
                    m_Exclude.Add("sputa", "sputum");
                    m_Exclude.Add("squamae", "squama");
                    m_Exclude.Add("squashes", "squash");
                    m_Exclude.Add("squillae", "squilla");
                    m_Exclude.Add("squirrelfishes", "squirrelfish");
                    m_Exclude.Add("squizzes", "squiz");
                    m_Exclude.Add("stadia", "stadium");
                    m_Exclude.Add("stamina", "stamen");
                    m_Exclude.Add("staminodia", "staminodium");
                    m_Exclude.Add("stapedes", "stapes");

                    m_Exclude.Add("staphylococci", "staphylococcus");
                    m_Exclude.Add("starfishes", "starfish");
                    m_Exclude.Add("startsy", "starets");
                    m_Exclude.Add("stelae", "stele");
                    m_Exclude.Add("stemmata", "stemma");
                    m_Exclude.Add("stenoses", "stenosis");
                    m_Exclude.Add("stepchildren", "stepchild");
                    m_Exclude.Add("sterna", "sternum");
                    m_Exclude.Add("stigmata", "stigma");
                    m_Exclude.Add("stimuli", "stimulus");
                    m_Exclude.Add("stipites", "stipes");
                    m_Exclude.Add("stirpes", "stirps");
                    m_Exclude.Add("stoae", "stoa");
                    m_Exclude.Add("stockfishes", "stockfish");
                    m_Exclude.Add("stomata", "stoma");
                    m_Exclude.Add("stomodaea", "stomodaeum");
                    m_Exclude.Add("stomodea", "stomodeum");
                    m_Exclude.Add("stonefishes", "stonefish");
                    m_Exclude.Add("stotinki", "stotinka");
                    m_Exclude.Add("stotkini", "stotinka");
                    m_Exclude.Add("strappadoes", "strappado");
                    m_Exclude.Add("strata", "stratum");
                    m_Exclude.Add("strati", "stratus");
                    m_Exclude.Add("stratocumuli", "stratocumulus");
                    m_Exclude.Add("street_children", "street_child");
                    m_Exclude.Add("streptococci", "streptococcus");
                    m_Exclude.Add("stretti", "stretto");
                    m_Exclude.Add("striae", "stria");
                    m_Exclude.Add("strobili", "strobilus");
                    m_Exclude.Add("stromata", "stroma");
                    m_Exclude.Add("strumae", "struma");
                    m_Exclude.Add("stuccoes", "stucco");
                    m_Exclude.Add("styli", "stylus");
                    m_Exclude.Add("stylopes", "stylops");
                    m_Exclude.Add("stylopodia", "stylopodium");
                    m_Exclude.Add("subcortices", "subcortex");
                    m_Exclude.Add("subdeliria", "subdelirium");
                    m_Exclude.Add("subgenera", "subgenus");
                    m_Exclude.Add("subindices", "subindex");
                    m_Exclude.Add("submucosae", "submucosa");
                    m_Exclude.Add("subphyla", "subphylum");
                    m_Exclude.Add("substrasta", "substratum");
                    m_Exclude.Add("succedanea", "succedaneum");
                    m_Exclude.Add("succubi", "succubus");
                    m_Exclude.Add("suckerfishes", "suckerfish");
                    m_Exclude.Add("suckfishes", "suckfish");
                    m_Exclude.Add("sudaria", "sudarium");
                    m_Exclude.Add("sudatoria", "sudatorium");
                    //TODO:                    m_Exclude.Add("sudatoria", "sudatorium");
                    m_Exclude.Add("sulci", "sulcus");

                    m_Exclude.Add("summae", "summa");
                    m_Exclude.Add("sunfishes", "sunfish");
                    m_Exclude.Add("supercargoes", "supercargo");
                    m_Exclude.Add("superheroes", "superhero");
                    m_Exclude.Add("supernovae", "supernova");
                    m_Exclude.Add("superstrata", "superstratum");
                    m_Exclude.Add("surgeonfishes", "surgeonfish");
                    m_Exclude.Add("swamies", "swami");
                    m_Exclude.Add("sweetiewives", "sweetiewife");
                    m_Exclude.Add("swellfishes", "swellfish");
                    m_Exclude.Add("swordfishes", "swordfish");
                    m_Exclude.Add("syconia", "syconium");
                    m_Exclude.Add("syllabi", "syllabus");
                    m_Exclude.Add("syllepses", "syllepsis");
                    m_Exclude.Add("symphyses", "symphysis");
                    m_Exclude.Add("sympodia", "sympodium");
                    m_Exclude.Add("symposia", "symposium");
                    m_Exclude.Add("synapses", "synapsis");
                    m_Exclude.Add("synarthroses", "synarthrosis");
                    m_Exclude.Add("synclinoria", "synclinorium");
                    m_Exclude.Add("syncytia", "syncytium");
                    m_Exclude.Add("syndesmoses", "syndesmosis");
                    m_Exclude.Add("synopses", "synopsis");
                    m_Exclude.Add("syntagmata", "syntagma");

                    m_Exclude.Add("syntheses", "synthesis");
                    m_Exclude.Add("syphilomata", "syphiloma");
                    m_Exclude.Add("syringes", "syrinx");
                    m_Exclude.Add("syssarcoses", "syssarcosis");
                    m_Exclude.Add("tableaux", "tableau");
                    m_Exclude.Add("taeniae", "taenia");
                    m_Exclude.Add("tali", "talus");
                    m_Exclude.Add("tallaisim", "tallith");
                    m_Exclude.Add("tallithes", "tallith");
                    m_Exclude.Add("tallitoth", "tallith");
                    m_Exclude.Add("tapeta", "tapetum");
                    m_Exclude.Add("tarantulae", "tarantula");
                    m_Exclude.Add("tarsi", "tarsus");
                    m_Exclude.Add("tarsometatarsi", "tarsometatarsus");
                    m_Exclude.Add("taxa", "taxon");
                    m_Exclude.Add("taxes", "tax");
                    m_Exclude.Add("taxies", "taxi");
                    m_Exclude.Add("tectrices", "tectrix");
                    m_Exclude.Add("teeth", "tooth");
                    m_Exclude.Add("tegmina", "tegmen");
                    m_Exclude.Add("telae", "tela");
                    m_Exclude.Add("telamones", "telamon");
                    m_Exclude.Add("telangiectases", "telangiectasia");
                    m_Exclude.Add("telia", "telium");
                    m_Exclude.Add("tempi", "tempo");
                    m_Exclude.Add("tenacula", "tenaculum");
                    m_Exclude.Add("tenderfeet", "tenderfoot");
                    m_Exclude.Add("teniae", "tenia");
                    m_Exclude.Add("tenues", "tenuis");
                    m_Exclude.Add("teraphim", "teraph");
                    m_Exclude.Add("terata", "teras");
                    m_Exclude.Add("teredines", "teredo");
                    m_Exclude.Add("terga", "tergum");
                    m_Exclude.Add("termini", "terminus");
                    m_Exclude.Add("terraria", "terrarium");
                    m_Exclude.Add("terzetti", "terzetto");
                    m_Exclude.Add("tesserae", "tessera");
                    m_Exclude.Add("testae", "testa");
                    m_Exclude.Add("testes", "testis");
                    m_Exclude.Add("testudines", "testudo");
                    m_Exclude.Add("tetrahedra", "tetrahedron");
                    m_Exclude.Add("tetraskelia", "tetraskelion");
                    m_Exclude.Add("thalamencephala", "thalamencephalon");
                    m_Exclude.Add("thalami", "thalamus");
                    m_Exclude.Add("thalli", "thallus");
                    m_Exclude.Add("theatres-in-the-round", "theatre-in-the-round");
                    m_Exclude.Add("thecae", "theca");
                    m_Exclude.Add("therses", "thyrse");
                    m_Exclude.Add("thesauri", "thesaurus");
                    m_Exclude.Add("theses", "thesis");
                    m_Exclude.Add("thickleaves", "thickleaf");
                    m_Exclude.Add("thieves", "thief");
                    m_Exclude.Add("tholoi", "tholos");
                    m_Exclude.Add("thoraces", "thorax");
                    m_Exclude.Add("thrombi", "thrombus");
                    m_Exclude.Add("thymi", "thymus");
                    m_Exclude.Add("thyrsi", "thyrsus");
                    m_Exclude.Add("tibiae", "tibia");
                    m_Exclude.Add("tilefishes", "tilefish");
                    m_Exclude.Add("tintinnabula", "tintinnabulum");
                    m_Exclude.Add("titmice", "titmouse");
                    m_Exclude.Add("toadfishes", "toadfish");
                    m_Exclude.Add("tobaccoes", "tobacco");
                    m_Exclude.Add("tomatoes", "tomato");
                    m_Exclude.Add("tomenta", "tomentum");
                    m_Exclude.Add("tondi", "tondo");
                    m_Exclude.Add("tonneaux", "tonneau");
                    m_Exclude.Add("tophi", "tophus");
                    m_Exclude.Add("topoi", "topos");
                    m_Exclude.Add("tori", "torus");
                    m_Exclude.Add("tornadoes", "tornado");
                    m_Exclude.Add("torpedoes", "torpedo");
                    m_Exclude.Add("torsi", "torso");
                    m_Exclude.Add("touracos", "touraco");
                    m_Exclude.Add("trabeculae", "trabecula");
                    m_Exclude.Add("tracheae", "trachea");
                    m_Exclude.Add("traditores", "traditor");
                    m_Exclude.Add("tragi", "tragus");
                    m_Exclude.Add("trapezia", "trapezium");
                    m_Exclude.Add("trapezohedra", "trapezohedron");
                    m_Exclude.Add("traumata", "trauma");
                    m_Exclude.Add("treponemata", "treponema");
                    m_Exclude.Add("trichinae", "trichina");
                    m_Exclude.Add("triclinia", "triclinium");
                    m_Exclude.Add("triennia", "triennium");
                    m_Exclude.Add("triforia", "triforium");
                    m_Exclude.Add("triggerfishes", "triggerfish");
                    m_Exclude.Add("trihedra", "trihedron");
                    m_Exclude.Add("triskelia", "triskelion");
                    m_Exclude.Add("trisoctahedra", "trisoctahedron");
                    m_Exclude.Add("triumviri", "triumvir");
                    m_Exclude.Add("trivia", "trivium");
                    m_Exclude.Add("trochleae", "trochlea");
                    m_Exclude.Add("tropaeola", "tropaeolum");
                    m_Exclude.Add("trous-de-loup", "trou-de-loup");
                    m_Exclude.Add("trousseaux", "trousseau");
                    m_Exclude.Add("trunkfishes", "trunkfish");
                    m_Exclude.Add("trymata", "tryma");
                    m_Exclude.Add("tubae", "tuba");
                    m_Exclude.Add("turves", "turf");
                    m_Exclude.Add("tympana", "tympanum");
                    m_Exclude.Add("tyros", "tiro");
                    m_Exclude.Add("ubermenschen", "ubermensch");
                    m_Exclude.Add("uglies", "ugli");
                    m_Exclude.Add("uigurs", "uighur");
                    m_Exclude.Add("ulnae", "ulna");
                    m_Exclude.Add("ultimata", "ultimatum");
                    m_Exclude.Add("umbilici", "umbilicus");
                    m_Exclude.Add("umbones", "umbo");
                    m_Exclude.Add("umbrae", "umbra");
                    m_Exclude.Add("unci", "uncus");
                    m_Exclude.Add("uncidia", "uredium");
                    m_Exclude.Add("uredines", "uredo");
                    m_Exclude.Add("uredinia", "uredinium");
                    m_Exclude.Add("uredosori", "uredosorus");
                    m_Exclude.Add("urethrae", "urethra");
                    m_Exclude.Add("urinalyses", "urinalysis");
                    m_Exclude.Add("uteri", "uterus");
                    m_Exclude.Add("utriculi", "utriculus");
                    m_Exclude.Add("uvulae", "uvula");
                    m_Exclude.Add("vacua", "vacuum");
                    m_Exclude.Add("vagi", "vagus");
                    m_Exclude.Add("vaginae", "vagina");
                    m_Exclude.Add("valleculae", "vallecula");
                    m_Exclude.Add("vaporetti", "vaporetto");
                    m_Exclude.Add("varices", "varix");
                    m_Exclude.Add("vasa", "vas");
                    m_Exclude.Add("vascula", "vasculum");
                    m_Exclude.Add("vela", "velum");
                    m_Exclude.Add("velamina", "velamen");
                    m_Exclude.Add("velaria", "velarium");
                    m_Exclude.Add("venae", "vena");
                    m_Exclude.Add("venae_cavae", "vena_cava");
                    m_Exclude.Add("ventriculi", "ventriculus");
                    m_Exclude.Add("vermes", "vermis");
                    m_Exclude.Add("verrucae", "verruca");
                    m_Exclude.Add("vertebrae", "vertebra");
                    m_Exclude.Add("vertices", "vertex");
                    m_Exclude.Add("vertigines", "vertigo");
                    m_Exclude.Add("vertigoes", "vertigo");
                    m_Exclude.Add("vesicae", "vesica");
                    m_Exclude.Add("vetoes", "veto");
                    m_Exclude.Add("vexilla", "vexillum");
                    m_Exclude.Add("viatica", "viaticum");
                    m_Exclude.Add("viatores", "viator");
                    m_Exclude.Add("vibracula", "vibraculum");
                    m_Exclude.Add("vibrissae", "vibrissa");
                    m_Exclude.Add("villi", "villus");
                    m_Exclude.Add("vimina", "vimen");
                    m_Exclude.Add("vincula", "vinculum");
                    m_Exclude.Add("viragoes", "virago");
                    m_Exclude.Add("vires", "vis");
                    m_Exclude.Add("virtuosi", "virtuoso");
                    m_Exclude.Add("vitae", "vita");
                    m_Exclude.Add("vitelli", "vitellus");
                    m_Exclude.Add("vittae", "vitta");
                    m_Exclude.Add("vivaria", "vivarium");
                    m_Exclude.Add("voces", "vox");
                    m_Exclude.Add("volcanoes", "volcano");
                    m_Exclude.Add("volkslieder", "volkslied");
                    m_Exclude.Add("volte", "volta");
                    m_Exclude.Add("volvae", "volva");
                    m_Exclude.Add("vorticellae", "vorticella");
                    m_Exclude.Add("vortices", "vortex");
                    m_Exclude.Add("vulvae", "vulva");
                    m_Exclude.Add("wagons-lits", "wagon-lit");
                    m_Exclude.Add("wahhabis", "wahabi");
                    m_Exclude.Add("wanderjahre", "wanderjahr");
                    m_Exclude.Add("weakfishes", "weakfish");
                    m_Exclude.Add("werewolves", "werewolf");
                    m_Exclude.Add("wharves", "wharf");
                    m_Exclude.Add("whippers-in", "whipper-in");
                    m_Exclude.Add("whitefishes", "whitefish");
                    m_Exclude.Add("wives", "wife");
                    m_Exclude.Add("wolffishes", "wolffish");
                    m_Exclude.Add("wolves", "wolf");
                    m_Exclude.Add("woodlice", "woodlouse");
                    m_Exclude.Add("wreckfishes", "wreckfish");
                    m_Exclude.Add("wunderkinder", "wunderkind");
                    m_Exclude.Add("xiphisterna", "xiphisternum");
                    m_Exclude.Add("yeshivahs", "yeshiva");
                    m_Exclude.Add("yeshivoth", "yeshiva");
                    m_Exclude.Add("yogin", "yogi");
                    m_Exclude.Add("yourselves", "yourself");
                    m_Exclude.Add("zamindaris", "zamindari");
                    m_Exclude.Add("zecchini", "zecchino");
                    m_Exclude.Add("zeroes", "zero");
                    m_Exclude.Add("zoa", "zoon");
                    m_Exclude.Add("zoaeae", "zoaea");
                    m_Exclude.Add("zoeae", "zoea");
                    m_Exclude.Add("zoeas", "zoaea");
                    m_Exclude.Add("zoonoses", "zoonosis");
                    m_Exclude.Add("zoosporangia", "zoosporangium");

                    #endregion
                }
                return m_Exclude;
            }
        }
        #endregion

        #region IsLetter    alphabet   symbInWord
        static char[] symbInWord = new char[] { '\'', '-', '_' };

        public static bool IsLetter(char c)
        {
            return c != ' ' && char.IsLetter(c); // ?? && c != '-'
        }

        static char[] alphabet = new char[] { 
            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 
              'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 
                'z', 'x', 'c', 'v', 'b', 'n', 'm'};
        static char[] alphabetRU = new char[] { 'ё',
            'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ',
              'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж',
                'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю'};
        #endregion

        #region GetMorpheme
        // forbide -> forbid -> forb  поэтому вычтем сперва forb- ide
        public static string GetMorpheme(string content)
        {
            if (string.IsNullOrEmpty(content)) return null;
            content = content.ToLower().Trim();
            if (content.EndsWith("'s"))
                content = content.Remove(content.Length - 2, 2);
            for (int i = 0; i < Suffix.Length; ++i)
            {
                if (Suffix[i].Length + 2 >= content.Length)
                    continue;
                if (content.EndsWith(Suffix[i]))
                {
                    content = content.Remove(content.Length - Suffix[i].Length, Suffix[i].Length);
                    break;
                }
            }
            return content;
        }
        #endregion

        #region Suffixs
        public static string[] Suffix = new string[] {
            //        Suffix 	Part of speech 	Meaning 	Examples 	Effect on word stress
            "chondrion", //   noun 	small grainlike structure 	mitochondrion 	
            
            "morphism", //   noun 	form 	isomorphism, homomorphism 	
            "centesis", //   noun 	puncturing 	amniocentesis 	
            "cephalic", //   adj 	relating to the head 	anencephaly, macrocephaly 	
            "esthesis", //
            "esthesia", //   noun 	sensation, feeling 	synesthesia, kinesthesis 	Stressed suffix

            "ectasia", //
            "ectasis", //   noun 	stretching out 	brochiectasis, telangiectasia 	
            "enchyma", //   noun 	cellular tissue 	mesenchyma, karyenchyma 	
            "ography", //   noun 	study of 	stenography, geography, photography 	Stressed suffix
            "kinesis", //   noun 	movement (ability thereof) 	telekinesis 	
            "ization", //   
            "isation", //   noun 		organization/organisation, categorization/categorisation 	Neutral
            "ologist", //   noun 	one who studies a scientific subject 	archaeologist 	Stressed suffix
            "science", //   noun 	knowing 	omniscience, prescience, conscience 	
            "tropism", //   noun 	to turn 	phototropism 	

            "gnosis", //   noun 	knowing 	prognosis, diagnosis 	Stressed suffix
            "hedron", //   noun 	seat, face 	icosahedron, tetrahedron 	Stressed suffix
            "phobia", //   noun 	fear 	acrophobia, mysophobia 	            
            "illion", //   		for large numbers; often to create facetious ones 	million, billion, gazillion (slang) 	
            "athlon", //   noun 	sporting event 	pentathlon, decathlon 	Stressed suffix
            "wright", //   noun 	person who makes 	playwright, wheelwright, shipwright 	
            "script", //   noun 	written 	manuscript, transcript 	
            "vorous", //   	noun / adj 	to devour 	carnivore, herbivore 	
            "ectomy", //   noun 	surgical removal 	laryngectomy, vasectomy 	Stressed suffix
            "phagia", //   noun 	eating 	monophagy 	
            "philia", //   noun 	attraction 	hemophilia 	
            "ocracy", //   noun 	system of government 	democracy, androcracy 	Stressed suffix

            "holic", //   adj 	love, addiction 	alcoholic, workaholic 	Stressed suffix
            "phone", //   noun, adj 	sound, audio; speaker of a language 	telephone, homophone; Anglophone 	Neutral
            "phyte", //   noun 	plant, used in botany to create terms which categorise plants based on their life-history, growth-form or ecological preferences 	therophyte, halophyte 	
            "polis", //   noun 	referring to city or big area 	Metropolis, Indianapolis 	
            "itive", //   adj 		sensitive 	Neutral
            "izzle", //   used for hip hop slang 	Americizzle, fo'shizzle 	
            "ology", //   study, science 	biology, planetology 	Stressed suffix
            "itude", //   noun 		attitude, gratitude, Beatitude 	Stress on previous syllable
            "omics", //   noun 	study of rules 	proteomics, economics 	Stressed suffix
            "onomy", //   noun 	knowledge of 	astronomy 	Stressed suffix
            "phagy", //
            "ation", //   noun 	state or concept of 	invitation, pronunciation, starvation 	Stressed suffix
            "ation", //   noun 	from verb with -ate, state or concept of 	concentration, oscillation, narration 	Stressed suffix
            "ative", //   adj 		talkative, lucrative, affirmative 	Neutral
            "atory", //   noun 		laboratory, conversatory 	
            "bound", //   adv 	heading in the direction of 	inbound, outbound, citybound 	            
            "esque", //   adj 	in the style of 	Pythonesque, Romanesque, picturesque 	Stressed suffix
            "mancy", //   noun 	divination by 	bibliomancy, necromancy 	Neutral
            "mania", //   noun 	an irrational but irresistible motive for a belief or action 	kleptomania, megalomania, mythomania 	Stressed suffix
            "ogram", //   noun 	writing, description 	ideogram 	Stressed suffix
            "archy", //   noun 	rule, leadership 	gynarchy, anarchy 	Neutral
            "agogy", //   noun 	leading 	pedagogy, demagogy 	Stressed suffix
            "ality", //   noun 	property (aspect, behaviour, condition) of 	proportionality, sexuality (see -al and -ity) 	Stressed suffix
            "coele", //
            "ville", //   noun 	city, town from French 	Nashville 	
            "etics", //   noun 		phonetics, memetics 	
            "wards", //   adj, adv 	direction 	southward, inward, upward 	Neutral
            "meter", //   noun 	measuring device 	barometer, thermometer 	
            "metry", //   noun 	measure 	symmetry, geometry, isometry 	
            "nesia", //   noun 	archipelago 	Indonesia, Polynesia 	
            "cycle", //   noun 	circle, cycle, unit of radio frequency 	epicycle 	Neutral
            "iable", //   adj 		sociable 	Stress on previous syllable
            "shire", //   noun 	region, county 	Oxfordshire, Hamshire, 	Neutral
            "ulent", //   adj 		turbulent, fraudulent 	
            "scope", //   noun 	from Greek skopos, view; instrument for viewing and observing spaces 	microscope, kaleidoscope, periscope 	


            "etic", //   adj 		energetic, sympathetic, frenetic 	
            "ette", //   noun 	small ~ 	diskette, statuette 	Stressed suffix
            "fare", //   noun 	how things are going / coming along 	welfare, fanfare, warfare 	Stressed suffix
            "fold", //   adj 	used to make adjectives meaning times 	twofold, manyfold 	Neutral
            "cele", //
            "coel", //   noun 	body cavity 	mucocoel or mucocoele 	
            "cele", //   noun 	tumor, hernia 	hydatidocele 	
            "cide", //   noun 	murder, killing agent 	suicide, insecticide, regicide 	Neutral
            "city", //   noun 	practice 	atrocity 	
            "able",
            "ible", //    adj 	capable, can do (same as -) 	usable, notable, comfortable 	Neutral
            "vore", //
            "ward", //    or
            "eous", //   adj 		courteous 	Neutral
            "mony", //   noun 		testimony, ceremony 	Neutral
            "ment", //   noun 	abstract noun 	movement, amazement, government 	Neutral
            "most", //   adj 		utmost, innermost 	Neutral
            "ness", //   noun 	abstract noun 	kindness, ruthlessness, darkness 	Neutral
            "ware", //   noun 	software 	hardware, software, freeware 	
            "wise", //   adj 	direction 	clockwise, lengthwise 	Neutral
            "ways", //   adj 		sideways, longways 	Neutral
            "ergy", //   noun 	work 	energy, synergy 	
            "ence", //   noun 		independence, violence, absence 	Neutral
            "ency", //   noun 		frequency, clemency, consistency 	Neutral
            "ance", //   noun 	state of 	relevance, annoyance, repentance 	Neutral
            "ancy", //   noun 	state of 	pregnancy, redundancy, vacancy 	Neutral
            "emia",     //     noun 	blood condition 	leukemia, anaemia 	Stressed suffix
            "hood", //   noun 	state/condition of, a group sharing characteristics 	brotherhood, adulthood, falsehood 	Neutral
            "arch", //   noun 	ruler, leader 	monarch, tetrarch 	Neutral
            "gate", //   noun 	a scandal, often political (back-formed from the Watergate scandal) 	Watergate, nipplegate 	Neutral
            "iary", //   adj 		tertiary 	Stress on previous syllable
            "iate", //   verb 		asphyxiate, deviate 	Stress on previous syllable
            "ible", //   adj 	capable, can do (same as -able) 	incredible, terrible, visible 	
            "ibly", //   adv 		incredibly, responsibly, terribly 	Stress on previous syllable
            "ency",    //   noun 	= ency with "i" theme vowel before it, derived from adjective (i)ent 	expediency 	Stress on previous syllable  "(i)ency    
            "iant", //   adj 		deviant, defiant 	Stress on previous syllable
            "ical", //   adj 		historical, phonological, economical 	Stress on previous syllable
            "ious", //   adj 		delicious, religious, vivacious 	Stress on previous syllable
            "onym", //   noun 	name, word 	antonym, heteronym 	
            "land", //   noun 	place, region, city, country 	Finland, Portland, hinterland 	
            "less", //   adj 	lack of 	homeless, useless, careless 	Neutral
            "ista", //   adept 	fashionista Condista 	
            "itis", //   noun 	disease, inflammation 	hepatitis, gingivitis 	Stressed suffix
            "like", //   adj 	having the qualities of 	childlike 	Neutral
            "ling", //   noun 	smaller, younger, cuter or weaker version of the noun root OR sharing an identity or quality of the noun root (e.g. as a follower) 	darling, duckling, earthling, sapling 	Neutral
            "opsy", //   noun 	examination 	autopsy, biopsy 	
            "osis", //   noun 	process, action, formation, diseased condition 	mitosis, osmosis, psychosis 	
            "type", //   noun 		stereotype, archetype 	Neutral
            "uary", //   noun 		sanctuary, mortuary 	
            "ship", //   noun 	abstract noun, state of being 	friendship, relationship, dictatorship 	Neutral
            "sion", //   noun 	noun that has been altered from a process 	decision, illusion 	Stress on previous syllable
            "some", //   adj 		tiresome, awesome, fulsome 	Stress on previous syllable
            "stan", //   noun 	land, country 	Afghanistan 	
            "ster", //   noun 	person 	youngster, gangster 	Neutral
            "tion", //   noun 	noun that has been altered from a process 	evaporation, introduction 	Stress on previous syllable
            "uous", //   adj 		tempestuous, sensuous 	Neutral
            "tome", //   noun 	part or segment 	dermatome 	
            
            "ent",    //   adj 	= ent with "i" theme vowel 	salient, sentient, expedient 	Stress on previous syllable  "(i)ent     
            "ess", //   noun 	female 	actress, waitress, stewardess, priestess 	Neutral
            "nik", //   noun 	Slavic origin; corresponds to "-er" 	sputnik, beatnik 	
            "eer", //   adj 		engineer, privateer 	Stressed suffix
            "eme", //   noun 	linguistic unit 	lexeme, phoneme, morpheme 	
            "dom", //   noun 	state or condition of 	freedom, boredom, kingdom 	Neutral
            "ent", //   adj 		different, excellent, independent 	Neutral
            "ent", //   noun 		resident, regent, superintendent 	Neutral
            "ern", //   adj 	direction 	western, northern 	Neutral
            "ery", //   noun 		slavery, machinery, nunnery 	Neutral
            "ade", //   noun 	collective suffix 	lemonade, accolade, blockade 	Stressed suffix
            "ard", //   noun 	person that does it 	drunkard, coward, wizard, steward 	Neutral
            "ary", //   adj 		ordinary, secondary, military 	Neutral
            "ary", //   noun 	group of 	dictionary (group of dictions (words)), library (group of libros (books)), seminary 	Neutral
            "ate", //    adj 		literate, desperate, fortunate 	Neutral
            "ate", //   noun 	function 	certificate, advocate 	Neutral
            "ate", //   verb 		concentrate, oscillate 	Neutral
            "age", //   noun 	manifestation of 	marriage, mileage, garage 	Neutral
            "ese", //   adj, noun 	nationality, language; occasionally to create facetious language names 	Chinese, legalese 	Stressed suffix
            "ful", //   adj 	full of, having some or much 	hopeful, useful 	Neutral
            "gon", //   noun 	angle 	polygon, pentagon 	Neutral
            "gry", //   noun 	adjective form of only 2 or 3 nouns in the English language 	angry, hungry 	Neutral
            "ial", //   adj 		special, filial, remedial 	Stress on previous syllable
            "ian", //   adj 		mammalian 	Stress on previous syllable
            "ian", //   adj, noun 		Brazilian, Christian 	Stress on previous syllable
            "ian", //   noun 		librarian, barbarian, physician 	Stress on previous syllable
            "ant", //   adj 		relevant, dominant, pleasant 	Neutral
            "ant", //   noun 		assistant, immigrant, inhabitant 	Neutral
            "ics", //   noun 	the study of 	Physics,Aerodynamics,Forensics, economics 	Stress on previous syllable
            "tom", //
            "ton", //   noun 	town, city 	Charleston, Stockton 	
            "eth", //   adj 	ordinal number 	tenth, millionth 	
            "ile", //   adj 		tactile, facile, volatile 	Neutral
            "ing", //   noun 	noun from verb, in the process of 	doing, acting 	Neutral
            "ing", //   noun 		bedding, stuffing, roofing 	Neutral
            "ion", //   noun 		action, companion 	
            "ish", //   adj 	adjective from noun; sort of; approximately 	foolish, selfish, greenish, tallish 	Stress on previous syllable
            "ish", //   adj, noun 	nationality, language 	Spanish, Turkish, English 	Stress on previous syllable
            "ism", //   noun 	doctrine, act, practice, condition 	Protestantism, alcoholism, Buddhism 	Neutral
            "ist", //   noun 	person 	dentist, socialist, cellist 	Neutral
            "ite", //   noun 	member of a group 	socialite, Carmelite 	Neutral
            "ity", //   noun 	expressing state or condition 	normality, formality 	Stress on previous syllable
            "ium", //   noun 	metallic element (exceptions: helium and selenium) 	sodium, Calcium 	Stress on previous syllable
            "ive", //   adj 	make the noun an adjective 	defensive, aggressive, passive 	Neutral
            "ize", //
            "ise", //   verb 	to cause, to be, to become 	materialize/materialise, idolize/idolise 	Neutral
            "let", //   noun 	diminutive, or denoting a relation to some part of the body 	ringlet, hamlet, anklet 	Neutral
            "man", //   noun 	person 	fireman, statesman 	Neutral
            "oid", //   adj 	resembling 	solenoid, hominoid 	
            "oid", //   noun 	resembling 	planetoid 	
            "ome", //   noun 	subject of an "-omics" 	genome 	
            "our", //   noun 		candor, fervour, color 	
            "ory", //   adj 		auditory, sensory 	Neutral
            "ory", //   noun 		history, repository 	
            "ose", //   adj 	full of, like, given to; carbohydrates, protein derivatives 	verbose; globose 	
            "ous", //   adj 	adjectival suffix 	porous, disastrous, nervous 	Neutral
            "ier", //   noun 		cashier, financier, gondolier 	Stress on previous syllable
            "ify", //
            
            "an", //   adj 	membership [1] 	republican, urban, veteran 	Neutral
            "ar", //    adj 	pertaining to 	linear, alveolar 	Neutral
//            "ar", //   noun 	person that does it 	beggar, liar 	Neutral
            "ad",   // noun 	group 	triad, monad 	
            "al", //   adj 	aspect of 	nominal, focal, (compare -ality) 	Neutral
            "er", //   noun 	changes verb to noun (the subject of that verb, see also -or) 	writer 	Neutral
            "al", //   noun 	abstract noun 	refusal, appraisal 	Neutral
            "cy", //   noun 	expressing the quality of an adjective 	diplomacy, literacy, idiocy 	Neutral
            "ed", //   adj 		bored, tiled 	Neutral
            "ee", //   noun 	changes verb to a noun (the object of that verb) 	employee, referee, payee 	Stressed suffix
            "en", //   adj 		golden, wooden, written, frozen 	Neutral
            "en", //   verb 		lessen, deafen, frighten 	Neutral
            "ia", //   noun 	abnormal state 	mania, apraxia, dementia, dysarthria 	Stress on previous syllable
            "ic", //   adj 	(adjective) 	neurotic, electronic, historic 	Stress on previous syllable
            "id", //   adj 	(categorical) property (aspect) of 	hominid, candid, fervid (compare -al) 	
            "ie", //   noun 	informal/slang ending to describe a person 	trekkie, hottie, homie 	Neutral
            "fy", //   verb 	to become, make 	clarify, specify, basify, vilify 	Stress on previous syllable
            "ty", //   noun 		certainty, loyalty 	Neutral
            "ly", //   adj 	-like, having the attributes of 	stately, monthly 	Neutral
            "ly", //   adv 	-like, having the attributes of 	quickly 	Neutral
            "or", //   noun 	changes verb to noun (see also -er), person 	actor, governor 	Neutral
            "or", //
            "us", //   noun 	inflammation 	ulcus 	
            "th", //   noun 	forming a noun 	growth, health, depth 	
            "th", //
            
            "t", //   adj 		burnt, spoilt 	Neutral
            "y"  //  adj having the quality of, inclined to 	runny, messy 	Neutra
        };
        #endregion

        #region GetExamples
        static public List<string> GetExamples(string word)
        {
            List<string> list = new List<string> { };
            list.AddRange(GetExamplesByDict('a', word));
            list.AddRange(GetExamplesByDict('n', word));
            list.AddRange(GetExamplesByDict('r', word));
            list.AddRange(GetExamplesByDict('v', word));
            return list;
        }

        static List<string> GetExamplesByDict(char ch, string word)
        {
            List<string> list = new List<string> { };
            int i = 0;
            StreamReader sr = D.GetDictStreamByName(ch);
            sr.BaseStream.Seek(0, SeekOrigin.Begin);
            sr.DiscardBufferedData();
            string line = "";
            while ((line = sr.ReadLine()) != null)
            {
                ++i;
                if (i < 30) continue;
                if (line.StartsWith("\0\0\0\0\0"))
                    break;
                list.AddRange(Card.GetExamplesByRawCard(word, line));
            }
            return list;
        }
        #endregion

        internal static Dictionary<string, IndexItem> Index = new Dictionary<string, IndexItem> { };
        static Dictionary<string, List<IndexItem>> rawSearchIndex = new Dictionary<string, List<IndexItem>> { };
        static Dictionary<string, List<IndexItem>> unzipSearchIndex = new Dictionary<string, List<IndexItem>> { };
        internal static Dictionary<string, IndexItemList<IndexItem>> SearchIndex = new Dictionary<string, IndexItemList<IndexItem>> { };

        public static void BuildIndex()
        {
            #region build rawSearchIndex = 549
            using(new TimeWatcher("for idiom") )
            {                
                StreamReader sr = D.GetDictStreamByName('i');
                if (sr == null) return; // dict file not founded
                sr.BaseStream.Seek(0, SeekOrigin.Begin);
                sr.DiscardBufferedData();
                string line = "";
                int i = 0;
                while ((line = sr.ReadLine()) != null)
                {
                    ++i;
                    if (i < 30) continue;
                    if (line.StartsWith("\0\0\0\0\0"))
                        break;
                    IndexItem item = new IndexItem(line);
                    Index.Add(item.Word, item);
                    int deepIndex = 2;
                    if (item.Word.Length < deepIndex)
                        deepIndex = item.Word.Length;
                    if (!char.IsLetter(item.Word[0]) || (item.Word.Length > 1 && !char.IsLetter(item.Word[1])))
                        deepIndex = 1;
                    string val = item.Word.Substring(0, deepIndex);
                    val = val.TrimEnd();
                    if (!rawSearchIndex.ContainsKey(val))
                    {
                        rawSearchIndex.Add(val, new List<IndexItem> { });
                    }
                    rawSearchIndex[val].Add(item);
                }
            }
            #endregion

            int midleSize = 300;
            using (new TimeWatcher("детализация и сжатие"))
            {

                #region детализируем крупные коллекции = 2776 (по 3 символа индекс) -> детализируем крупные коллекции = 3743 (по 4 символа индекс)

                // длина индекса = 3
                foreach (string key in rawSearchIndex.Keys)
                {
                    if (rawSearchIndex[key].Count > midleSize)
                    {
                        foreach (IndexItem item in rawSearchIndex[key])
                        {
                            string newKey = item.Word.Length > 2 ? item.Word.Substring(0, 2 + 1) : item.Word;
                            newKey = newKey.TrimEnd();
                            if (!unzipSearchIndex.ContainsKey(newKey))
                            {
                                unzipSearchIndex.Add(newKey, new List<IndexItem> {});
                            }
                            unzipSearchIndex[newKey].Add(item);
                        }
                    }
                    else unzipSearchIndex.Add(key, rawSearchIndex[key]);
                }

                rawSearchIndex = unzipSearchIndex;
                unzipSearchIndex = new Dictionary<string, List<IndexItem>> {};
                // длина индекса = 4
                foreach (string key in rawSearchIndex.Keys)
                {
                    if (rawSearchIndex[key].Count > midleSize)
                    {
                        foreach (IndexItem item in rawSearchIndex[key])
                        {
                            string newKey = item.Word.Length > 3 ? item.Word.Substring(0, 3 + 1) : item.Word;
                            newKey = newKey.TrimEnd();
                            if (!unzipSearchIndex.ContainsKey(newKey))
                            {
                                unzipSearchIndex.Add(newKey, new List<IndexItem> {});
                            }
                            unzipSearchIndex[newKey].Add(item);
                        }
                    }
                    else unzipSearchIndex.Add(key, rawSearchIndex[key]);
                }

                #endregion

                #region сожмем 668

                // лозунг !!!!!!!!!! лучше больше будет строк но лучше читабельность
                string compoundKey = "";
                int compoundCount = 0;
                foreach (string key in unzipSearchIndex.Keys)
                {
                    //if (key == "ko") // for debug
                    //    Console.WriteLine("");

                    bool isMinimalForCompound = unzipSearchIndex[key].Count + compoundCount < midleSize;
                    isMinimalForCompound = isMinimalForCompound || unzipSearchIndex[key].Count < 10;
                    //                isMinimalForCompound = isMinimalForCompound || (compoundKey.Length == 1 && compoundCount );

                    bool isSimilar = true; // проверка на совпадение 2 первых букв
                    if (!string.IsNullOrEmpty(compoundKey))
                    {
                        isSimilar = (compoundKey.Length > 0 && compoundKey[0] == key[0]);
                        if (compoundKey.Length != 1) // чтобы за -y шел -ya
                            if (unzipSearchIndex[key].Count > 50 && isMinimalForCompound)
                                // ПРОВЕРЯЕМ вторую букву только для небольших групп
                                if (compoundKey.Length > 1 && key.Length > 1)
                                    isSimilar = isSimilar && compoundKey[1] == key[1];
                    }

                    if ((isSimilar && isMinimalForCompound) || char.IsDigit(key[0])) // && compoundKey.Length < 40)
                    {
                        compoundKey += (string.IsNullOrEmpty(compoundKey) ? "" : "; ") + key;
                        compoundCount += unzipSearchIndex[key].Count;
                    }
                    else // иначе добавляем по ранее составленному compoundKey
                    {
                        if (!string.IsNullOrEmpty(compoundKey))
                        {
                            IndexItemList<IndexItem> list = new IndexItemList<IndexItem>(compoundKey) {};
                            SearchIndex.Add(compoundKey, list);
                            foreach (string partKey in compoundKey.Split(';'))
                            {
                                list.AddRange(unzipSearchIndex[partKey.TrimStart()]);
                            }
                        }
                        compoundKey = key;
                        compoundCount = unzipSearchIndex[key].Count;
                    }
                }

                #endregion
            }
        }


    }
    class C : DeflateStream
    {
        public C(Stream stream, CompressionMode mode, bool leaveOpen)
            : base(stream, mode, leaveOpen)
        {
        }
    }

}